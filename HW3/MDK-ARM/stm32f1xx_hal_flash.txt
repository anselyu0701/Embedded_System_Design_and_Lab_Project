; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ohw3_freertos\stm32f1xx_hal_flash.o --asm_dir=./ --list_dir=--list --depend=hw3_freertos\stm32f1xx_hal_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I../Drivers/CMSIS/Include -I..\FreeRTOS\include -I..\Middlewares\Third_Party\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\Middlewares\Third_Party\FreeRTOS\Source\include -I..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS -I.\RTE\_HW3_FreeRTOS -IC:\Users\ChangEn\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\ChangEn\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_HD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103x6 --omf_browse=hw3_freertos\stm32f1xx_hal_flash.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;810      */
;;;811    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4b04              LDR      r3,|L1.20|
;;;812    {
;;;813      /* Clean the error context */
;;;814      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2200              MOVS     r2,#0
000004  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;815      
;;;816    #if defined(FLASH_BANK2_END)
;;;817      if(Address <= FLASH_BANK1_END)
;;;818      {
;;;819    #endif /* FLASH_BANK2_END */
;;;820        /* Proceed to program the new data */
;;;821        SET_BIT(FLASH->CR, FLASH_CR_PG);
000006  4a04              LDR      r2,|L1.24|
000008  6913              LDR      r3,[r2,#0x10]
00000a  f0430301          ORR      r3,r3,#1
00000e  6113              STR      r3,[r2,#0x10]
;;;822    #if defined(FLASH_BANK2_END)
;;;823      }
;;;824      else
;;;825      {
;;;826        /* Proceed to program the new data */
;;;827        SET_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;828      }
;;;829    #endif /* FLASH_BANK2_END */
;;;830    
;;;831      /* Write data in the address */
;;;832      *(__IO uint16_t*)Address = Data;
000010  8001              STRH     r1,[r0,#0]
;;;833    }
000012  4770              BX       lr
;;;834    
                          ENDP

                  |L1.20|
                          DCD      ||.bss||
                  |L1.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;927      */
;;;928    static void FLASH_SetErrorCode(void)
000000  490e              LDR      r1,|L2.60|
;;;929    { 
;;;930    #if defined(FLASH_BANK2_END)
;;;931      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
;;;932    #else
;;;933      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000002  68c8              LDR      r0,[r1,#0xc]
000004  06c2              LSLS     r2,r0,#27
;;;934    #endif /* FLASH_BANK2_END */
;;;935      {
;;;936        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
000006  480e              LDR      r0,|L2.64|
000008  d503              BPL      |L2.18|
00000a  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00000c  f0420202          ORR      r2,r2,#2
000010  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L2.18|
;;;937      }
;;;938    #if defined(FLASH_BANK2_END)
;;;939      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
;;;940    #else
;;;941      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000012  68ca              LDR      r2,[r1,#0xc]
000014  0752              LSLS     r2,r2,#29
000016  d503              BPL      |L2.32|
;;;942    #endif /* FLASH_BANK2_END */
;;;943      {
;;;944         pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
000018  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00001a  f0420201          ORR      r2,r2,#1
00001e  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L2.32|
;;;945      }
;;;946    
;;;947      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
000020  69ca              LDR      r2,[r1,#0x1c]
000022  07d2              LSLS     r2,r2,#31
000024  d007              BEQ      |L2.54|
;;;948      {
;;;949         pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
000026  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
000028  f0420204          ORR      r2,r2,#4
00002c  61c2              STR      r2,[r0,#0x1c]  ; pFlash
;;;950         __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
00002e  69c8              LDR      r0,[r1,#0x1c]
000030  f0200001          BIC      r0,r0,#1
000034  61c8              STR      r0,[r1,#0x1c]
                  |L2.54|
;;;951      }
;;;952    
;;;953      /* Clear FLASH error pending bits */
;;;954    #if defined(FLASH_BANK2_END)
;;;955      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2);
;;;956    #else
;;;957      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
000036  2014              MOVS     r0,#0x14
000038  60c8              STR      r0,[r1,#0xc]
;;;958    #endif /* FLASH_BANK2_END */
;;;959    }  
00003a  4770              BX       lr
;;;960    /**
                          ENDP

                  |L2.60|
                          DCD      0x40022000
                  |L2.64|
                          DCD      ||.bss||

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;839      */
;;;840    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;841    {
000002  4605              MOV      r5,r0
;;;842      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;843         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;844         flag will be set */
;;;845         
;;;846      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4606              MOV      r6,r0
;;;847         
;;;848      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
00000a  4c11              LDR      r4,|L3.80|
00000c  e009              B        |L3.34|
                  |L3.14|
;;;849      { 
;;;850        if (Timeout != HAL_MAX_DELAY)
00000e  1c68              ADDS     r0,r5,#1
000010  d007              BEQ      |L3.34|
;;;851        {
;;;852          if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
000012  b125              CBZ      r5,|L3.30|
000014  f7fffffe          BL       HAL_GetTick
000018  1b80              SUBS     r0,r0,r6
00001a  42a8              CMP      r0,r5
00001c  d901              BLS      |L3.34|
                  |L3.30|
;;;853          {
;;;854            return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
;;;855          }
;;;856        }
;;;857      }
;;;858      
;;;859      /* Check FLASH End of Operation flag  */
;;;860      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;861      {
;;;862        /* Clear FLASH End of Operation pending bit */
;;;863        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;864      }
;;;865      
;;;866      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;867         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;868         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;869      {
;;;870        /*Save the error code*/
;;;871        FLASH_SetErrorCode();
;;;872        return HAL_ERROR;
;;;873      }
;;;874    
;;;875      /* If there is no error flag set */
;;;876      return HAL_OK;
;;;877    }
000020  bd70              POP      {r4-r6,pc}
                  |L3.34|
000022  68e0              LDR      r0,[r4,#0xc]          ;848
000024  07c0              LSLS     r0,r0,#31             ;848
000026  d1f2              BNE      |L3.14|
000028  68e0              LDR      r0,[r4,#0xc]          ;860
00002a  0680              LSLS     r0,r0,#26             ;860
00002c  d501              BPL      |L3.50|
00002e  2020              MOVS     r0,#0x20              ;863
000030  60e0              STR      r0,[r4,#0xc]          ;863
                  |L3.50|
000032  68e0              LDR      r0,[r4,#0xc]          ;866
000034  06c0              LSLS     r0,r0,#27             ;866
000036  d405              BMI      |L3.68|
000038  69e0              LDR      r0,[r4,#0x1c]         ;867
00003a  07c0              LSLS     r0,r0,#31             ;867
00003c  d102              BNE      |L3.68|
00003e  68e0              LDR      r0,[r4,#0xc]          ;868
000040  0740              LSLS     r0,r0,#29             ;868
000042  d503              BPL      |L3.76|
                  |L3.68|
000044  f7fffffe          BL       FLASH_SetErrorCode
000048  2001              MOVS     r0,#1                 ;872
00004a  bd70              POP      {r4-r6,pc}
                  |L3.76|
00004c  2000              MOVS     r0,#0                 ;876
00004e  bd70              POP      {r4-r6,pc}
;;;878    
                          ENDP

                  |L3.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;624      */
;;;625    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;626    {
;;;627      /* Prevent unused argument(s) compilation warning */
;;;628      UNUSED(ReturnValue);
;;;629      /* NOTE : This function Should not be modified, when the callback is needed,
;;;630                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;631       */ 
;;;632    }
;;;633    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;788      */
;;;789    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;790    { 
;;;791       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;792    }  
000004  4770              BX       lr
;;;793    /**
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;349      */
;;;350    void HAL_FLASH_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;351    {
;;;352      uint32_t addresstmp = 0;
;;;353      
;;;354      /* Check FLASH operation error flags */
;;;355    #if defined(FLASH_BANK2_END)
;;;356      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
;;;357        (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
;;;358    #else
;;;359      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000004  4d3e              LDR      r5,|L6.256|
000006  68e8              LDR      r0,[r5,#0xc]
;;;360    #endif /* FLASH_BANK2_END */
;;;361      {
;;;362        /*return the faulty address*/
;;;363        addresstmp = pFlash.Address;
000008  4c3e              LDR      r4,|L6.260|
00000a  06c0              LSLS     r0,r0,#27             ;359
;;;364        /* Reset address */
;;;365        pFlash.Address = 0xFFFFFFFF;
00000c  f04f37ff          MOV      r7,#0xffffffff
000010  f04f0600          MOV      r6,#0
000014  d402              BMI      |L6.28|
000016  68e8              LDR      r0,[r5,#0xc]          ;359
000018  0740              LSLS     r0,r0,#29             ;359
00001a  d508              BPL      |L6.46|
                  |L6.28|
00001c  f8d48008          LDR      r8,[r4,#8]            ;363  ; pFlash
000020  60a7              STR      r7,[r4,#8]  ; pFlash
;;;366      
;;;367        /*Save the Error code*/
;;;368        FLASH_SetErrorCode();
000022  f7fffffe          BL       FLASH_SetErrorCode
;;;369        
;;;370        /* FLASH error interrupt user callback */
;;;371        HAL_FLASH_OperationErrorCallback(addresstmp);
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;372    
;;;373        /* Stop the procedure ongoing*/
;;;374        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00002c  7026              STRB     r6,[r4,#0]
                  |L6.46|
;;;375      }
;;;376    
;;;377      /* Check FLASH End of Operation flag  */
;;;378    #if defined(FLASH_BANK2_END)
;;;379      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
;;;380      {
;;;381        /* Clear FLASH End of Operation pending bit */
;;;382        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
;;;383    #else
;;;384      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
00002e  68e8              LDR      r0,[r5,#0xc]
000030  0680              LSLS     r0,r0,#26
000032  d553              BPL      |L6.220|
;;;385      {
;;;386        /* Clear FLASH End of Operation pending bit */
;;;387        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000034  2020              MOVS     r0,#0x20
000036  60e8              STR      r0,[r5,#0xc]
;;;388    #endif /* FLASH_BANK2_END */
;;;389        
;;;390        /* Process can continue only if no error detected */
;;;391        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000038  7820              LDRB     r0,[r4,#0]  ; pFlash
00003a  b1f8              CBZ      r0,|L6.124|
;;;392        {
;;;393          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
00003c  7820              LDRB     r0,[r4,#0]  ; pFlash
00003e  2801              CMP      r0,#1
000040  d01d              BEQ      |L6.126|
;;;394          {
;;;395            /* Nb of pages to erased can be decreased */
;;;396            pFlash.DataRemaining--;
;;;397    
;;;398            /* Check if there are still pages to erase*/
;;;399            if(pFlash.DataRemaining != 0)
;;;400            {
;;;401              addresstmp = pFlash.Address;
;;;402              /*Indicate user which sector has been erased*/
;;;403              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;404    
;;;405              /*Increment sector number*/
;;;406              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
;;;407              pFlash.Address = addresstmp;
;;;408    
;;;409              /* If the erase operation is completed, disable the PER Bit */
;;;410              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;411    
;;;412              FLASH_PageErase(addresstmp);
;;;413            }
;;;414            else
;;;415            {
;;;416              /*No more pages to Erase, user callback can be called.*/
;;;417              /*Reset Sector and stop Erase pages procedure*/
;;;418              pFlash.Address = addresstmp = 0xFFFFFFFF;
;;;419              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;420              /* FLASH EOP interrupt user callback */
;;;421              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;422            }
;;;423          }
;;;424          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000042  7820              LDRB     r0,[r4,#0]  ; pFlash
000044  2802              CMP      r0,#2
000046  d033              BEQ      |L6.176|
;;;425          {
;;;426            /* Operation is completed, disable the MER Bit */
;;;427            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;428    
;;;429    #if defined(FLASH_BANK2_END)
;;;430            /* Stop Mass Erase procedure if no pending mass erase on other bank */
;;;431            if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
;;;432            {
;;;433    #endif /* FLASH_BANK2_END */
;;;434              /* MassErase ended. Return the selected bank*/
;;;435              /* FLASH EOP interrupt user callback */
;;;436              HAL_FLASH_EndOfOperationCallback(0);
;;;437    
;;;438              /* Stop Mass Erase procedure*/
;;;439              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;440            }
;;;441    #if defined(FLASH_BANK2_END)
;;;442          }
;;;443    #endif /* FLASH_BANK2_END */
;;;444          else
;;;445          {
;;;446            /* Nb of 16-bit data to program can be decreased */
;;;447            pFlash.DataRemaining--;
000048  6860              LDR      r0,[r4,#4]  ; pFlash
00004a  1e40              SUBS     r0,r0,#1
00004c  6060              STR      r0,[r4,#4]  ; pFlash
;;;448            
;;;449            /* Check if there are still 16-bit data to program */
;;;450            if(pFlash.DataRemaining != 0)
00004e  6860              LDR      r0,[r4,#4]  ; pFlash
000050  b3b0              CBZ      r0,|L6.192|
;;;451            {
;;;452              /* Increment address to 16-bit */
;;;453              pFlash.Address += 2;
000052  68a0              LDR      r0,[r4,#8]  ; pFlash
000054  1c80              ADDS     r0,r0,#2
000056  60a0              STR      r0,[r4,#8]  ; pFlash
;;;454              addresstmp = pFlash.Address;
000058  68a0              LDR      r0,[r4,#8]  ; pFlash
;;;455              
;;;456              /* Shift to have next 16-bit data */
;;;457              pFlash.Data = (pFlash.Data >> 16);
00005a  6921              LDR      r1,[r4,#0x10]  ; pFlash
00005c  6962              LDR      r2,[r4,#0x14]  ; pFlash
00005e  0c09              LSRS     r1,r1,#16
000060  ea414102          ORR      r1,r1,r2,LSL #16
000064  0c12              LSRS     r2,r2,#16
000066  6121              STR      r1,[r4,#0x10]  ; pFlash
000068  6162              STR      r2,[r4,#0x14]  ; pFlash
;;;458              
;;;459              /* Operation is completed, disable the PG Bit */
;;;460              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
00006a  6929              LDR      r1,[r5,#0x10]
00006c  f0210101          BIC      r1,r1,#1
000070  6129              STR      r1,[r5,#0x10]
;;;461    
;;;462              /*Program halfword (16-bit) at a specified address.*/
;;;463              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
000072  6921              LDR      r1,[r4,#0x10]  ; pFlash
000074  6962              LDR      r2,[r4,#0x14]  ; pFlash
000076  b289              UXTH     r1,r1
000078  f7fffffe          BL       FLASH_Program_HalfWord
                  |L6.124|
00007c  e02e              B        |L6.220|
                  |L6.126|
00007e  6860              LDR      r0,[r4,#4]            ;396  ; pFlash
000080  1e40              SUBS     r0,r0,#1              ;396
000082  6060              STR      r0,[r4,#4]            ;396  ; pFlash
000084  6860              LDR      r0,[r4,#4]            ;399  ; pFlash
000086  b168              CBZ      r0,|L6.164|
000088  68a0              LDR      r0,[r4,#8]            ;401  ; pFlash
00008a  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00008e  68a0              LDR      r0,[r4,#8]            ;406  ; pFlash
000090  f5006080          ADD      r0,r0,#0x400          ;406
000094  60a0              STR      r0,[r4,#8]            ;407  ; pFlash
000096  6929              LDR      r1,[r5,#0x10]         ;410
000098  f0210102          BIC      r1,r1,#2              ;410
00009c  6129              STR      r1,[r5,#0x10]         ;410
00009e  f7fffffe          BL       FLASH_PageErase
0000a2  e01b              B        |L6.220|
                  |L6.164|
0000a4  4638              MOV      r0,r7                 ;418
0000a6  60a7              STR      r7,[r4,#8]            ;418  ; pFlash
0000a8  7026              STRB     r6,[r4,#0]            ;419
0000aa  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000ae  e015              B        |L6.220|
                  |L6.176|
0000b0  6928              LDR      r0,[r5,#0x10]         ;427
0000b2  f0200004          BIC      r0,r0,#4              ;427
0000b6  6128              STR      r0,[r5,#0x10]         ;427
0000b8  2000              MOVS     r0,#0                 ;436
0000ba  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000be  e00c              B        |L6.218|
                  |L6.192|
0000c0  e7ff              B        |L6.194|
                  |L6.194|
;;;464            }
;;;465            else
;;;466            {
;;;467              /*Program ended. Return the selected address*/
;;;468              /* FLASH EOP interrupt user callback */
;;;469              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
0000c2  7820              LDRB     r0,[r4,#0]  ; pFlash
0000c4  2803              CMP      r0,#3
0000c6  d017              BEQ      |L6.248|
;;;470              {
;;;471                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;472              }
;;;473              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
0000c8  7820              LDRB     r0,[r4,#0]  ; pFlash
0000ca  2804              CMP      r0,#4
;;;474              {
;;;475                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2);
;;;476              }
;;;477              else 
;;;478              {
;;;479                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6);
0000cc  68a0              LDR      r0,[r4,#8]  ; pFlash
0000ce  d015              BEQ      |L6.252|
0000d0  f1b00006          SUBS.W   r0,r0,#6              ;473
                  |L6.212|
0000d4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;480              }
;;;481            
;;;482              /* Reset Address and stop Program procedure*/
;;;483              pFlash.Address = 0xFFFFFFFF;
0000d8  60a7              STR      r7,[r4,#8]  ; pFlash
                  |L6.218|
;;;484              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000da  7026              STRB     r6,[r4,#0]
                  |L6.220|
;;;485            }
;;;486          }
;;;487        }
;;;488      }
;;;489      
;;;490    #if defined(FLASH_BANK2_END)
;;;491      /* Check FLASH End of Operation flag  */
;;;492      if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
;;;493      {
;;;494        /* Clear FLASH End of Operation pending bit */
;;;495        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
;;;496        
;;;497        /* Process can continue only if no error detected */
;;;498        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;499        {
;;;500          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
;;;501          {
;;;502            /* Nb of pages to erased can be decreased */
;;;503            pFlash.DataRemaining--;
;;;504            
;;;505            /* Check if there are still pages to erase*/
;;;506            if(pFlash.DataRemaining != 0)
;;;507            {
;;;508              /* Indicate user which page address has been erased*/
;;;509              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;510            
;;;511              /* Increment page address to next page */
;;;512              pFlash.Address += FLASH_PAGE_SIZE;
;;;513              addresstmp = pFlash.Address;
;;;514    
;;;515              /* Operation is completed, disable the PER Bit */
;;;516              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;517    
;;;518              FLASH_PageErase(addresstmp);
;;;519            }
;;;520            else
;;;521            {
;;;522              /*No more pages to Erase*/
;;;523              
;;;524              /*Reset Address and stop Erase pages procedure*/
;;;525              pFlash.Address = 0xFFFFFFFF;
;;;526              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;527    
;;;528              /* FLASH EOP interrupt user callback */
;;;529              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;530            }
;;;531          }
;;;532          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
;;;533          {
;;;534            /* Operation is completed, disable the MER Bit */
;;;535            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;536    
;;;537            if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
;;;538            {
;;;539              /* MassErase ended. Return the selected bank*/
;;;540              /* FLASH EOP interrupt user callback */
;;;541              HAL_FLASH_EndOfOperationCallback(0);
;;;542            
;;;543              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;544            }
;;;545          }
;;;546          else
;;;547          {
;;;548            /* Nb of 16-bit data to program can be decreased */
;;;549            pFlash.DataRemaining--;
;;;550            
;;;551            /* Check if there are still 16-bit data to program */
;;;552            if(pFlash.DataRemaining != 0)
;;;553            {
;;;554              /* Increment address to 16-bit */
;;;555              pFlash.Address += 2;
;;;556              addresstmp = pFlash.Address;
;;;557              
;;;558              /* Shift to have next 16-bit data */
;;;559              pFlash.Data = (pFlash.Data >> 16);
;;;560              
;;;561              /* Operation is completed, disable the PG Bit */
;;;562              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;563    
;;;564              /*Program halfword (16-bit) at a specified address.*/
;;;565              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
;;;566            }
;;;567            else
;;;568            {
;;;569              /*Program ended. Return the selected address*/
;;;570              /* FLASH EOP interrupt user callback */
;;;571              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
;;;572              {
;;;573                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;574              }
;;;575              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
;;;576              {
;;;577                HAL_FLASH_EndOfOperationCallback(pFlash.Address-2);
;;;578              }
;;;579              else 
;;;580              {
;;;581                HAL_FLASH_EndOfOperationCallback(pFlash.Address-6);
;;;582              }
;;;583              
;;;584              /* Reset Address and stop Program procedure*/
;;;585              pFlash.Address = 0xFFFFFFFF;
;;;586              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;587            }
;;;588          }
;;;589        }
;;;590      }
;;;591    #endif 
;;;592    
;;;593      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000dc  7820              LDRB     r0,[r4,#0]  ; pFlash
0000de  2800              CMP      r0,#0
0000e0  d108              BNE      |L6.244|
;;;594      {
;;;595    #if defined(FLASH_BANK2_END)
;;;596        /* Operation is completed, disable the PG, PER and MER Bits for both bank */
;;;597        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;598        CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
;;;599      
;;;600        /* Disable End of FLASH Operation and Error source interrupts for both banks */
;;;601        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;602    #else
;;;603        /* Operation is completed, disable the PG, PER and MER Bits */
;;;604        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
0000e2  6928              LDR      r0,[r5,#0x10]
0000e4  f0200007          BIC      r0,r0,#7
0000e8  6128              STR      r0,[r5,#0x10]
;;;605    
;;;606        /* Disable End of FLASH Operation and Error source interrupts */
;;;607        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
0000ea  6928              LDR      r0,[r5,#0x10]
0000ec  f42050a0          BIC      r0,r0,#0x1400
0000f0  6128              STR      r0,[r5,#0x10]
;;;608    #endif /* FLASH_BANK2_END */
;;;609    
;;;610        /* Process Unlocked */
;;;611        __HAL_UNLOCK(&pFlash);
0000f2  7626              STRB     r6,[r4,#0x18]
                  |L6.244|
;;;612      }
;;;613    }
0000f4  e8bd81f0          POP      {r4-r8,pc}
                  |L6.248|
0000f8  68a0              LDR      r0,[r4,#8]            ;471  ; pFlash
0000fa  e7eb              B        |L6.212|
                  |L6.252|
0000fc  1e80              SUBS     r0,r0,#2              ;471
0000fe  e7e9              B        |L6.212|
;;;614    
                          ENDP

                  |L6.256|
                          DCD      0x40022000
                  |L6.260|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;706      */
;;;707    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;708    {
;;;709      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;710      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;711      
;;;712    #if defined(FLASH_BANK2_END)
;;;713      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;714      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;715    #endif /* FLASH_BANK2_END */
;;;716    
;;;717      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;718    }
00000c  4770              BX       lr
;;;719    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OB_Launch PROC
;;;757      */
;;;758    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;759    {
;;;760      /* Initiates a system reset request to launch the option byte loading */
;;;761      HAL_NVIC_SystemReset();
000002  f7fffffe          BL       HAL_NVIC_SystemReset
;;;762      
;;;763      return HAL_OK;  
000006  2000              MOVS     r0,#0
;;;764    }
000008  bd10              POP      {r4,pc}
;;;765    
                          ENDP


                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;744      */
;;;745    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L9.16|
;;;746    {
;;;747      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;748      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6901              LDR      r1,[r0,#0x10]
000004  f4217100          BIC      r1,r1,#0x200
000008  6101              STR      r1,[r0,#0x10]
;;;749      
;;;750      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;751    }
00000c  4770              BX       lr
;;;752      
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;724      */
;;;725    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L10.24|
;;;726    {
;;;727      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6901              LDR      r1,[r0,#0x10]
000004  0589              LSLS     r1,r1,#22
000006  d405              BMI      |L10.20|
;;;728      {
;;;729        /* Authorizes the Option Byte register programming */
;;;730        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
000008  4904              LDR      r1,|L10.28|
00000a  6081              STR      r1,[r0,#8]
;;;731        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
00000c  4904              LDR      r1,|L10.32|
00000e  6081              STR      r1,[r0,#8]
;;;732      }
;;;733      else
;;;734      {
;;;735        return HAL_ERROR;
;;;736      }  
;;;737      
;;;738      return HAL_OK;  
000010  2000              MOVS     r0,#0
;;;739    }
000012  4770              BX       lr
                  |L10.20|
000014  2001              MOVS     r0,#1                 ;735
000016  4770              BX       lr
;;;740    
                          ENDP

                  |L10.24|
                          DCD      0x40022000
                  |L10.28|
                          DCD      0x45670123
                  |L10.32|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;641      */
;;;642    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;643    {
;;;644      /* Prevent unused argument(s) compilation warning */
;;;645      UNUSED(ReturnValue);
;;;646      /* NOTE : This function Should not be modified, when the callback is needed,
;;;647                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;648       */ 
;;;649    }
;;;650    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;185      */
;;;186    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;187    {
000004  4607              MOV      r7,r0
;;;188      HAL_StatusTypeDef status = HAL_ERROR;
;;;189      uint8_t index = 0;
;;;190      uint8_t nbiterations = 0;
;;;191      
;;;192      /* Process Locked */
;;;193      __HAL_LOCK(&pFlash);
000006  481c              LDR      r0,|L12.120|
000008  4688              MOV      r8,r1                 ;187
00000a  2400              MOVS     r4,#0                 ;189
00000c  7e01              LDRB     r1,[r0,#0x18]  ; pFlash
00000e  4615              MOV      r5,r2                 ;187
000010  461e              MOV      r6,r3                 ;187
000012  2901              CMP      r1,#1
000014  d009              BEQ      |L12.42|
000016  2101              MOVS     r1,#1
000018  4681              MOV      r9,r0
00001a  7601              STRB     r1,[r0,#0x18]
;;;194    
;;;195      /* Check the parameters */
;;;196      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;197      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;198    
;;;199    #if defined(FLASH_BANK2_END)
;;;200      if(Address <= FLASH_BANK1_END)
;;;201      {
;;;202    #endif /* FLASH_BANK2_END */
;;;203        /* Wait for last operation to be completed */
;;;204        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00001c  f24c3a50          MOV      r10,#0xc350
000020  4650              MOV      r0,r10
000022  f7fffffe          BL       FLASH_WaitForLastOperation
000026  b118              CBZ      r0,|L12.48|
000028  e022              B        |L12.112|
                  |L12.42|
00002a  2002              MOVS     r0,#2                 ;193
                  |L12.44|
;;;205    #if defined(FLASH_BANK2_END)
;;;206      }
;;;207      else
;;;208      {
;;;209        /* Wait for last operation to be completed */
;;;210        status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;211      }
;;;212    #endif /* FLASH_BANK2_END */
;;;213      
;;;214      if(status == HAL_OK)
;;;215      {
;;;216        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;217        {
;;;218          /* Program halfword (16-bit) at a specified address. */
;;;219          nbiterations = 1;
;;;220        }
;;;221        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;222        {
;;;223          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;224          nbiterations = 2;
;;;225        }
;;;226        else
;;;227        {
;;;228          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;229          nbiterations = 4;
;;;230        }
;;;231    
;;;232        for (index = 0; index < nbiterations; index++)
;;;233        {
;;;234          FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
;;;235    
;;;236    #if defined(FLASH_BANK2_END)
;;;237          if(Address <= FLASH_BANK1_END)
;;;238          {
;;;239    #endif /* FLASH_BANK2_END */
;;;240            /* Wait for last operation to be completed */
;;;241            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;242        
;;;243            /* If the program operation is completed, disable the PG Bit */
;;;244            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;245    #if defined(FLASH_BANK2_END)
;;;246          }
;;;247          else
;;;248          {
;;;249            /* Wait for last operation to be completed */
;;;250            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;251            
;;;252            /* If the program operation is completed, disable the PG Bit */
;;;253            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;254          }
;;;255    #endif /* FLASH_BANK2_END */
;;;256          /* In case of error, stop programation procedure */
;;;257          if (status != HAL_OK)
;;;258          {
;;;259            break;
;;;260          }
;;;261        }
;;;262      }
;;;263    
;;;264      /* Process Unlocked */
;;;265      __HAL_UNLOCK(&pFlash);
;;;266    
;;;267      return status;
;;;268    }
00002c  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.48|
000030  2f01              CMP      r7,#1                 ;216
000032  d002              BEQ      |L12.58|
000034  2f02              CMP      r7,#2                 ;221
000036  d000              BEQ      |L12.58|
000038  2704              MOVS     r7,#4                 ;229
                  |L12.58|
00003a  46d3              MOV      r11,r10               ;204
00003c  f8dfa03c          LDR      r10,|L12.124|
                  |L12.64|
000040  0122              LSLS     r2,r4,#4              ;244
000042  4628              MOV      r0,r5                 ;234
000044  4631              MOV      r1,r6                 ;234
000046  f7fffffe          BL       __aeabi_llsr
00004a  b281              UXTH     r1,r0                 ;234
00004c  eb080044          ADD      r0,r8,r4,LSL #1       ;234
000050  f7fffffe          BL       FLASH_Program_HalfWord
000054  4658              MOV      r0,r11                ;241
000056  f7fffffe          BL       FLASH_WaitForLastOperation
00005a  f8da2010          LDR      r2,[r10,#0x10]        ;244
00005e  f0220201          BIC      r2,r2,#1              ;244
000062  f8ca2010          STR      r2,[r10,#0x10]        ;244
000066  b918              CBNZ     r0,|L12.112|
000068  1c64              ADDS     r4,r4,#1              ;257
00006a  b2e4              UXTB     r4,r4                 ;232
00006c  42bc              CMP      r4,r7                 ;232
00006e  d3e7              BCC      |L12.64|
                  |L12.112|
000070  2200              MOVS     r2,#0                 ;265
000072  f8892018          STRB     r2,[r9,#0x18]         ;265
000076  e7d9              B        |L12.44|
;;;269    
                          ENDP

                  |L12.120|
                          DCD      ||.bss||
                  |L12.124|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;284      */
;;;285    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;286    {
000004  460d              MOV      r5,r1
000006  4601              MOV      r1,r0
;;;287      HAL_StatusTypeDef status = HAL_OK;
;;;288      
;;;289      /* Process Locked */
;;;290      __HAL_LOCK(&pFlash);
000008  4814              LDR      r0,|L13.92|
00000a  2400              MOVS     r4,#0                 ;287
00000c  7e06              LDRB     r6,[r0,#0x18]  ; pFlash
00000e  2e01              CMP      r6,#1
000010  d01a              BEQ      |L13.72|
;;;291    
;;;292      /* Check the parameters */
;;;293      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;294      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;295    
;;;296    #if defined(FLASH_BANK2_END)
;;;297      /* If procedure already ongoing, reject the next one */
;;;298      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;299      {
;;;300        return HAL_ERROR;
;;;301      }
;;;302      
;;;303      if(Address <= FLASH_BANK1_END)
;;;304      {
;;;305        /* Enable End of FLASH Operation and Error source interrupts */
;;;306        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;307    
;;;308      }else
;;;309      {
;;;310        /* Enable End of FLASH Operation and Error source interrupts */
;;;311        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;312      }
;;;313    #else
;;;314      /* Enable End of FLASH Operation and Error source interrupts */
;;;315      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
000012  4f13              LDR      r7,|L13.96|
000014  2601              MOVS     r6,#1                 ;290
000016  7606              STRB     r6,[r0,#0x18]         ;290
000018  f8d7c010          LDR      r12,[r7,#0x10]
00001c  f44c5ca0          ORR      r12,r12,#0x1400
000020  f8c7c010          STR      r12,[r7,#0x10]
;;;316    #endif /* FLASH_BANK2_END */
;;;317      
;;;318      pFlash.Address = Address;
000024  6085              STR      r5,[r0,#8]  ; pFlash
;;;319      pFlash.Data = Data;
000026  6102              STR      r2,[r0,#0x10]  ; pFlash
000028  6143              STR      r3,[r0,#0x14]  ; pFlash
;;;320    
;;;321      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
00002a  2901              CMP      r1,#1
00002c  d00e              BEQ      |L13.76|
;;;322      {
;;;323        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;324        /*Program halfword (16-bit) at a specified address.*/
;;;325        pFlash.DataRemaining = 1;
;;;326      }
;;;327      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;328      {
;;;329        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
00002e  2304              MOVS     r3,#4
000030  2902              CMP      r1,#2                 ;327
000032  d00f              BEQ      |L13.84|
;;;330        /*Program word (32-bit : 2*16-bit) at a specified address.*/
;;;331        pFlash.DataRemaining = 2;
;;;332      }
;;;333      else
;;;334      {
;;;335        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
000034  2105              MOVS     r1,#5
000036  7001              STRB     r1,[r0,#0]
;;;336        /*Program double word (64-bit : 4*16-bit) at a specified address.*/
;;;337        pFlash.DataRemaining = 4;
000038  6043              STR      r3,[r0,#4]  ; pFlash
                  |L13.58|
;;;338      }
;;;339    
;;;340      /*Program halfword (16-bit) at a specified address.*/
;;;341      FLASH_Program_HalfWord(Address, (uint16_t)Data);
00003a  b291              UXTH     r1,r2
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       FLASH_Program_HalfWord
;;;342    
;;;343      return status;
000042  4620              MOV      r0,r4
                  |L13.68|
;;;344    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L13.72|
000048  2002              MOVS     r0,#2                 ;290
00004a  e7fb              B        |L13.68|
                  |L13.76|
00004c  2103              MOVS     r1,#3                 ;323
00004e  7001              STRB     r1,[r0,#0]            ;323
000050  6046              STR      r6,[r0,#4]            ;325  ; pFlash
000052  e7f2              B        |L13.58|
                  |L13.84|
000054  7003              STRB     r3,[r0,#0]            ;329
000056  2102              MOVS     r1,#2                 ;331
000058  6041              STR      r1,[r0,#4]            ;331  ; pFlash
00005a  e7ee              B        |L13.58|
;;;345    
                          ENDP

                  |L13.92|
                          DCD      ||.bss||
                  |L13.96|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;673      */
;;;674    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4805              LDR      r0,|L14.24|
;;;675    {
;;;676      if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
000002  6901              LDR      r1,[r0,#0x10]
000004  0609              LSLS     r1,r1,#24
000006  d505              BPL      |L14.20|
;;;677      {
;;;678        /* Authorize the FLASH Registers access */
;;;679        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
000008  4904              LDR      r1,|L14.28|
00000a  6041              STR      r1,[r0,#4]
;;;680        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
00000c  4904              LDR      r1,|L14.32|
00000e  6041              STR      r1,[r0,#4]
;;;681      }
;;;682      else
;;;683      {
;;;684        return HAL_ERROR;
;;;685      }
;;;686    
;;;687    #if defined(FLASH_BANK2_END)
;;;688      if (HAL_IS_BIT_SET(FLASH->CR2, FLASH_CR2_LOCK))
;;;689      {
;;;690        /* Authorize the FLASH BANK2 Registers access */
;;;691        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;692        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;693      }
;;;694      else
;;;695      {
;;;696        return HAL_ERROR;
;;;697      }
;;;698      
;;;699    #endif /* FLASH_BANK2_END */
;;;700      return HAL_OK; 
000010  2000              MOVS     r0,#0
;;;701    }
000012  4770              BX       lr
                  |L14.20|
000014  2001              MOVS     r0,#1                 ;684
000016  4770              BX       lr
;;;702    
                          ENDP

                  |L14.24|
                          DCD      0x40022000
                  |L14.28|
                          DCD      0x45670123
                  |L14.32|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
