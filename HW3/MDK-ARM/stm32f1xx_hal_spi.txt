; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ohw3_freertos\stm32f1xx_hal_spi.o --asm_dir=./ --list_dir=--list --depend=hw3_freertos\stm32f1xx_hal_spi.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I../Drivers/CMSIS/Include -I..\FreeRTOS\include -I..\Middlewares\Third_Party\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\Middlewares\Third_Party\FreeRTOS\Source\include -I..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS -I.\RTE\_HW3_FreeRTOS -IC:\Users\ChangEn\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\ChangEn\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_HD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103x6 --omf_browse=hw3_freertos\stm32f1xx_hal_spi.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_spi.c]
                          THUMB

                          AREA ||i.HAL_SPI_DMAPause||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAPause PROC
;;;1495     */
;;;1496   HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
000000  f8901050          LDRB     r1,[r0,#0x50]
;;;1497   {
;;;1498     /* Process Locked */
;;;1499     __HAL_LOCK(hspi);
000004  2901              CMP      r1,#1
000006  d011              BEQ      |L1.44|
000008  2101              MOVS     r1,#1
00000a  f8801050          STRB     r1,[r0,#0x50]
;;;1500     
;;;1501     /* Disable the SPI DMA Tx & Rx requests */
;;;1502     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00000e  6801              LDR      r1,[r0,#0]
000010  684a              LDR      r2,[r1,#4]
000012  f0220202          BIC      r2,r2,#2
000016  604a              STR      r2,[r1,#4]
;;;1503     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000018  6801              LDR      r1,[r0,#0]
00001a  684a              LDR      r2,[r1,#4]
00001c  f0220201          BIC      r2,r2,#1
000020  604a              STR      r2,[r1,#4]
;;;1504     
;;;1505     /* Process Unlocked */
;;;1506     __HAL_UNLOCK(hspi);
000022  2100              MOVS     r1,#0
000024  f8801050          STRB     r1,[r0,#0x50]
;;;1507     
;;;1508     return HAL_OK; 
000028  4608              MOV      r0,r1
;;;1509   }
00002a  4770              BX       lr
                  |L1.44|
00002c  2002              MOVS     r0,#2                 ;1499
00002e  4770              BX       lr
;;;1510   
                          ENDP


                          AREA ||i.HAL_SPI_DMAResume||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAResume PROC
;;;1516     */
;;;1517   HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
000000  f8901050          LDRB     r1,[r0,#0x50]
;;;1518   {
;;;1519     /* Process Locked */
;;;1520     __HAL_LOCK(hspi);
000004  2901              CMP      r1,#1
000006  d011              BEQ      |L2.44|
000008  2101              MOVS     r1,#1
00000a  f8801050          STRB     r1,[r0,#0x50]
;;;1521     
;;;1522     /* Enable the SPI DMA Tx & Rx requests */
;;;1523     SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00000e  6801              LDR      r1,[r0,#0]
000010  684a              LDR      r2,[r1,#4]
000012  f0420202          ORR      r2,r2,#2
000016  604a              STR      r2,[r1,#4]
;;;1524     SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000018  6801              LDR      r1,[r0,#0]
00001a  684a              LDR      r2,[r1,#4]
00001c  f0420201          ORR      r2,r2,#1
000020  604a              STR      r2,[r1,#4]
;;;1525     
;;;1526     /* Process Unlocked */
;;;1527     __HAL_UNLOCK(hspi);
000022  2100              MOVS     r1,#0
000024  f8801050          STRB     r1,[r0,#0x50]
;;;1528     
;;;1529     return HAL_OK;
000028  4608              MOV      r0,r1
;;;1530   }
00002a  4770              BX       lr
                  |L2.44|
00002c  2002              MOVS     r0,#2                 ;1520
00002e  4770              BX       lr
;;;1531   
                          ENDP


                          AREA ||i.HAL_SPI_DMAStop||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAStop PROC
;;;1537     */
;;;1538   HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1539   {
000002  4604              MOV      r4,r0
;;;1540     /* The Lock is not implemented on this API to allow the user application
;;;1541        to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback():
;;;1542        when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
;;;1543        and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
;;;1544        */
;;;1545     
;;;1546     /* Abort the SPI DMA tx Channel */
;;;1547     if(hspi->hdmatx != NULL)
000004  6c00              LDR      r0,[r0,#0x40]
000006  b108              CBZ      r0,|L3.12|
;;;1548     {
;;;1549       HAL_DMA_Abort(hspi->hdmatx);
000008  f7fffffe          BL       HAL_DMA_Abort
                  |L3.12|
;;;1550     }
;;;1551     /* Abort the SPI DMA rx Channel */
;;;1552     if(hspi->hdmarx != NULL)
00000c  6c60              LDR      r0,[r4,#0x44]
00000e  b108              CBZ      r0,|L3.20|
;;;1553     {
;;;1554       HAL_DMA_Abort(hspi->hdmarx);
000010  f7fffffe          BL       HAL_DMA_Abort
                  |L3.20|
;;;1555     }
;;;1556     
;;;1557     /* Disable the SPI DMA Tx & Rx requests */
;;;1558     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000014  6820              LDR      r0,[r4,#0]
000016  6841              LDR      r1,[r0,#4]
000018  f0210102          BIC      r1,r1,#2
00001c  6041              STR      r1,[r0,#4]
;;;1559     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
00001e  6820              LDR      r0,[r4,#0]
000020  6841              LDR      r1,[r0,#4]
000022  f0210101          BIC      r1,r1,#1
000026  6041              STR      r1,[r0,#4]
;;;1560     
;;;1561     hspi->State = HAL_SPI_STATE_READY;
000028  2001              MOVS     r0,#1
00002a  f8840051          STRB     r0,[r4,#0x51]
;;;1562     
;;;1563     return HAL_OK;
00002e  2000              MOVS     r0,#0
;;;1564   }
000030  bd10              POP      {r4,pc}
;;;1565   
                          ENDP


                          AREA ||i.HAL_SPI_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DeInit PROC
;;;307      */
;;;308    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;309    {
000002  0004              MOVS     r4,r0
000004  d011              BEQ      |L4.42|
;;;310      /* Check the SPI handle allocation */
;;;311      if(hspi == NULL)
;;;312      {
;;;313        return HAL_ERROR;
;;;314      }
;;;315    
;;;316      hspi->State = HAL_SPI_STATE_BUSY;
000006  2002              MOVS     r0,#2
000008  f8840051          STRB     r0,[r4,#0x51]
;;;317    
;;;318      /* Disable the SPI Peripheral Clock */
;;;319      __HAL_SPI_DISABLE(hspi);
00000c  6820              LDR      r0,[r4,#0]
00000e  6801              LDR      r1,[r0,#0]
000010  f0210140          BIC      r1,r1,#0x40
000014  6001              STR      r1,[r0,#0]
;;;320    
;;;321      /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
;;;322      HAL_SPI_MspDeInit(hspi);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_SPI_MspDeInit
;;;323    
;;;324      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
00001c  2000              MOVS     r0,#0
00001e  6560              STR      r0,[r4,#0x54]
;;;325      hspi->State = HAL_SPI_STATE_RESET;
000020  f8840051          STRB     r0,[r4,#0x51]
;;;326    
;;;327      /* Release Lock */
;;;328      __HAL_UNLOCK(hspi);
000024  f8840050          STRB     r0,[r4,#0x50]
;;;329    
;;;330      return HAL_OK;
;;;331    }
000028  bd10              POP      {r4,pc}
                  |L4.42|
00002a  2001              MOVS     r0,#1                 ;313
00002c  bd10              POP      {r4,pc}
;;;332    
                          ENDP


                          AREA ||i.HAL_SPI_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_ErrorCallback PROC
;;;1718     */
;;;1719    __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1720   {
;;;1721     /* Prevent unused argument(s) compilation warning */
;;;1722     UNUSED(hspi);
;;;1723     /* NOTE : - This function Should not be modified, when the callback is needed,
;;;1724               the HAL_SPI_ErrorCallback() could be implenetd in the user file.
;;;1725               - The ErrorCode parameter in the hspi handle is updated by the SPI processes
;;;1726               and user can use HAL_SPI_GetError() API to check the latest error occurred.
;;;1727      */
;;;1728   }
;;;1729   
                          ENDP


                          AREA ||i.HAL_SPI_GetError||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetError PROC
;;;1765     */
;;;1766   uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
000000  6d40              LDR      r0,[r0,#0x54]
;;;1767   {
;;;1768     return hspi->ErrorCode;
;;;1769   }
000002  4770              BX       lr
;;;1770   
                          ENDP


                          AREA ||i.HAL_SPI_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetState PROC
;;;1754     */
;;;1755   HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
000000  f8900051          LDRB     r0,[r0,#0x51]
;;;1756   {
;;;1757     return hspi->State;
;;;1758   }
000004  4770              BX       lr
;;;1759   
                          ENDP


                          AREA ||i.HAL_SPI_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SPI_IRQHandler PROC
;;;1571     */
;;;1572   void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
000000  b508              PUSH     {r3,lr}
;;;1573   {
;;;1574     /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
;;;1575     if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) == RESET))
000002  6801              LDR      r1,[r0,#0]
000004  684a              LDR      r2,[r1,#4]
000006  43d2              MVNS     r2,r2
000008  0652              LSLS     r2,r2,#25
00000a  d409              BMI      |L8.32|
00000c  688a              LDR      r2,[r1,#8]
00000e  43d2              MVNS     r2,r2
000010  07d2              LSLS     r2,r2,#31
000012  d105              BNE      |L8.32|
000014  688a              LDR      r2,[r1,#8]
000016  43d2              MVNS     r2,r2
000018  0652              LSLS     r2,r2,#25
00001a  d501              BPL      |L8.32|
;;;1576     {
;;;1577       hspi->RxISR(hspi);
;;;1578       return;
00001c  6c81              LDR      r1,[r0,#0x48]
00001e  e008              B        |L8.50|
                  |L8.32|
;;;1579     }
;;;1580   
;;;1581     /* SPI in mode Tramitter ---------------------------------------------------*/
;;;1582     if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE) != RESET))
000020  684a              LDR      r2,[r1,#4]
000022  43d2              MVNS     r2,r2
000024  0612              LSLS     r2,r2,#24
000026  d408              BMI      |L8.58|
000028  688a              LDR      r2,[r1,#8]
00002a  43d2              MVNS     r2,r2
00002c  0792              LSLS     r2,r2,#30
00002e  d404              BMI      |L8.58|
;;;1583     {
;;;1584       hspi->TxISR(hspi);
000030  6cc1              LDR      r1,[r0,#0x4c]
                  |L8.50|
000032  b001              ADD      sp,sp,#4
000034  f85deb04          POP      {lr}
000038  4708              BX       r1
                  |L8.58|
;;;1585       return;
;;;1586     }
;;;1587   
;;;1588     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
00003a  684a              LDR      r2,[r1,#4]
00003c  43d2              MVNS     r2,r2
00003e  0692              LSLS     r2,r2,#26
000040  d435              BMI      |L8.174|
;;;1589     {
;;;1590       /* SPI CRC error interrupt occurred ---------------------------------------*/
;;;1591       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000042  688a              LDR      r2,[r1,#8]
000044  43d2              MVNS     r2,r2
000046  06d2              LSLS     r2,r2,#27
000048  d406              BMI      |L8.88|
;;;1592       {
;;;1593         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
00004a  6d42              LDR      r2,[r0,#0x54]
00004c  f0420202          ORR      r2,r2,#2
000050  6542              STR      r2,[r0,#0x54]
;;;1594         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000052  f06f0210          MVN      r2,#0x10
000056  608a              STR      r2,[r1,#8]
                  |L8.88|
;;;1595       }
;;;1596       /* SPI Mode Fault error interrupt occurred --------------------------------*/
;;;1597       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
000058  6801              LDR      r1,[r0,#0]
00005a  688a              LDR      r2,[r1,#8]
00005c  43d2              MVNS     r2,r2
00005e  0692              LSLS     r2,r2,#26
000060  d409              BMI      |L8.118|
;;;1598       {
;;;1599         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
000062  6d42              LDR      r2,[r0,#0x54]
000064  f0420201          ORR      r2,r2,#1
000068  6542              STR      r2,[r0,#0x54]
;;;1600         __HAL_SPI_CLEAR_MODFFLAG(hspi);
00006a  688a              LDR      r2,[r1,#8]
00006c  680a              LDR      r2,[r1,#0]
00006e  f0220240          BIC      r2,r2,#0x40
000072  600a              STR      r2,[r1,#0]
000074  9200              STR      r2,[sp,#0]
                  |L8.118|
;;;1601       }
;;;1602       
;;;1603       /* SPI Overrun error interrupt occurred -----------------------------------*/
;;;1604       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
000076  6801              LDR      r1,[r0,#0]
000078  688a              LDR      r2,[r1,#8]
00007a  43d2              MVNS     r2,r2
00007c  0652              LSLS     r2,r2,#25
00007e  d40a              BMI      |L8.150|
;;;1605       {
;;;1606         if(hspi->State != HAL_SPI_STATE_BUSY_TX)
000080  f8902051          LDRB     r2,[r0,#0x51]
000084  2a12              CMP      r2,#0x12
000086  d006              BEQ      |L8.150|
;;;1607         {
;;;1608           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
000088  6d42              LDR      r2,[r0,#0x54]
00008a  f0420204          ORR      r2,r2,#4
00008e  6542              STR      r2,[r0,#0x54]
;;;1609           __HAL_SPI_CLEAR_OVRFLAG(hspi);      
000090  68ca              LDR      r2,[r1,#0xc]
000092  688a              LDR      r2,[r1,#8]
000094  9200              STR      r2,[sp,#0]
                  |L8.150|
;;;1610         }
;;;1611       }
;;;1612   
;;;1613       /* Call the Error call Back in case of Errors */
;;;1614       if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
000096  6d42              LDR      r2,[r0,#0x54]
000098  2a00              CMP      r2,#0
00009a  d008              BEQ      |L8.174|
;;;1615       {
;;;1616         __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
00009c  684a              LDR      r2,[r1,#4]
00009e  f02202e0          BIC      r2,r2,#0xe0
0000a2  604a              STR      r2,[r1,#4]
;;;1617         hspi->State = HAL_SPI_STATE_READY;
0000a4  2101              MOVS     r1,#1
0000a6  f8801051          STRB     r1,[r0,#0x51]
;;;1618         HAL_SPI_ErrorCallback(hspi);
0000aa  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L8.174|
;;;1619       }
;;;1620     }
;;;1621   }
0000ae  bd08              POP      {r3,pc}
;;;1622   
                          ENDP


                          AREA ||i.HAL_SPI_Init||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Init PROC
;;;245      */
;;;246    __weak HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000000  b570              PUSH     {r4-r6,lr}
;;;247    {
000002  0004              MOVS     r4,r0
000004  d004              BEQ      |L9.16|
;;;248      /* Check the SPI handle allocation */
;;;249      if(hspi == NULL)
;;;250      {
;;;251        return HAL_ERROR;
;;;252      }
;;;253    
;;;254      /* Check the parameters */
;;;255      assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
;;;256      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;257      assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
;;;258      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;259      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;260      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;261      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;262      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;263      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;264      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;265      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;266      assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;267    
;;;268      if(hspi->State == HAL_SPI_STATE_RESET)
000006  f8940051          LDRB     r0,[r4,#0x51]
00000a  2500              MOVS     r5,#0
00000c  b110              CBZ      r0,|L9.20|
00000e  e006              B        |L9.30|
                  |L9.16|
000010  2001              MOVS     r0,#1                 ;251
;;;269      {
;;;270        /* Allocate lock resource and initialize it */
;;;271        hspi->Lock = HAL_UNLOCKED;
;;;272        
;;;273        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;274        HAL_SPI_MspInit(hspi);
;;;275      }
;;;276      
;;;277      hspi->State = HAL_SPI_STATE_BUSY;
;;;278    
;;;279      /* Disble the selected SPI peripheral */
;;;280      __HAL_SPI_DISABLE(hspi);
;;;281    
;;;282      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;283      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;284      Communication speed, First bit and CRC calculation state */
;;;285      WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;286                                      hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;287                                      hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );
;;;288    
;;;289      /* Configure : NSS management */
;;;290      WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
;;;291    
;;;292      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;293      /* Configure : CRC Polynomial */
;;;294      WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
;;;295    
;;;296      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;297      hspi->State = HAL_SPI_STATE_READY;
;;;298      
;;;299      return HAL_OK;
;;;300    }
000012  bd70              POP      {r4-r6,pc}
                  |L9.20|
000014  f8845050          STRB     r5,[r4,#0x50]         ;271
000018  4620              MOV      r0,r4                 ;274
00001a  f7fffffe          BL       HAL_SPI_MspInit
                  |L9.30|
00001e  2002              MOVS     r0,#2                 ;277
000020  f8840051          STRB     r0,[r4,#0x51]         ;277
000024  6820              LDR      r0,[r4,#0]            ;280
000026  6801              LDR      r1,[r0,#0]            ;280
000028  f0210140          BIC      r1,r1,#0x40           ;280
00002c  6001              STR      r1,[r0,#0]            ;280
00002e  e9d40101          LDRD     r0,r1,[r4,#4]         ;280
000032  4308              ORRS     r0,r0,r1              ;285
000034  e9d41203          LDRD     r1,r2,[r4,#0xc]       ;285
000038  4311              ORRS     r1,r1,r2              ;285
00003a  4308              ORRS     r0,r0,r1              ;285
00003c  6961              LDR      r1,[r4,#0x14]         ;285
00003e  4308              ORRS     r0,r0,r1              ;285
000040  8b21              LDRH     r1,[r4,#0x18]         ;285
000042  f4017100          AND      r1,r1,#0x200          ;285
000046  4308              ORRS     r0,r0,r1              ;285
000048  69e1              LDR      r1,[r4,#0x1c]         ;285
00004a  4308              ORRS     r0,r0,r1              ;285
00004c  6a21              LDR      r1,[r4,#0x20]         ;285
00004e  4308              ORRS     r0,r0,r1              ;285
000050  6aa1              LDR      r1,[r4,#0x28]         ;285
000052  4308              ORRS     r0,r0,r1              ;285
000054  6821              LDR      r1,[r4,#0]            ;285
000056  6008              STR      r0,[r1,#0]            ;285
000058  69a0              LDR      r0,[r4,#0x18]         ;290
00005a  2104              MOVS     r1,#4                 ;290
00005c  ea014010          AND      r0,r1,r0,LSR #16      ;290
000060  6a61              LDR      r1,[r4,#0x24]         ;290
000062  4308              ORRS     r0,r0,r1              ;290
000064  6821              LDR      r1,[r4,#0]            ;290
000066  6048              STR      r0,[r1,#4]            ;290
000068  6821              LDR      r1,[r4,#0]            ;294
00006a  6ae0              LDR      r0,[r4,#0x2c]         ;294
00006c  6108              STR      r0,[r1,#0x10]         ;294
00006e  6565              STR      r5,[r4,#0x54]         ;296
000070  2001              MOVS     r0,#1                 ;297
000072  f8840051          STRB     r0,[r4,#0x51]         ;297
000076  2000              MOVS     r0,#0                 ;299
000078  bd70              POP      {r4-r6,pc}
;;;301    
                          ENDP


                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspDeInit PROC
;;;353      */
;;;354     __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;355    {
;;;356      /* Prevent unused argument(s) compilation warning */
;;;357      UNUSED(hspi);
;;;358      /* NOTE : This function Should not be modified, when the callback is needed,
;;;359                the HAL_SPI_MspDeInit could be implenetd in the user file
;;;360       */
;;;361    }
;;;362    
                          ENDP


                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspInit PROC
;;;338      */
;;;339     __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;340     {
;;;341      /* Prevent unused argument(s) compilation warning */
;;;342      UNUSED(hspi);
;;;343       /* NOTE : This function Should not be modified, when the callback is needed,
;;;344                 the HAL_SPI_MspInit could be implenetd in the user file
;;;345       */
;;;346    }
;;;347    
                          ENDP


                          AREA ||i.HAL_SPI_Receive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Receive PROC
;;;552      */
;;;553    HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;554    {
;;;555      __IO uint16_t tmpreg = 0;
000004  2500              MOVS     r5,#0
000006  469a              MOV      r10,r3                ;554
000008  4604              MOV      r4,r0                 ;554
00000a  f8ad5000          STRH     r5,[sp,#0]
;;;556    
;;;557      if(hspi->State == HAL_SPI_STATE_READY)
00000e  f8900051          LDRB     r0,[r0,#0x51]
000012  2801              CMP      r0,#1
000014  d17e              BNE      |L12.276|
;;;558      {
;;;559        if((pData == NULL ) || (Size == 0)) 
000016  b3e9              CBZ      r1,|L12.148|
000018  b3e2              CBZ      r2,|L12.148|
;;;560        {
;;;561          return  HAL_ERROR;
;;;562        }
;;;563    
;;;564        /* Process Locked */
;;;565        __HAL_LOCK(hspi);
00001a  f8940050          LDRB     r0,[r4,#0x50]
00001e  2801              CMP      r0,#1
000020  d078              BEQ      |L12.276|
000022  2601              MOVS     r6,#1
000024  f8846050          STRB     r6,[r4,#0x50]
;;;566    
;;;567        /* Configure communication */
;;;568        hspi->State       = HAL_SPI_STATE_BUSY_RX;
000028  2022              MOVS     r0,#0x22
00002a  f8840051          STRB     r0,[r4,#0x51]
;;;569        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
00002e  6565              STR      r5,[r4,#0x54]
;;;570    
;;;571        hspi->pRxBuffPtr  = pData;
;;;572        hspi->RxXferSize  = Size;
000030  63a1              STR      r1,[r4,#0x38]
000032  87a2              STRH     r2,[r4,#0x3c]
;;;573        hspi->RxXferCount = Size;
000034  87e2              STRH     r2,[r4,#0x3e]
;;;574    
;;;575        /*Init field not used in handle to zero */
;;;576        hspi->RxISR = 0;
;;;577        hspi->TxISR = 0;
000036  64a5              STR      r5,[r4,#0x48]
;;;578        hspi->pTxBuffPtr  = NULL;
000038  64e5              STR      r5,[r4,#0x4c]
;;;579        hspi->TxXferSize  = 0;
00003a  6325              STR      r5,[r4,#0x30]
00003c  86a5              STRH     r5,[r4,#0x34]
;;;580        hspi->TxXferCount = 0;
00003e  86e5              STRH     r5,[r4,#0x36]
;;;581    
;;;582        /* Configure communication direction : 1Line */
;;;583        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000040  68a0              LDR      r0,[r4,#8]
000042  f44f4900          MOV      r9,#0x8000
000046  4548              CMP      r0,r9
000048  d104              BNE      |L12.84|
;;;584        {
;;;585          SPI_1LINE_RX(hspi);
00004a  6820              LDR      r0,[r4,#0]
00004c  6803              LDR      r3,[r0,#0]
00004e  f4234380          BIC      r3,r3,#0x4000
000052  6003              STR      r3,[r0,#0]
                  |L12.84|
;;;586        }
;;;587    
;;;588        /* Reset CRC Calculation */
;;;589        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000054  6aa0              LDR      r0,[r4,#0x28]
000056  f44f5700          MOV      r7,#0x2000
00005a  42b8              CMP      r0,r7
00005c  d109              BNE      |L12.114|
;;;590        {
;;;591          SPI_RESET_CRC(hspi);
00005e  6820              LDR      r0,[r4,#0]
000060  6803              LDR      r3,[r0,#0]
000062  f4235300          BIC      r3,r3,#0x2000
000066  6003              STR      r3,[r0,#0]
000068  6820              LDR      r0,[r4,#0]
00006a  6803              LDR      r3,[r0,#0]
00006c  f4435300          ORR      r3,r3,#0x2000
000070  6003              STR      r3,[r0,#0]
                  |L12.114|
;;;592        }
;;;593        
;;;594        if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
000072  6860              LDR      r0,[r4,#4]
000074  f44f7882          MOV      r8,#0x104
000078  4540              CMP      r0,r8
00007a  d101              BNE      |L12.128|
00007c  68a0              LDR      r0,[r4,#8]
00007e  b178              CBZ      r0,|L12.160|
                  |L12.128|
;;;595        {
;;;596          /* Process Unlocked */
;;;597          __HAL_UNLOCK(hspi);
;;;598    
;;;599          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;600          return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
;;;601        }
;;;602    
;;;603        /* Check if the SPI is already enabled */ 
;;;604        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
000080  6820              LDR      r0,[r4,#0]
000082  6801              LDR      r1,[r0,#0]
000084  0649              LSLS     r1,r1,#25
000086  d403              BMI      |L12.144|
;;;605        {
;;;606          /* Enable SPI peripheral */
;;;607          __HAL_SPI_ENABLE(hspi);
000088  6801              LDR      r1,[r0,#0]
00008a  f0410140          ORR      r1,r1,#0x40
00008e  6001              STR      r1,[r0,#0]
                  |L12.144|
;;;608        }
;;;609    
;;;610        /* Receive data in 8 Bit mode */
;;;611        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000090  68e0              LDR      r0,[r4,#0xc]
000092  e000              B        |L12.150|
                  |L12.148|
000094  e001              B        |L12.154|
                  |L12.150|
000096  b1e8              CBZ      r0,|L12.212|
000098  e031              B        |L12.254|
                  |L12.154|
00009a  2001              MOVS     r0,#1                 ;561
                  |L12.156|
;;;612        {
;;;613          while(hspi->RxXferCount > 1)
;;;614          {
;;;615            /* Wait until RXNE flag is set */
;;;616            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;617            { 
;;;618              return HAL_TIMEOUT;
;;;619            }
;;;620    
;;;621            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;622            hspi->RxXferCount--;
;;;623          }
;;;624          /* Enable CRC Reception */
;;;625          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;626          {
;;;627            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;628          }
;;;629        }
;;;630        /* Receive data in 16 Bit mode */
;;;631        else
;;;632        {
;;;633          while(hspi->RxXferCount > 1)
;;;634          {
;;;635            /* Wait until RXNE flag is set to read data */
;;;636            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;637            { 
;;;638              return HAL_TIMEOUT;
;;;639            }
;;;640    
;;;641            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;642            hspi->pRxBuffPtr+=2;
;;;643            hspi->RxXferCount--;
;;;644          }
;;;645          /* Enable CRC Reception */
;;;646          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;647          {
;;;648            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;649          }
;;;650        }
;;;651    
;;;652        /* Wait until RXNE flag is set */
;;;653        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;654        { 
;;;655          return HAL_TIMEOUT;
;;;656        }
;;;657    
;;;658        /* Receive last data in 8 Bit mode */
;;;659        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;660        {
;;;661          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;662        }
;;;663        /* Receive last data in 16 Bit mode */
;;;664        else
;;;665        {
;;;666          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;667          hspi->pRxBuffPtr+=2;
;;;668        }
;;;669        hspi->RxXferCount--;
;;;670    
;;;671        /* If CRC computation is enabled */
;;;672        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;673        {
;;;674          /* Wait until RXNE flag is set: CRC Received */
;;;675          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;676          {
;;;677            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;678            return HAL_TIMEOUT;
;;;679          }
;;;680    
;;;681          /* Read CRC to clear RXNE flag */
;;;682          tmpreg = hspi->Instance->DR;
;;;683          UNUSED(tmpreg);
;;;684        }
;;;685        
;;;686        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;687        {
;;;688          /* Disable SPI peripheral */
;;;689          __HAL_SPI_DISABLE(hspi);
;;;690        }
;;;691    
;;;692        hspi->State = HAL_SPI_STATE_READY;
;;;693    
;;;694        /* Check if CRC error occurred */
;;;695        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
;;;696        {  
;;;697          /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;698          if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
;;;699          {
;;;700            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;701    
;;;702            /* Reset CRC Calculation */
;;;703            SPI_RESET_CRC(hspi);
;;;704    
;;;705            /* Process Unlocked */
;;;706            __HAL_UNLOCK(hspi);
;;;707    
;;;708            return HAL_ERROR; 
;;;709          }
;;;710          else
;;;711          {
;;;712            __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;713          }
;;;714        }
;;;715    
;;;716        /* Process Unlocked */
;;;717        __HAL_UNLOCK(hspi);
;;;718    
;;;719        return HAL_OK;
;;;720      }
;;;721      else
;;;722      {
;;;723        return HAL_BUSY;
;;;724      }
;;;725    }
00009c  e8bd8ff8          POP      {r3-r11,pc}
                  |L12.160|
0000a0  f8845050          STRB     r5,[r4,#0x50]         ;597
0000a4  4613              MOV      r3,r2                 ;600
0000a6  460a              MOV      r2,r1                 ;600
0000a8  4620              MOV      r0,r4                 ;600
0000aa  f8cda000          STR      r10,[sp,#0]           ;600
0000ae  f7fffffe          BL       HAL_SPI_TransmitReceive
0000b2  e7f3              B        |L12.156|
                  |L12.180|
0000b4  4653              MOV      r3,r10                ;616
0000b6  2200              MOVS     r2,#0                 ;616
0000b8  2101              MOVS     r1,#1                 ;616
0000ba  4620              MOV      r0,r4                 ;616
0000bc  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000c0  bb48              CBNZ     r0,|L12.278|
0000c2  6820              LDR      r0,[r4,#0]            ;621
0000c4  68c1              LDR      r1,[r0,#0xc]          ;621
0000c6  6ba0              LDR      r0,[r4,#0x38]         ;621
0000c8  1c42              ADDS     r2,r0,#1              ;621
0000ca  63a2              STR      r2,[r4,#0x38]         ;621
0000cc  7001              STRB     r1,[r0,#0]            ;621
0000ce  8fe0              LDRH     r0,[r4,#0x3e]         ;622
0000d0  1e40              SUBS     r0,r0,#1              ;622
0000d2  87e0              STRH     r0,[r4,#0x3e]         ;622
                  |L12.212|
0000d4  8fe0              LDRH     r0,[r4,#0x3e]         ;613
0000d6  2801              CMP      r0,#1                 ;613
0000d8  d8ec              BHI      |L12.180|
0000da  e013              B        |L12.260|
                  |L12.220|
0000dc  4653              MOV      r3,r10                ;636
0000de  2200              MOVS     r2,#0                 ;636
0000e0  2101              MOVS     r1,#1                 ;636
0000e2  4620              MOV      r0,r4                 ;636
0000e4  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000e8  b9a8              CBNZ     r0,|L12.278|
0000ea  6820              LDR      r0,[r4,#0]            ;641
0000ec  68c0              LDR      r0,[r0,#0xc]          ;641
0000ee  6ba1              LDR      r1,[r4,#0x38]         ;641
0000f0  8008              STRH     r0,[r1,#0]            ;641
0000f2  6ba0              LDR      r0,[r4,#0x38]         ;642
0000f4  1c80              ADDS     r0,r0,#2              ;642
0000f6  63a0              STR      r0,[r4,#0x38]         ;643
0000f8  8fe0              LDRH     r0,[r4,#0x3e]         ;643
0000fa  1e40              SUBS     r0,r0,#1              ;643
0000fc  87e0              STRH     r0,[r4,#0x3e]         ;643
                  |L12.254|
0000fe  8fe0              LDRH     r0,[r4,#0x3e]         ;633
000100  2801              CMP      r0,#1                 ;633
000102  d8eb              BHI      |L12.220|
                  |L12.260|
000104  6aa0              LDR      r0,[r4,#0x28]         ;646
000106  42b8              CMP      r0,r7                 ;646
000108  d107              BNE      |L12.282|
00010a  6820              LDR      r0,[r4,#0]            ;648
00010c  6801              LDR      r1,[r0,#0]            ;648
00010e  f4415180          ORR      r1,r1,#0x1000         ;648
000112  e001              B        |L12.280|
                  |L12.276|
000114  e068              B        |L12.488|
                  |L12.278|
000116  e007              B        |L12.296|
                  |L12.280|
000118  6001              STR      r1,[r0,#0]            ;648
                  |L12.282|
00011a  4653              MOV      r3,r10                ;653
00011c  2200              MOVS     r2,#0                 ;653
00011e  2101              MOVS     r1,#1                 ;653
000120  4620              MOV      r0,r4                 ;653
000122  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000126  b108              CBZ      r0,|L12.300|
                  |L12.296|
000128  2003              MOVS     r0,#3                 ;655
00012a  e7b7              B        |L12.156|
                  |L12.300|
00012c  68e0              LDR      r0,[r4,#0xc]          ;659
00012e  2800              CMP      r0,#0                 ;659
000130  6820              LDR      r0,[r4,#0]            ;659
000132  d017              BEQ      |L12.356|
000134  68c0              LDR      r0,[r0,#0xc]          ;666
000136  6ba1              LDR      r1,[r4,#0x38]         ;666
000138  8008              STRH     r0,[r1,#0]            ;666
00013a  6ba0              LDR      r0,[r4,#0x38]         ;667
00013c  1c80              ADDS     r0,r0,#2              ;667
00013e  63a0              STR      r0,[r4,#0x38]         ;667
                  |L12.320|
000140  8fe0              LDRH     r0,[r4,#0x3e]         ;669
000142  1e40              SUBS     r0,r0,#1              ;669
000144  87e0              STRH     r0,[r4,#0x3e]         ;669
000146  6aa0              LDR      r0,[r4,#0x28]         ;672
000148  42b8              CMP      r0,r7                 ;672
00014a  d117              BNE      |L12.380|
00014c  4653              MOV      r3,r10                ;675
00014e  2200              MOVS     r2,#0                 ;675
000150  2101              MOVS     r1,#1                 ;675
000152  4620              MOV      r0,r4                 ;675
000154  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000158  b150              CBZ      r0,|L12.368|
00015a  6d60              LDR      r0,[r4,#0x54]         ;677
00015c  f0400002          ORR      r0,r0,#2              ;677
000160  6560              STR      r0,[r4,#0x54]         ;677
000162  e7e1              B        |L12.296|
                  |L12.356|
000164  68c1              LDR      r1,[r0,#0xc]          ;661
000166  6ba0              LDR      r0,[r4,#0x38]         ;661
000168  1c42              ADDS     r2,r0,#1              ;661
00016a  63a2              STR      r2,[r4,#0x38]         ;661
00016c  7001              STRB     r1,[r0,#0]            ;661
00016e  e7e7              B        |L12.320|
                  |L12.368|
000170  6820              LDR      r0,[r4,#0]            ;682
000172  68c0              LDR      r0,[r0,#0xc]          ;682
000174  f8ad0000          STRH     r0,[sp,#0]            ;682
000178  f8bd0000          LDRH     r0,[sp,#0]            ;683
                  |L12.380|
00017c  6860              LDR      r0,[r4,#4]            ;686
00017e  4540              CMP      r0,r8                 ;686
000180  d10a              BNE      |L12.408|
000182  68a0              LDR      r0,[r4,#8]            ;686
000184  4548              CMP      r0,r9                 ;686
000186  d002              BEQ      |L12.398|
000188  f5b06f80          CMP      r0,#0x400             ;686
00018c  d104              BNE      |L12.408|
                  |L12.398|
00018e  6820              LDR      r0,[r4,#0]            ;689
000190  6801              LDR      r1,[r0,#0]            ;689
000192  f0210140          BIC      r1,r1,#0x40           ;689
000196  6001              STR      r1,[r0,#0]            ;689
                  |L12.408|
000198  f8846051          STRB     r6,[r4,#0x51]         ;692
00019c  6aa0              LDR      r0,[r4,#0x28]         ;695
00019e  42b8              CMP      r0,r7                 ;695
0001a0  d10d              BNE      |L12.446|
0001a2  6820              LDR      r0,[r4,#0]            ;695
0001a4  6880              LDR      r0,[r0,#8]            ;695
0001a6  43c0              MVNS     r0,r0                 ;695
0001a8  06c0              LSLS     r0,r0,#27             ;695
0001aa  d408              BMI      |L12.446|
0001ac  4620              MOV      r0,r4                 ;698
0001ae  f7fffffe          BL       SPI_ISCRCErrorValid
0001b2  2801              CMP      r0,#1                 ;698
0001b4  d007              BEQ      |L12.454|
0001b6  6821              LDR      r1,[r4,#0]            ;712
0001b8  f06f0010          MVN      r0,#0x10              ;712
0001bc  6088              STR      r0,[r1,#8]            ;712
                  |L12.446|
0001be  f8845050          STRB     r5,[r4,#0x50]         ;717
0001c2  2000              MOVS     r0,#0                 ;719
0001c4  e76a              B        |L12.156|
                  |L12.454|
0001c6  6d60              LDR      r0,[r4,#0x54]         ;700
0001c8  f0400002          ORR      r0,r0,#2              ;700
0001cc  6560              STR      r0,[r4,#0x54]         ;700
0001ce  6820              LDR      r0,[r4,#0]            ;703
0001d0  6801              LDR      r1,[r0,#0]            ;703
0001d2  f4215100          BIC      r1,r1,#0x2000         ;703
0001d6  6001              STR      r1,[r0,#0]            ;703
0001d8  6820              LDR      r0,[r4,#0]            ;703
0001da  6801              LDR      r1,[r0,#0]            ;703
0001dc  f4415100          ORR      r1,r1,#0x2000         ;703
0001e0  6001              STR      r1,[r0,#0]            ;703
0001e2  f8845050          STRB     r5,[r4,#0x50]         ;706
0001e6  e758              B        |L12.154|
                  |L12.488|
0001e8  2002              MOVS     r0,#2                 ;723
0001ea  e757              B        |L12.156|
;;;726    
                          ENDP


                          AREA ||i.HAL_SPI_Receive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_DMA PROC
;;;1294     */
;;;1295   HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1296   {
000002  4604              MOV      r4,r0
;;;1297     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d160              BNE      |L13.206|
;;;1298     {
;;;1299       if((pData == NULL) || (Size == 0))
00000c  b1d1              CBZ      r1,|L13.68|
00000e  b1ca              CBZ      r2,|L13.68|
;;;1300       {
;;;1301         return  HAL_ERROR;
;;;1302       }
;;;1303   
;;;1304       /* Process Locked */
;;;1305       __HAL_LOCK(hspi);
000010  f8940050          LDRB     r0,[r4,#0x50]
000014  2801              CMP      r0,#1
000016  d05a              BEQ      |L13.206|
000018  2001              MOVS     r0,#1
00001a  f8840050          STRB     r0,[r4,#0x50]
;;;1306   
;;;1307       /* Configure communication */
;;;1308       hspi->State       = HAL_SPI_STATE_BUSY_RX;
00001e  2022              MOVS     r0,#0x22
000020  f8840051          STRB     r0,[r4,#0x51]
;;;1309       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000024  2500              MOVS     r5,#0
000026  6565              STR      r5,[r4,#0x54]
;;;1310   
;;;1311       hspi->pRxBuffPtr  = pData;
;;;1312       hspi->RxXferSize  = Size;
000028  63a1              STR      r1,[r4,#0x38]
00002a  87a2              STRH     r2,[r4,#0x3c]
;;;1313       hspi->RxXferCount = Size;
00002c  87e2              STRH     r2,[r4,#0x3e]
;;;1314   
;;;1315       /*Init field not used in handle to zero */
;;;1316       hspi->RxISR       = 0;
;;;1317       hspi->TxISR       = 0;
00002e  64a5              STR      r5,[r4,#0x48]
;;;1318       hspi->pTxBuffPtr  = NULL;
000030  64e5              STR      r5,[r4,#0x4c]
;;;1319       hspi->TxXferSize  = 0;
000032  6325              STR      r5,[r4,#0x30]
000034  86a5              STRH     r5,[r4,#0x34]
;;;1320       hspi->TxXferCount = 0;
000036  86e5              STRH     r5,[r4,#0x36]
;;;1321   
;;;1322       /* Configure communication direction : 1Line */
;;;1323       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  68a0              LDR      r0,[r4,#8]
00003a  f5b04f00          CMP      r0,#0x8000
00003e  d003              BEQ      |L13.72|
;;;1324       {
;;;1325         SPI_1LINE_RX(hspi);
;;;1326       }
;;;1327       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
000040  b140              CBZ      r0,|L13.84|
000042  e00b              B        |L13.92|
                  |L13.68|
000044  2001              MOVS     r0,#1                 ;1301
;;;1328       {
;;;1329         /* Process Unlocked */
;;;1330         __HAL_UNLOCK(hspi);
;;;1331   
;;;1332         /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1333         return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
;;;1334       }
;;;1335   
;;;1336       /* Reset CRC Calculation */
;;;1337       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1338       {
;;;1339         SPI_RESET_CRC(hspi);
;;;1340       }
;;;1341   
;;;1342       /* Set the SPI RxDMA Half transfer complete callback */
;;;1343       hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1344   
;;;1345       /* Set the SPI Rx DMA transfer complete callback */
;;;1346       hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1347   
;;;1348       /* Set the DMA error callback */
;;;1349       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1350   
;;;1351       /* Enable the Rx DMA Channel */
;;;1352       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1353   
;;;1354       /* Enable Rx DMA Request */  
;;;1355       SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1356   
;;;1357       /* Process Unlocked */
;;;1358       __HAL_UNLOCK(hspi);
;;;1359   
;;;1360       /* Check if the SPI is already enabled */ 
;;;1361       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1362       {
;;;1363         /* Enable SPI peripheral */
;;;1364         __HAL_SPI_ENABLE(hspi);
;;;1365       }
;;;1366   
;;;1367       return HAL_OK;
;;;1368     }
;;;1369     else
;;;1370     {
;;;1371       return HAL_BUSY;
;;;1372     }
;;;1373   }
000046  bd70              POP      {r4-r6,pc}
                  |L13.72|
000048  6820              LDR      r0,[r4,#0]            ;1325
00004a  6801              LDR      r1,[r0,#0]            ;1325
00004c  f4214180          BIC      r1,r1,#0x4000         ;1325
000050  6001              STR      r1,[r0,#0]            ;1325
000052  e003              B        |L13.92|
                  |L13.84|
000054  6860              LDR      r0,[r4,#4]            ;1327
000056  f5b07f82          CMP      r0,#0x104             ;1327
00005a  d004              BEQ      |L13.102|
                  |L13.92|
00005c  6aa0              LDR      r0,[r4,#0x28]         ;1337
00005e  f5b05f00          CMP      r0,#0x2000            ;1337
000062  d009              BEQ      |L13.120|
000064  e012              B        |L13.140|
                  |L13.102|
000066  f8845050          STRB     r5,[r4,#0x50]         ;1330
00006a  4620              MOV      r0,r4                 ;1333
00006c  e8bd4070          POP      {r4-r6,lr}            ;1333
000070  4613              MOV      r3,r2                 ;1333
000072  460a              MOV      r2,r1                 ;1333
000074  f7ffbffe          B.W      HAL_SPI_TransmitReceive_DMA
                  |L13.120|
000078  6820              LDR      r0,[r4,#0]            ;1339
00007a  6801              LDR      r1,[r0,#0]            ;1339
00007c  f4215100          BIC      r1,r1,#0x2000         ;1339
000080  6001              STR      r1,[r0,#0]            ;1339
000082  6820              LDR      r0,[r4,#0]            ;1339
000084  6801              LDR      r1,[r0,#0]            ;1339
000086  f4415100          ORR      r1,r1,#0x2000         ;1339
00008a  6001              STR      r1,[r0,#0]            ;1339
                  |L13.140|
00008c  6c61              LDR      r1,[r4,#0x44]         ;1343
00008e  4811              LDR      r0,|L13.212|
000090  62c8              STR      r0,[r1,#0x2c]         ;1346
000092  6c61              LDR      r1,[r4,#0x44]         ;1346
000094  4810              LDR      r0,|L13.216|
000096  6288              STR      r0,[r1,#0x28]         ;1349
000098  6c61              LDR      r1,[r4,#0x44]         ;1349
00009a  4810              LDR      r0,|L13.220|
00009c  6308              STR      r0,[r1,#0x30]         ;1352
00009e  6821              LDR      r1,[r4,#0]            ;1352
0000a0  8fe3              LDRH     r3,[r4,#0x3e]         ;1352
0000a2  310c              ADDS     r1,r1,#0xc            ;1352
0000a4  6ba2              LDR      r2,[r4,#0x38]         ;1352
0000a6  6c60              LDR      r0,[r4,#0x44]         ;1352
0000a8  f7fffffe          BL       HAL_DMA_Start_IT
0000ac  6820              LDR      r0,[r4,#0]            ;1355
0000ae  6841              LDR      r1,[r0,#4]            ;1355
0000b0  f0410101          ORR      r1,r1,#1              ;1355
0000b4  6041              STR      r1,[r0,#4]            ;1355
0000b6  f8845050          STRB     r5,[r4,#0x50]         ;1358
0000ba  6820              LDR      r0,[r4,#0]            ;1361
0000bc  6801              LDR      r1,[r0,#0]            ;1361
0000be  0649              LSLS     r1,r1,#25             ;1361
0000c0  d403              BMI      |L13.202|
0000c2  6801              LDR      r1,[r0,#0]            ;1364
0000c4  f0410140          ORR      r1,r1,#0x40           ;1364
0000c8  6001              STR      r1,[r0,#0]            ;1364
                  |L13.202|
0000ca  2000              MOVS     r0,#0                 ;1367
0000cc  bd70              POP      {r4-r6,pc}
                  |L13.206|
0000ce  2002              MOVS     r0,#2                 ;1371
0000d0  bd70              POP      {r4-r6,pc}
;;;1374   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L13.212|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L13.216|
                          DCD      SPI_DMAReceiveCplt
                  |L13.220|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Receive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_IT PROC
;;;1058     */
;;;1059   HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b410              PUSH     {r4}
;;;1060   {
000002  4613              MOV      r3,r2
;;;1061     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8902051          LDRB     r2,[r0,#0x51]
000008  2a01              CMP      r2,#1
00000a  d14f              BNE      |L14.172|
;;;1062     {
;;;1063       if((pData == NULL) || (Size == 0)) 
00000c  b1d9              CBZ      r1,|L14.70|
00000e  b1d3              CBZ      r3,|L14.70|
;;;1064       {
;;;1065         return  HAL_ERROR;
;;;1066       }
;;;1067   
;;;1068       /* Process Locked */
;;;1069       __HAL_LOCK(hspi);
000010  f8902050          LDRB     r2,[r0,#0x50]
000014  2a01              CMP      r2,#1
000016  d049              BEQ      |L14.172|
000018  2201              MOVS     r2,#1
00001a  f8802050          STRB     r2,[r0,#0x50]
;;;1070   
;;;1071       /* Configure communication */
;;;1072       hspi->State        = HAL_SPI_STATE_BUSY_RX;
00001e  2222              MOVS     r2,#0x22
000020  f8802051          STRB     r2,[r0,#0x51]
;;;1073       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000024  2200              MOVS     r2,#0
000026  6542              STR      r2,[r0,#0x54]
;;;1074   
;;;1075       hspi->RxISR        = &SPI_RxISR;
000028  4c21              LDR      r4,|L14.176|
;;;1076       hspi->pRxBuffPtr   = pData;
;;;1077       hspi->RxXferSize   = Size;
00002a  6484              STR      r4,[r0,#0x48]
00002c  6381              STR      r1,[r0,#0x38]
00002e  8783              STRH     r3,[r0,#0x3c]
;;;1078       hspi->RxXferCount  = Size ; 
000030  87c3              STRH     r3,[r0,#0x3e]
;;;1079   
;;;1080      /*Init field not used in handle to zero */
;;;1081       hspi->TxISR        = 0;
;;;1082       hspi->pTxBuffPtr   = NULL;
000032  64c2              STR      r2,[r0,#0x4c]
;;;1083       hspi->TxXferSize   = 0;
000034  6302              STR      r2,[r0,#0x30]
000036  8682              STRH     r2,[r0,#0x34]
;;;1084       hspi->TxXferCount  = 0;
000038  86c2              STRH     r2,[r0,#0x36]
;;;1085   
;;;1086       /* Configure communication direction : 1Line */
;;;1087       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
00003a  6884              LDR      r4,[r0,#8]
00003c  f5b44f00          CMP      r4,#0x8000
000040  d004              BEQ      |L14.76|
;;;1088       {
;;;1089         SPI_1LINE_RX(hspi);
;;;1090       }
;;;1091       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
000042  b14c              CBZ      r4,|L14.88|
000044  e00c              B        |L14.96|
                  |L14.70|
000046  2001              MOVS     r0,#1                 ;1065
                  |L14.72|
;;;1092       {
;;;1093         /* Process Unlocked */
;;;1094         __HAL_UNLOCK(hspi);
;;;1095   
;;;1096         /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1097         return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
;;;1098       }
;;;1099   
;;;1100       /* Reset CRC Calculation */
;;;1101       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1102       {
;;;1103         SPI_RESET_CRC(hspi);
;;;1104       }
;;;1105   
;;;1106       /* Enable TXE and ERR interrupt */
;;;1107       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;1108   
;;;1109       /* Process Unlocked */
;;;1110       __HAL_UNLOCK(hspi);
;;;1111   
;;;1112       /* Note : The SPI must be enabled after unlocking current process 
;;;1113                 to avoid the risk of SPI interrupt handle execution before current
;;;1114                 process unlock */
;;;1115   
;;;1116       /* Check if the SPI is already enabled */ 
;;;1117       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1118       {
;;;1119         /* Enable SPI peripheral */
;;;1120         __HAL_SPI_ENABLE(hspi);
;;;1121       }
;;;1122   
;;;1123       return HAL_OK;
;;;1124     }
;;;1125     else
;;;1126     {
;;;1127       return HAL_BUSY; 
;;;1128     }
;;;1129   }
000048  bc10              POP      {r4}
00004a  4770              BX       lr
                  |L14.76|
00004c  6801              LDR      r1,[r0,#0]            ;1089
00004e  680b              LDR      r3,[r1,#0]            ;1089
000050  f4234380          BIC      r3,r3,#0x4000         ;1089
000054  600b              STR      r3,[r1,#0]            ;1089
000056  e003              B        |L14.96|
                  |L14.88|
000058  6844              LDR      r4,[r0,#4]            ;1091
00005a  f5b47f82          CMP      r4,#0x104             ;1091
00005e  d004              BEQ      |L14.106|
                  |L14.96|
000060  6a81              LDR      r1,[r0,#0x28]         ;1101
000062  f5b15f00          CMP      r1,#0x2000            ;1101
000066  d006              BEQ      |L14.118|
000068  e00f              B        |L14.138|
                  |L14.106|
00006a  f8802050          STRB     r2,[r0,#0x50]         ;1094
00006e  bc10              POP      {r4}                  ;1097
000070  460a              MOV      r2,r1                 ;1097
000072  f7ffbffe          B.W      HAL_SPI_TransmitReceive_IT
                  |L14.118|
000076  6801              LDR      r1,[r0,#0]            ;1103
000078  680b              LDR      r3,[r1,#0]            ;1103
00007a  f4235300          BIC      r3,r3,#0x2000         ;1103
00007e  600b              STR      r3,[r1,#0]            ;1103
000080  6801              LDR      r1,[r0,#0]            ;1103
000082  680b              LDR      r3,[r1,#0]            ;1103
000084  f4435300          ORR      r3,r3,#0x2000         ;1103
000088  600b              STR      r3,[r1,#0]            ;1103
                  |L14.138|
00008a  6801              LDR      r1,[r0,#0]            ;1107
00008c  684b              LDR      r3,[r1,#4]            ;1107
00008e  f0430360          ORR      r3,r3,#0x60           ;1107
000092  604b              STR      r3,[r1,#4]            ;1107
000094  f8802050          STRB     r2,[r0,#0x50]         ;1110
000098  6800              LDR      r0,[r0,#0]            ;1117
00009a  6801              LDR      r1,[r0,#0]            ;1117
00009c  0649              LSLS     r1,r1,#25             ;1117
00009e  d403              BMI      |L14.168|
0000a0  6801              LDR      r1,[r0,#0]            ;1120
0000a2  f0410140          ORR      r1,r1,#0x40           ;1120
0000a6  6001              STR      r1,[r0,#0]            ;1120
                  |L14.168|
0000a8  2000              MOVS     r0,#0                 ;1123
0000aa  e7cd              B        |L14.72|
                  |L14.172|
0000ac  2002              MOVS     r0,#2                 ;1127
0000ae  e7cb              B        |L14.72|
;;;1130   
                          ENDP

                  |L14.176|
                          DCD      SPI_RxISR

                          AREA ||i.HAL_SPI_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxCpltCallback PROC
;;;1643     */
;;;1644   __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1645   {
;;;1646     /* Prevent unused argument(s) compilation warning */
;;;1647     UNUSED(hspi);
;;;1648     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1649               the HAL_SPI_RxCpltCallback() could be implenetd in the user file
;;;1650      */
;;;1651   }
;;;1652   
                          ENDP


                          AREA ||i.HAL_SPI_RxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxHalfCpltCallback PROC
;;;1688     */
;;;1689   __weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1690   {
;;;1691     /* Prevent unused argument(s) compilation warning */
;;;1692     UNUSED(hspi);
;;;1693     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1694               the HAL_SPI_RxHalfCpltCallback() could be implenetd in the user file
;;;1695      */
;;;1696   }
;;;1697   
                          ENDP


                          AREA ||i.HAL_SPI_Transmit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Transmit PROC
;;;407      */
;;;408    HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;409    {
000004  4604              MOV      r4,r0
;;;410    
;;;411      if(hspi->State == HAL_SPI_STATE_READY)
000006  f8900051          LDRB     r0,[r0,#0x51]
00000a  4698              MOV      r8,r3                 ;409
00000c  2801              CMP      r0,#1
00000e  d170              BNE      |L17.242|
;;;412      {
;;;413        if((pData == NULL ) || (Size == 0)) 
000010  b339              CBZ      r1,|L17.98|
000012  b332              CBZ      r2,|L17.98|
;;;414        {
;;;415          return  HAL_ERROR;
;;;416        }
;;;417    
;;;418        /* Check the parameters */
;;;419        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;420    
;;;421        /* Process Locked */
;;;422        __HAL_LOCK(hspi);
000014  f8940050          LDRB     r0,[r4,#0x50]
000018  2801              CMP      r0,#1
00001a  d06a              BEQ      |L17.242|
00001c  2601              MOVS     r6,#1
00001e  f8846050          STRB     r6,[r4,#0x50]
;;;423    
;;;424        /* Configure communication */
;;;425        hspi->State = HAL_SPI_STATE_BUSY_TX;
000022  2012              MOVS     r0,#0x12
000024  f8840051          STRB     r0,[r4,#0x51]
;;;426        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000028  2500              MOVS     r5,#0
00002a  6565              STR      r5,[r4,#0x54]
;;;427    
;;;428        hspi->pTxBuffPtr  = pData;
;;;429        hspi->TxXferSize  = Size;
00002c  6321              STR      r1,[r4,#0x30]
00002e  86a2              STRH     r2,[r4,#0x34]
;;;430        hspi->TxXferCount = Size;
000030  86e2              STRH     r2,[r4,#0x36]
;;;431    
;;;432        /*Init field not used in handle to zero */
;;;433        hspi->TxISR = 0;
;;;434        hspi->RxISR = 0;
000032  64e5              STR      r5,[r4,#0x4c]
;;;435        hspi->pRxBuffPtr  = NULL;
000034  64a5              STR      r5,[r4,#0x48]
;;;436        hspi->RxXferSize  = 0;
000036  63a5              STR      r5,[r4,#0x38]
000038  87a5              STRH     r5,[r4,#0x3c]
;;;437        hspi->RxXferCount = 0;
00003a  87e5              STRH     r5,[r4,#0x3e]
;;;438    
;;;439        /* Reset CRC Calculation */
;;;440        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  0377              LSLS     r7,r6,#13
000040  42b8              CMP      r0,r7
000042  d109              BNE      |L17.88|
;;;441        {
;;;442          SPI_RESET_CRC(hspi);
000044  6820              LDR      r0,[r4,#0]
000046  6801              LDR      r1,[r0,#0]
000048  f4215100          BIC      r1,r1,#0x2000
00004c  6001              STR      r1,[r0,#0]
00004e  6820              LDR      r0,[r4,#0]
000050  6801              LDR      r1,[r0,#0]
000052  f4415100          ORR      r1,r1,#0x2000
000056  6001              STR      r1,[r0,#0]
                  |L17.88|
;;;443        }
;;;444    
;;;445        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000058  68a0              LDR      r0,[r4,#8]
00005a  f5b04f00          CMP      r0,#0x8000
00005e  d003              BEQ      |L17.104|
000060  e007              B        |L17.114|
                  |L17.98|
000062  2001              MOVS     r0,#1                 ;415
                  |L17.100|
;;;446        {
;;;447          /* Configure communication direction : 1Line */
;;;448          SPI_1LINE_TX(hspi);
;;;449        }
;;;450    
;;;451        /* Check if the SPI is already enabled */ 
;;;452        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;453        {
;;;454          /* Enable SPI peripheral */
;;;455          __HAL_SPI_ENABLE(hspi);
;;;456        }
;;;457    
;;;458        /* Transmit data in 8 Bit mode */
;;;459        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;460        {
;;;461          if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
;;;462          {
;;;463            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;464            hspi->TxXferCount--;
;;;465          }
;;;466    
;;;467          while(hspi->TxXferCount > 0)
;;;468          {
;;;469            /* Wait until TXE flag is set to send data */
;;;470            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;471            { 
;;;472              return HAL_TIMEOUT;
;;;473            }
;;;474            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;475            hspi->TxXferCount--;
;;;476          }
;;;477          /* Enable CRC Transmission */
;;;478          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;479          {
;;;480            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;481          }
;;;482        }
;;;483        /* Transmit data in 16 Bit mode */
;;;484        else
;;;485        {
;;;486          if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
;;;487          {
;;;488            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;489            hspi->pTxBuffPtr+=2;
;;;490            hspi->TxXferCount--;
;;;491          }
;;;492    
;;;493          while(hspi->TxXferCount > 0)
;;;494          {
;;;495            /* Wait until TXE flag is set to send data */
;;;496            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;497            { 
;;;498              return HAL_TIMEOUT;
;;;499            }
;;;500            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;501            hspi->pTxBuffPtr+=2;
;;;502            hspi->TxXferCount--;
;;;503          }
;;;504          /* Enable CRC Transmission */
;;;505          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;506          {
;;;507            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;508          }
;;;509        }
;;;510    
;;;511        /* Wait until TXE flag is set to send data */
;;;512        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;513        {
;;;514          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;515          return HAL_TIMEOUT;
;;;516        }
;;;517    
;;;518        /* Wait until Busy flag is reset before disabling SPI */
;;;519        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;520        { 
;;;521          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;522          return HAL_TIMEOUT;
;;;523        }
;;;524     
;;;525        /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;526        if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;527        {
;;;528          __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;529        }
;;;530    
;;;531        hspi->State = HAL_SPI_STATE_READY; 
;;;532    
;;;533        /* Process Unlocked */
;;;534        __HAL_UNLOCK(hspi);
;;;535    
;;;536        return HAL_OK;
;;;537      }
;;;538      else
;;;539      {
;;;540        return HAL_BUSY;
;;;541      }
;;;542    }
000064  e8bd83f8          POP      {r3-r9,pc}
                  |L17.104|
000068  6820              LDR      r0,[r4,#0]            ;448
00006a  6801              LDR      r1,[r0,#0]            ;448
00006c  f4414180          ORR      r1,r1,#0x4000         ;448
000070  6001              STR      r1,[r0,#0]            ;448
                  |L17.114|
000072  6820              LDR      r0,[r4,#0]            ;452
000074  6801              LDR      r1,[r0,#0]            ;452
000076  0649              LSLS     r1,r1,#25             ;452
000078  d403              BMI      |L17.130|
00007a  6801              LDR      r1,[r0,#0]            ;455
00007c  f0410140          ORR      r1,r1,#0x40           ;455
000080  6001              STR      r1,[r0,#0]            ;455
                  |L17.130|
000082  68e0              LDR      r0,[r4,#0xc]          ;459
000084  2800              CMP      r0,#0                 ;459
000086  6860              LDR      r0,[r4,#4]            ;459
000088  d004              BEQ      |L17.148|
00008a  b1d8              CBZ      r0,|L17.196|
00008c  8ee0              LDRH     r0,[r4,#0x36]         ;486
00008e  2801              CMP      r0,#1                 ;486
000090  d018              BEQ      |L17.196|
000092  e021              B        |L17.216|
                  |L17.148|
000094  b110              CBZ      r0,|L17.156|
000096  8ee0              LDRH     r0,[r4,#0x36]         ;461
000098  2801              CMP      r0,#1                 ;461
00009a  d108              BNE      |L17.174|
                  |L17.156|
00009c  6b20              LDR      r0,[r4,#0x30]         ;463
00009e  1c41              ADDS     r1,r0,#1              ;463
0000a0  6321              STR      r1,[r4,#0x30]         ;463
0000a2  6821              LDR      r1,[r4,#0]            ;463
0000a4  7800              LDRB     r0,[r0,#0]            ;463
0000a6  60c8              STR      r0,[r1,#0xc]          ;463
0000a8  8ee0              LDRH     r0,[r4,#0x36]         ;464
0000aa  1e40              SUBS     r0,r0,#1              ;464
0000ac  86e0              STRH     r0,[r4,#0x36]         ;464
                  |L17.174|
0000ae  0400              LSLS     r0,r0,#16             ;467
0000b0  0c00              LSRS     r0,r0,#16             ;467
0000b2  d01f              BEQ      |L17.244|
0000b4  4643              MOV      r3,r8                 ;470
0000b6  2200              MOVS     r2,#0                 ;470
0000b8  2102              MOVS     r1,#2                 ;470
0000ba  4620              MOV      r0,r4                 ;470
0000bc  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000c0  b9a8              CBNZ     r0,|L17.238|
0000c2  e7eb              B        |L17.156|
                  |L17.196|
0000c4  6b20              LDR      r0,[r4,#0x30]         ;488
0000c6  6821              LDR      r1,[r4,#0]            ;488
0000c8  8800              LDRH     r0,[r0,#0]            ;488
0000ca  60c8              STR      r0,[r1,#0xc]          ;488
0000cc  6b20              LDR      r0,[r4,#0x30]         ;489
0000ce  1c80              ADDS     r0,r0,#2              ;489
0000d0  6320              STR      r0,[r4,#0x30]         ;490
0000d2  8ee0              LDRH     r0,[r4,#0x36]         ;490
0000d4  1e40              SUBS     r0,r0,#1              ;490
0000d6  86e0              STRH     r0,[r4,#0x36]         ;490
                  |L17.216|
0000d8  0400              LSLS     r0,r0,#16             ;493
0000da  0c00              LSRS     r0,r0,#16             ;493
0000dc  d00a              BEQ      |L17.244|
0000de  4643              MOV      r3,r8                 ;496
0000e0  2200              MOVS     r2,#0                 ;496
0000e2  2102              MOVS     r1,#2                 ;496
0000e4  4620              MOV      r0,r4                 ;496
0000e6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000ea  2800              CMP      r0,#0                 ;496
0000ec  d0ea              BEQ      |L17.196|
                  |L17.238|
0000ee  2003              MOVS     r0,#3                 ;498
0000f0  e7b8              B        |L17.100|
                  |L17.242|
0000f2  e026              B        |L17.322|
                  |L17.244|
0000f4  6aa0              LDR      r0,[r4,#0x28]         ;505
0000f6  42b8              CMP      r0,r7                 ;505
0000f8  d104              BNE      |L17.260|
0000fa  6820              LDR      r0,[r4,#0]            ;507
0000fc  6801              LDR      r1,[r0,#0]            ;507
0000fe  f4415180          ORR      r1,r1,#0x1000         ;507
000102  6001              STR      r1,[r0,#0]            ;507
                  |L17.260|
000104  4643              MOV      r3,r8                 ;512
000106  2200              MOVS     r2,#0                 ;512
000108  2102              MOVS     r1,#2                 ;512
00010a  4620              MOV      r0,r4                 ;512
00010c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000110  b930              CBNZ     r0,|L17.288|
000112  4643              MOV      r3,r8                 ;519
000114  2201              MOVS     r2,#1                 ;519
000116  2180              MOVS     r1,#0x80              ;519
000118  4620              MOV      r0,r4                 ;519
00011a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00011e  b120              CBZ      r0,|L17.298|
                  |L17.288|
000120  6d60              LDR      r0,[r4,#0x54]         ;521
000122  f0400010          ORR      r0,r0,#0x10           ;521
000126  6560              STR      r0,[r4,#0x54]         ;521
000128  e7e1              B        |L17.238|
                  |L17.298|
00012a  68a0              LDR      r0,[r4,#8]            ;526
00012c  b918              CBNZ     r0,|L17.310|
00012e  6820              LDR      r0,[r4,#0]            ;528
000130  68c1              LDR      r1,[r0,#0xc]          ;528
000132  6880              LDR      r0,[r0,#8]            ;528
000134  9000              STR      r0,[sp,#0]            ;528
                  |L17.310|
000136  f8846051          STRB     r6,[r4,#0x51]         ;531
00013a  f8845050          STRB     r5,[r4,#0x50]         ;534
00013e  2000              MOVS     r0,#0                 ;536
000140  e790              B        |L17.100|
                  |L17.322|
000142  2002              MOVS     r0,#2                 ;540
000144  e78e              B        |L17.100|
;;;543    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TransmitReceive PROC
;;;736      */
;;;737    HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;738    {
;;;739      __IO uint16_t tmpreg = 0;
000004  2500              MOVS     r5,#0
000006  f8dd8020          LDR      r8,[sp,#0x20]
00000a  4604              MOV      r4,r0                 ;738
00000c  f8ad5000          STRH     r5,[sp,#0]
;;;740    
;;;741      if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
000010  f8900051          LDRB     r0,[r0,#0x51]
000014  2801              CMP      r0,#1
000016  d003              BEQ      |L18.32|
000018  f8940051          LDRB     r0,[r4,#0x51]
00001c  2822              CMP      r0,#0x22
00001e  d17d              BNE      |L18.284|
                  |L18.32|
;;;742      {
;;;743        if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
000020  b169              CBZ      r1,|L18.62|
000022  b162              CBZ      r2,|L18.62|
000024  b15b              CBZ      r3,|L18.62|
;;;744        {
;;;745          return  HAL_ERROR;
;;;746        }
;;;747    
;;;748        /* Check the parameters */
;;;749        assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;750    
;;;751        /* Process Locked */
;;;752        __HAL_LOCK(hspi);
000026  f8940050          LDRB     r0,[r4,#0x50]
00002a  2801              CMP      r0,#1
00002c  d076              BEQ      |L18.284|
00002e  2601              MOVS     r6,#1
000030  f8846050          STRB     r6,[r4,#0x50]
;;;753     
;;;754        /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;755        if(hspi->State == HAL_SPI_STATE_READY)
000034  f8940051          LDRB     r0,[r4,#0x51]
000038  2801              CMP      r0,#1
00003a  d003              BEQ      |L18.68|
00003c  e005              B        |L18.74|
                  |L18.62|
00003e  2001              MOVS     r0,#1                 ;745
                  |L18.64|
;;;756        {
;;;757          hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;758        }
;;;759    
;;;760         /* Configure communication */   
;;;761        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;762    
;;;763        hspi->pRxBuffPtr  = pRxData;
;;;764        hspi->RxXferSize  = Size;
;;;765        hspi->RxXferCount = Size;  
;;;766        
;;;767        hspi->pTxBuffPtr  = pTxData;
;;;768        hspi->TxXferSize  = Size; 
;;;769        hspi->TxXferCount = Size;
;;;770    
;;;771        /*Init field not used in handle to zero */
;;;772        hspi->RxISR = 0;
;;;773        hspi->TxISR = 0;
;;;774    
;;;775        /* Reset CRC Calculation */
;;;776        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;777        {
;;;778          SPI_RESET_CRC(hspi);
;;;779        }
;;;780    
;;;781        /* Check if the SPI is already enabled */ 
;;;782        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;783        {
;;;784          /* Enable SPI peripheral */
;;;785          __HAL_SPI_ENABLE(hspi);
;;;786        }
;;;787    
;;;788        /* Transmit and Receive data in 16 Bit mode */
;;;789        if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;790        {
;;;791          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;792          {
;;;793            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;794            hspi->pTxBuffPtr+=2;
;;;795            hspi->TxXferCount--;
;;;796          }
;;;797          if(hspi->TxXferCount == 0)
;;;798          {
;;;799            /* Enable CRC Transmission */
;;;800            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;801            {
;;;802              SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;803            }
;;;804    
;;;805            /* Wait until RXNE flag is set */
;;;806            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;807            { 
;;;808              return HAL_TIMEOUT;
;;;809            }
;;;810    
;;;811            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;812            hspi->pRxBuffPtr+=2;
;;;813            hspi->RxXferCount--;
;;;814          }
;;;815          else
;;;816          {
;;;817            while(hspi->TxXferCount > 0)
;;;818            {
;;;819              /* Wait until TXE flag is set to send data */
;;;820              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;821              { 
;;;822                return HAL_TIMEOUT;
;;;823              }
;;;824    
;;;825              hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;826              hspi->pTxBuffPtr+=2;
;;;827              hspi->TxXferCount--;
;;;828    
;;;829              /* Enable CRC Transmission */
;;;830              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;831              {
;;;832                SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;833              }
;;;834    
;;;835              /* Wait until RXNE flag is set */
;;;836              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;837              { 
;;;838                return HAL_TIMEOUT;
;;;839              }
;;;840    
;;;841              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;842              hspi->pRxBuffPtr+=2;
;;;843              hspi->RxXferCount--;
;;;844            }
;;;845            /* Receive the last byte */
;;;846            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;847            {
;;;848              /* Wait until RXNE flag is set */
;;;849              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;850              {
;;;851                return HAL_TIMEOUT;
;;;852              }
;;;853              
;;;854              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;855              hspi->pRxBuffPtr+=2;
;;;856              hspi->RxXferCount--;
;;;857            }
;;;858          }
;;;859        }
;;;860        /* Transmit and Receive data in 8 Bit mode */
;;;861        else
;;;862        {
;;;863          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;864          {
;;;865            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;866            hspi->TxXferCount--;
;;;867          }
;;;868          if(hspi->TxXferCount == 0)
;;;869          {
;;;870            /* Enable CRC Transmission */
;;;871            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;872            {
;;;873              SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;874            }
;;;875    
;;;876            /* Wait until RXNE flag is set */
;;;877            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;878            {
;;;879              return HAL_TIMEOUT;
;;;880            }
;;;881    
;;;882            (*hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;883            hspi->RxXferCount--;
;;;884          }
;;;885          else
;;;886          {
;;;887            while(hspi->TxXferCount > 0)
;;;888            {
;;;889              /* Wait until TXE flag is set to send data */
;;;890              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;891              {
;;;892                return HAL_TIMEOUT;
;;;893              }
;;;894    
;;;895              hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;896              hspi->TxXferCount--;
;;;897    
;;;898              /* Enable CRC Transmission */
;;;899              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;900              {
;;;901                SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;902              }
;;;903    
;;;904              /* Wait until RXNE flag is set */
;;;905              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;906              {
;;;907                return HAL_TIMEOUT;
;;;908              }
;;;909    
;;;910              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;911              hspi->RxXferCount--;
;;;912            }
;;;913            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;914            {
;;;915              /* Wait until RXNE flag is set */
;;;916              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;917              {
;;;918                return HAL_TIMEOUT;
;;;919              }
;;;920              
;;;921              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;922              hspi->RxXferCount--;
;;;923            }
;;;924          }
;;;925        }
;;;926    
;;;927        /* Read CRC from DR to close CRC calculation process */
;;;928        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;929        {
;;;930          /* Wait until RXNE flag is set */
;;;931          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;932          {
;;;933            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;934            return HAL_TIMEOUT;
;;;935          }
;;;936          /* Read CRC */
;;;937          tmpreg = hspi->Instance->DR;
;;;938          UNUSED(tmpreg);
;;;939        }
;;;940    
;;;941        /* Wait until Busy flag is reset before disabling SPI */
;;;942        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;943        {
;;;944          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;945          return HAL_TIMEOUT;
;;;946        }
;;;947        
;;;948        hspi->State = HAL_SPI_STATE_READY;
;;;949    
;;;950        /* Check if CRC error occurred */
;;;951        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
;;;952        {
;;;953          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;954    
;;;955          SPI_RESET_CRC(hspi);
;;;956    
;;;957          /* Process Unlocked */
;;;958          __HAL_UNLOCK(hspi);
;;;959          
;;;960          return HAL_ERROR; 
;;;961        }
;;;962    
;;;963        /* Process Unlocked */
;;;964        __HAL_UNLOCK(hspi);
;;;965    
;;;966        return HAL_OK;
;;;967      }
;;;968      else
;;;969      {
;;;970        return HAL_BUSY;
;;;971      }
;;;972    }
000040  e8bd83f8          POP      {r3-r9,pc}
                  |L18.68|
000044  2032              MOVS     r0,#0x32              ;757
000046  f8840051          STRB     r0,[r4,#0x51]         ;757
                  |L18.74|
00004a  6565              STR      r5,[r4,#0x54]         ;761
00004c  63a2              STR      r2,[r4,#0x38]         ;764
00004e  87a3              STRH     r3,[r4,#0x3c]         ;764
000050  87e3              STRH     r3,[r4,#0x3e]         ;765
000052  6321              STR      r1,[r4,#0x30]         ;768
000054  86a3              STRH     r3,[r4,#0x34]         ;768
000056  86e3              STRH     r3,[r4,#0x36]         ;769
000058  64a5              STR      r5,[r4,#0x48]         ;773
00005a  64e5              STR      r5,[r4,#0x4c]         ;776
00005c  6aa0              LDR      r0,[r4,#0x28]         ;776
00005e  f44f5700          MOV      r7,#0x2000            ;776
000062  42b8              CMP      r0,r7                 ;776
000064  d109              BNE      |L18.122|
000066  6820              LDR      r0,[r4,#0]            ;778
000068  6801              LDR      r1,[r0,#0]            ;778
00006a  f4215100          BIC      r1,r1,#0x2000         ;778
00006e  6001              STR      r1,[r0,#0]            ;778
000070  6820              LDR      r0,[r4,#0]            ;778
000072  6801              LDR      r1,[r0,#0]            ;778
000074  f4415100          ORR      r1,r1,#0x2000         ;778
000078  6001              STR      r1,[r0,#0]            ;778
                  |L18.122|
00007a  6820              LDR      r0,[r4,#0]            ;782
00007c  6801              LDR      r1,[r0,#0]            ;782
00007e  0649              LSLS     r1,r1,#25             ;782
000080  d403              BMI      |L18.138|
000082  6801              LDR      r1,[r0,#0]            ;785
000084  f0410140          ORR      r1,r1,#0x40           ;785
000088  6001              STR      r1,[r0,#0]            ;785
                  |L18.138|
00008a  68e0              LDR      r0,[r4,#0xc]          ;789
00008c  f44f7182          MOV      r1,#0x104             ;791
000090  f5b06f00          CMP      r0,#0x800             ;789
000094  6860              LDR      r0,[r4,#4]            ;789
000096  d007              BEQ      |L18.168|
000098  2800              CMP      r0,#0                 ;863
00009a  d067              BEQ      |L18.364|
00009c  4288              CMP      r0,r1                 ;863
00009e  d16e              BNE      |L18.382|
0000a0  8ee0              LDRH     r0,[r4,#0x36]         ;863
0000a2  2801              CMP      r0,#1                 ;863
0000a4  d062              BEQ      |L18.364|
0000a6  e06a              B        |L18.382|
                  |L18.168|
0000a8  b120              CBZ      r0,|L18.180|
0000aa  4288              CMP      r0,r1                 ;791
0000ac  d10c              BNE      |L18.200|
0000ae  8ee0              LDRH     r0,[r4,#0x36]         ;791
0000b0  2801              CMP      r0,#1                 ;791
0000b2  d109              BNE      |L18.200|
                  |L18.180|
0000b4  6b20              LDR      r0,[r4,#0x30]         ;793
0000b6  6821              LDR      r1,[r4,#0]            ;793
0000b8  8800              LDRH     r0,[r0,#0]            ;793
0000ba  60c8              STR      r0,[r1,#0xc]          ;793
0000bc  6b20              LDR      r0,[r4,#0x30]         ;794
0000be  1c80              ADDS     r0,r0,#2              ;794
0000c0  6320              STR      r0,[r4,#0x30]         ;795
0000c2  8ee0              LDRH     r0,[r4,#0x36]         ;795
0000c4  1e40              SUBS     r0,r0,#1              ;795
0000c6  86e0              STRH     r0,[r4,#0x36]         ;795
                  |L18.200|
0000c8  8ee0              LDRH     r0,[r4,#0x36]         ;797
0000ca  b980              CBNZ     r0,|L18.238|
0000cc  6aa0              LDR      r0,[r4,#0x28]         ;800
0000ce  42b8              CMP      r0,r7                 ;800
0000d0  d144              BNE      |L18.348|
0000d2  6820              LDR      r0,[r4,#0]            ;802
0000d4  6801              LDR      r1,[r0,#0]            ;802
0000d6  f4415180          ORR      r1,r1,#0x1000         ;802
0000da  6001              STR      r1,[r0,#0]            ;802
0000dc  e03e              B        |L18.348|
                  |L18.222|
0000de  6820              LDR      r0,[r4,#0]            ;811
0000e0  68c0              LDR      r0,[r0,#0xc]          ;811
0000e2  6ba1              LDR      r1,[r4,#0x38]         ;811
0000e4  8008              STRH     r0,[r1,#0]            ;811
0000e6  6ba0              LDR      r0,[r4,#0x38]         ;812
0000e8  1c80              ADDS     r0,r0,#2              ;812
0000ea  63a0              STR      r0,[r4,#0x38]         ;813
0000ec  e09e              B        |L18.556|
                  |L18.238|
0000ee  4643              MOV      r3,r8                 ;820
0000f0  2200              MOVS     r2,#0                 ;820
0000f2  2102              MOVS     r1,#2                 ;820
0000f4  4620              MOV      r0,r4                 ;820
0000f6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000fa  2800              CMP      r0,#0                 ;820
0000fc  d174              BNE      |L18.488|
0000fe  6b20              LDR      r0,[r4,#0x30]         ;825
000100  6821              LDR      r1,[r4,#0]            ;825
000102  8800              LDRH     r0,[r0,#0]            ;825
000104  60c8              STR      r0,[r1,#0xc]          ;825
000106  6b20              LDR      r0,[r4,#0x30]         ;826
000108  1c80              ADDS     r0,r0,#2              ;826
00010a  6320              STR      r0,[r4,#0x30]         ;827
00010c  8ee0              LDRH     r0,[r4,#0x36]         ;827
00010e  1e40              SUBS     r0,r0,#1              ;827
000110  0400              LSLS     r0,r0,#16             ;827
000112  0c00              LSRS     r0,r0,#16             ;827
000114  86e0              STRH     r0,[r4,#0x36]         ;827
000116  d109              BNE      |L18.300|
000118  6aa0              LDR      r0,[r4,#0x28]         ;830
00011a  e000              B        |L18.286|
                  |L18.284|
00011c  e0c7              B        |L18.686|
                  |L18.286|
00011e  42b8              CMP      r0,r7                 ;830
000120  d104              BNE      |L18.300|
000122  6820              LDR      r0,[r4,#0]            ;832
000124  6801              LDR      r1,[r0,#0]            ;832
000126  f4415180          ORR      r1,r1,#0x1000         ;832
00012a  6001              STR      r1,[r0,#0]            ;832
                  |L18.300|
00012c  4643              MOV      r3,r8                 ;836
00012e  2200              MOVS     r2,#0                 ;836
000130  2101              MOVS     r1,#1                 ;836
000132  4620              MOV      r0,r4                 ;836
000134  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000138  2800              CMP      r0,#0                 ;836
00013a  d16f              BNE      |L18.540|
00013c  6820              LDR      r0,[r4,#0]            ;841
00013e  68c0              LDR      r0,[r0,#0xc]          ;841
000140  6ba1              LDR      r1,[r4,#0x38]         ;841
000142  8008              STRH     r0,[r1,#0]            ;841
000144  6ba0              LDR      r0,[r4,#0x38]         ;842
000146  1c80              ADDS     r0,r0,#2              ;842
000148  63a0              STR      r0,[r4,#0x38]         ;843
00014a  8fe0              LDRH     r0,[r4,#0x3e]         ;843
00014c  1e40              SUBS     r0,r0,#1              ;843
00014e  87e0              STRH     r0,[r4,#0x3e]         ;843
000150  8ee0              LDRH     r0,[r4,#0x36]         ;817
000152  2800              CMP      r0,#0                 ;843
000154  d1cb              BNE      |L18.238|
000156  6860              LDR      r0,[r4,#4]            ;846
000158  2800              CMP      r0,#0                 ;846
00015a  d16a              BNE      |L18.562|
                  |L18.348|
00015c  4643              MOV      r3,r8                 ;849
00015e  2200              MOVS     r2,#0                 ;849
000160  2101              MOVS     r1,#1                 ;849
000162  4620              MOV      r0,r4                 ;849
000164  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000168  bbf0              CBNZ     r0,|L18.488|
00016a  e7b8              B        |L18.222|
                  |L18.364|
00016c  6b20              LDR      r0,[r4,#0x30]         ;865
00016e  1c41              ADDS     r1,r0,#1              ;865
000170  6321              STR      r1,[r4,#0x30]         ;865
000172  6821              LDR      r1,[r4,#0]            ;865
000174  7800              LDRB     r0,[r0,#0]            ;865
000176  60c8              STR      r0,[r1,#0xc]          ;865
000178  8ee0              LDRH     r0,[r4,#0x36]         ;866
00017a  1e40              SUBS     r0,r0,#1              ;866
00017c  86e0              STRH     r0,[r4,#0x36]         ;866
                  |L18.382|
00017e  8ee0              LDRH     r0,[r4,#0x36]         ;868
000180  b998              CBNZ     r0,|L18.426|
000182  6aa0              LDR      r0,[r4,#0x28]         ;871
000184  42b8              CMP      r0,r7                 ;871
000186  d104              BNE      |L18.402|
000188  6820              LDR      r0,[r4,#0]            ;873
00018a  6801              LDR      r1,[r0,#0]            ;873
00018c  f4415180          ORR      r1,r1,#0x1000         ;873
000190  6001              STR      r1,[r0,#0]            ;873
                  |L18.402|
000192  4643              MOV      r3,r8                 ;877
000194  2200              MOVS     r2,#0                 ;877
000196  2101              MOVS     r1,#1                 ;877
000198  4620              MOV      r0,r4                 ;877
00019a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00019e  bb18              CBNZ     r0,|L18.488|
0001a0  6820              LDR      r0,[r4,#0]            ;882
0001a2  68c0              LDR      r0,[r0,#0xc]          ;882
0001a4  6ba1              LDR      r1,[r4,#0x38]         ;882
0001a6  7008              STRB     r0,[r1,#0]            ;882
0001a8  e040              B        |L18.556|
                  |L18.426|
0001aa  4643              MOV      r3,r8                 ;890
0001ac  2200              MOVS     r2,#0                 ;890
0001ae  2102              MOVS     r1,#2                 ;890
0001b0  4620              MOV      r0,r4                 ;890
0001b2  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001b6  b9b8              CBNZ     r0,|L18.488|
0001b8  6b20              LDR      r0,[r4,#0x30]         ;895
0001ba  1c41              ADDS     r1,r0,#1              ;895
0001bc  6321              STR      r1,[r4,#0x30]         ;895
0001be  6821              LDR      r1,[r4,#0]            ;895
0001c0  7800              LDRB     r0,[r0,#0]            ;895
0001c2  60c8              STR      r0,[r1,#0xc]          ;895
0001c4  8ee0              LDRH     r0,[r4,#0x36]         ;896
0001c6  1e40              SUBS     r0,r0,#1              ;896
0001c8  0400              LSLS     r0,r0,#16             ;896
0001ca  0c00              LSRS     r0,r0,#16             ;896
0001cc  86e0              STRH     r0,[r4,#0x36]         ;896
0001ce  d107              BNE      |L18.480|
0001d0  6aa0              LDR      r0,[r4,#0x28]         ;899
0001d2  42b8              CMP      r0,r7                 ;899
0001d4  d104              BNE      |L18.480|
0001d6  6820              LDR      r0,[r4,#0]            ;901
0001d8  6801              LDR      r1,[r0,#0]            ;901
0001da  f4415180          ORR      r1,r1,#0x1000         ;901
0001de  6001              STR      r1,[r0,#0]            ;901
                  |L18.480|
0001e0  2200              MOVS     r2,#0                 ;905
0001e2  4643              MOV      r3,r8                 ;905
0001e4  2101              MOVS     r1,#1                 ;905
0001e6  e000              B        |L18.490|
                  |L18.488|
0001e8  e018              B        |L18.540|
                  |L18.490|
0001ea  4620              MOV      r0,r4                 ;905
0001ec  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001f0  b9a0              CBNZ     r0,|L18.540|
0001f2  6820              LDR      r0,[r4,#0]            ;910
0001f4  68c1              LDR      r1,[r0,#0xc]          ;910
0001f6  6ba0              LDR      r0,[r4,#0x38]         ;910
0001f8  1c42              ADDS     r2,r0,#1              ;910
0001fa  63a2              STR      r2,[r4,#0x38]         ;910
0001fc  7001              STRB     r1,[r0,#0]            ;910
0001fe  8fe0              LDRH     r0,[r4,#0x3e]         ;911
000200  1e40              SUBS     r0,r0,#1              ;911
000202  87e0              STRH     r0,[r4,#0x3e]         ;911
000204  8ee0              LDRH     r0,[r4,#0x36]         ;887
000206  2800              CMP      r0,#0                 ;911
000208  d1cf              BNE      |L18.426|
00020a  6860              LDR      r0,[r4,#4]            ;913
00020c  b988              CBNZ     r0,|L18.562|
00020e  4643              MOV      r3,r8                 ;916
000210  2200              MOVS     r2,#0                 ;916
000212  2101              MOVS     r1,#1                 ;916
000214  4620              MOV      r0,r4                 ;916
000216  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00021a  b108              CBZ      r0,|L18.544|
                  |L18.540|
00021c  2003              MOVS     r0,#3                 ;918
00021e  e70f              B        |L18.64|
                  |L18.544|
000220  6820              LDR      r0,[r4,#0]            ;921
000222  68c1              LDR      r1,[r0,#0xc]          ;921
000224  6ba0              LDR      r0,[r4,#0x38]         ;921
000226  1c42              ADDS     r2,r0,#1              ;921
000228  63a2              STR      r2,[r4,#0x38]         ;921
00022a  7001              STRB     r1,[r0,#0]            ;921
                  |L18.556|
00022c  8fe0              LDRH     r0,[r4,#0x3e]         ;922
00022e  1e40              SUBS     r0,r0,#1              ;922
000230  87e0              STRH     r0,[r4,#0x3e]         ;922
                  |L18.562|
000232  6aa0              LDR      r0,[r4,#0x28]         ;928
000234  42b8              CMP      r0,r7                 ;928
000236  d110              BNE      |L18.602|
000238  4643              MOV      r3,r8                 ;931
00023a  2200              MOVS     r2,#0                 ;931
00023c  2101              MOVS     r1,#1                 ;931
00023e  4620              MOV      r0,r4                 ;931
000240  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000244  b118              CBZ      r0,|L18.590|
000246  6d60              LDR      r0,[r4,#0x54]         ;933
000248  f0400002          ORR      r0,r0,#2              ;933
00024c  e00f              B        |L18.622|
                  |L18.590|
00024e  6820              LDR      r0,[r4,#0]            ;937
000250  68c0              LDR      r0,[r0,#0xc]          ;937
000252  f8ad0000          STRH     r0,[sp,#0]            ;937
000256  f8bd0000          LDRH     r0,[sp,#0]            ;938
                  |L18.602|
00025a  4643              MOV      r3,r8                 ;942
00025c  2201              MOVS     r2,#1                 ;942
00025e  2180              MOVS     r1,#0x80              ;942
000260  4620              MOV      r0,r4                 ;942
000262  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000266  b120              CBZ      r0,|L18.626|
000268  6d60              LDR      r0,[r4,#0x54]         ;944
00026a  f0400010          ORR      r0,r0,#0x10           ;944
                  |L18.622|
00026e  6560              STR      r0,[r4,#0x54]         ;944
000270  e7d4              B        |L18.540|
                  |L18.626|
000272  f8846051          STRB     r6,[r4,#0x51]         ;948
000276  6aa0              LDR      r0,[r4,#0x28]         ;951
000278  42b8              CMP      r0,r7                 ;951
00027a  d114              BNE      |L18.678|
00027c  6820              LDR      r0,[r4,#0]            ;951
00027e  6881              LDR      r1,[r0,#8]            ;951
000280  43c9              MVNS     r1,r1                 ;951
000282  06c9              LSLS     r1,r1,#27             ;951
000284  d40f              BMI      |L18.678|
000286  6d61              LDR      r1,[r4,#0x54]         ;953
000288  f0410102          ORR      r1,r1,#2              ;953
00028c  6561              STR      r1,[r4,#0x54]         ;953
00028e  6801              LDR      r1,[r0,#0]            ;955
000290  f4215100          BIC      r1,r1,#0x2000         ;955
000294  6001              STR      r1,[r0,#0]            ;955
000296  6820              LDR      r0,[r4,#0]            ;955
000298  6801              LDR      r1,[r0,#0]            ;955
00029a  f4415100          ORR      r1,r1,#0x2000         ;955
00029e  6001              STR      r1,[r0,#0]            ;955
0002a0  f8845050          STRB     r5,[r4,#0x50]         ;958
0002a4  e6cb              B        |L18.62|
                  |L18.678|
0002a6  f8845050          STRB     r5,[r4,#0x50]         ;964
0002aa  2000              MOVS     r0,#0                 ;966
0002ac  e6c8              B        |L18.64|
                  |L18.686|
0002ae  2002              MOVS     r0,#2                 ;970
0002b0  e6c6              B        |L18.64|
;;;973    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_DMA PROC
;;;1384     */
;;;1385   HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1386   {
000002  4604              MOV      r4,r0
;;;1387     if((hspi->State == HAL_SPI_STATE_READY) || \
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d00a              BEQ      |L19.34|
;;;1388        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX)))
00000c  6860              LDR      r0,[r4,#4]
00000e  f5b07f82          CMP      r0,#0x104
000012  d171              BNE      |L19.248|
000014  68a0              LDR      r0,[r4,#8]
000016  2800              CMP      r0,#0
000018  d16e              BNE      |L19.248|
00001a  f8940051          LDRB     r0,[r4,#0x51]
00001e  2822              CMP      r0,#0x22
000020  d16a              BNE      |L19.248|
                  |L19.34|
;;;1389     {
;;;1390       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
000022  b1f1              CBZ      r1,|L19.98|
000024  b1ea              CBZ      r2,|L19.98|
000026  b1e3              CBZ      r3,|L19.98|
;;;1391       {
;;;1392         return  HAL_ERROR;
;;;1393       }
;;;1394   
;;;1395       /* Check the parameters */
;;;1396       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1397       
;;;1398       /* Process locked */
;;;1399       __HAL_LOCK(hspi);
000028  f8940050          LDRB     r0,[r4,#0x50]
00002c  2801              CMP      r0,#1
00002e  d063              BEQ      |L19.248|
000030  2001              MOVS     r0,#1
000032  f8840050          STRB     r0,[r4,#0x50]
;;;1400   
;;;1401       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1402       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
000036  f8940051          LDRB     r0,[r4,#0x51]
00003a  2822              CMP      r0,#0x22
00003c  d002              BEQ      |L19.68|
;;;1403       {
;;;1404         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
00003e  2032              MOVS     r0,#0x32
000040  f8840051          STRB     r0,[r4,#0x51]
                  |L19.68|
;;;1405       }
;;;1406   
;;;1407       /* Configure communication */
;;;1408       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000044  2500              MOVS     r5,#0
000046  6565              STR      r5,[r4,#0x54]
;;;1409   
;;;1410       hspi->pTxBuffPtr  = (uint8_t*)pTxData;
;;;1411       hspi->TxXferSize  = Size;
000048  6321              STR      r1,[r4,#0x30]
00004a  86a3              STRH     r3,[r4,#0x34]
;;;1412       hspi->TxXferCount = Size;
00004c  86e3              STRH     r3,[r4,#0x36]
;;;1413   
;;;1414       hspi->pRxBuffPtr  = (uint8_t*)pRxData;
;;;1415       hspi->RxXferSize  = Size;
00004e  63a2              STR      r2,[r4,#0x38]
000050  87a3              STRH     r3,[r4,#0x3c]
;;;1416       hspi->RxXferCount = Size;
000052  87e3              STRH     r3,[r4,#0x3e]
;;;1417   
;;;1418       /*Init field not used in handle to zero */
;;;1419       hspi->RxISR = 0;
;;;1420       hspi->TxISR = 0;
000054  64a5              STR      r5,[r4,#0x48]
;;;1421   
;;;1422       /* Reset CRC Calculation */
;;;1423       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000056  64e5              STR      r5,[r4,#0x4c]
000058  6aa0              LDR      r0,[r4,#0x28]
00005a  f5b05f00          CMP      r0,#0x2000
00005e  d002              BEQ      |L19.102|
000060  e00b              B        |L19.122|
                  |L19.98|
000062  2001              MOVS     r0,#1                 ;1392
;;;1424       {
;;;1425         SPI_RESET_CRC(hspi);
;;;1426       }
;;;1427   
;;;1428       /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
;;;1429       if(hspi->State == HAL_SPI_STATE_BUSY_RX)
;;;1430       {
;;;1431         /* Set the SPI Rx DMA Half transfer complete callback */
;;;1432         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1433         
;;;1434         hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1435       }
;;;1436       else
;;;1437       {
;;;1438         /* Set the SPI Tx/Rx DMA Half transfer complete callback */
;;;1439         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1440     
;;;1441         hspi->hdmarx->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1442       }
;;;1443   
;;;1444       /* Set the DMA error callback */
;;;1445       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1446   
;;;1447       /* Enable the Rx DMA Channel */
;;;1448       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1449   
;;;1450       /* Enable Rx DMA Request */  
;;;1451       SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1452   
;;;1453       /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
;;;1454       is performed in DMA reception complete callback  */
;;;1455       if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1456       {
;;;1457         /* Set the DMA error callback */
;;;1458         hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1459       }
;;;1460       else
;;;1461       {
;;;1462         hspi->hdmatx->XferErrorCallback = NULL;
;;;1463       }
;;;1464       
;;;1465       /* Enable the Tx DMA Channel */
;;;1466       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1467   
;;;1468       /* Check if the SPI is already enabled */ 
;;;1469       if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1470       {
;;;1471         /* Enable SPI peripheral */
;;;1472         __HAL_SPI_ENABLE(hspi);
;;;1473       }
;;;1474   
;;;1475       /* Enable Tx DMA Request */  
;;;1476       SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1477   
;;;1478       /* Process Unlocked */
;;;1479       __HAL_UNLOCK(hspi);
;;;1480   
;;;1481       return HAL_OK;
;;;1482     }
;;;1483     else
;;;1484     {
;;;1485       return HAL_BUSY;
;;;1486     }
;;;1487   }
000064  bd70              POP      {r4-r6,pc}
                  |L19.102|
000066  6820              LDR      r0,[r4,#0]            ;1425
000068  6801              LDR      r1,[r0,#0]            ;1425
00006a  f4215100          BIC      r1,r1,#0x2000         ;1425
00006e  6001              STR      r1,[r0,#0]            ;1425
000070  6820              LDR      r0,[r4,#0]            ;1425
000072  6801              LDR      r1,[r0,#0]            ;1425
000074  f4415100          ORR      r1,r1,#0x2000         ;1425
000078  6001              STR      r1,[r0,#0]            ;1425
                  |L19.122|
00007a  f8940051          LDRB     r0,[r4,#0x51]         ;1429
00007e  2822              CMP      r0,#0x22              ;1429
000080  d032              BEQ      |L19.232|
000082  6c61              LDR      r1,[r4,#0x44]         ;1439
000084  481d              LDR      r0,|L19.252|
000086  62c8              STR      r0,[r1,#0x2c]         ;1441
000088  481d              LDR      r0,|L19.256|
                  |L19.138|
00008a  6c61              LDR      r1,[r4,#0x44]         ;1441
00008c  4e1d              LDR      r6,|L19.260|
00008e  6288              STR      r0,[r1,#0x28]         ;1445
000090  6c60              LDR      r0,[r4,#0x44]         ;1445
000092  6306              STR      r6,[r0,#0x30]         ;1448
000094  6821              LDR      r1,[r4,#0]            ;1448
000096  8fe3              LDRH     r3,[r4,#0x3e]         ;1448
000098  310c              ADDS     r1,r1,#0xc            ;1448
00009a  6ba2              LDR      r2,[r4,#0x38]         ;1448
00009c  6c60              LDR      r0,[r4,#0x44]         ;1448
00009e  f7fffffe          BL       HAL_DMA_Start_IT
0000a2  6820              LDR      r0,[r4,#0]            ;1451
0000a4  6841              LDR      r1,[r0,#4]            ;1451
0000a6  f0410101          ORR      r1,r1,#1              ;1451
0000aa  6041              STR      r1,[r0,#4]            ;1451
0000ac  f8940051          LDRB     r0,[r4,#0x51]         ;1455
0000b0  2832              CMP      r0,#0x32              ;1455
0000b2  6c20              LDR      r0,[r4,#0x40]         ;1455
0000b4  d01e              BEQ      |L19.244|
0000b6  6305              STR      r5,[r0,#0x30]         ;1462
                  |L19.184|
0000b8  6822              LDR      r2,[r4,#0]            ;1466
0000ba  8ee3              LDRH     r3,[r4,#0x36]         ;1466
0000bc  320c              ADDS     r2,r2,#0xc            ;1466
0000be  6b21              LDR      r1,[r4,#0x30]         ;1466
0000c0  6c20              LDR      r0,[r4,#0x40]         ;1466
0000c2  f7fffffe          BL       HAL_DMA_Start_IT
0000c6  6820              LDR      r0,[r4,#0]            ;1469
0000c8  6801              LDR      r1,[r0,#0]            ;1469
0000ca  0649              LSLS     r1,r1,#25             ;1469
0000cc  d403              BMI      |L19.214|
0000ce  6801              LDR      r1,[r0,#0]            ;1472
0000d0  f0410140          ORR      r1,r1,#0x40           ;1472
0000d4  6001              STR      r1,[r0,#0]            ;1472
                  |L19.214|
0000d6  6820              LDR      r0,[r4,#0]            ;1476
0000d8  6841              LDR      r1,[r0,#4]            ;1476
0000da  f0410102          ORR      r1,r1,#2              ;1476
0000de  6041              STR      r1,[r0,#4]            ;1476
0000e0  f8845050          STRB     r5,[r4,#0x50]         ;1479
0000e4  2000              MOVS     r0,#0                 ;1481
0000e6  bd70              POP      {r4-r6,pc}
                  |L19.232|
0000e8  6c61              LDR      r1,[r4,#0x44]         ;1432
0000ea  4807              LDR      r0,|L19.264|
0000ec  62c8              STR      r0,[r1,#0x2c]         ;1434
0000ee  4807              LDR      r0,|L19.268|
0000f0  e7cb              B        |L19.138|
0000f2  e001              B        |L19.248|
                  |L19.244|
0000f4  6306              STR      r6,[r0,#0x30]         ;1458
0000f6  e7df              B        |L19.184|
                  |L19.248|
0000f8  2002              MOVS     r0,#2                 ;1485
0000fa  bd70              POP      {r4-r6,pc}
;;;1488   
                          ENDP

                  |L19.252|
                          DCD      SPI_DMAHalfTransmitReceiveCplt
                  |L19.256|
                          DCD      SPI_DMATransmitReceiveCplt
                  |L19.260|
                          DCD      SPI_DMAError
                  |L19.264|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L19.268|
                          DCD      SPI_DMAReceiveCplt

                          AREA ||i.HAL_SPI_TransmitReceive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_IT PROC
;;;1139     */
;;;1140   HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b530              PUSH     {r4,r5,lr}
;;;1141   {
;;;1142   
;;;1143     if((hspi->State == HAL_SPI_STATE_READY) || \
000002  f8904051          LDRB     r4,[r0,#0x51]
000006  2c01              CMP      r4,#1
000008  d009              BEQ      |L20.30|
;;;1144        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX)))
00000a  6844              LDR      r4,[r0,#4]
00000c  f5b47f82          CMP      r4,#0x104
000010  d146              BNE      |L20.160|
000012  6884              LDR      r4,[r0,#8]
000014  bbf4              CBNZ     r4,|L20.148|
000016  f8904051          LDRB     r4,[r0,#0x51]
00001a  2c22              CMP      r4,#0x22
00001c  d140              BNE      |L20.160|
                  |L20.30|
;;;1145     {
;;;1146       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0)) 
00001e  b301              CBZ      r1,|L20.98|
000020  b1fa              CBZ      r2,|L20.98|
000022  b1f3              CBZ      r3,|L20.98|
;;;1147       {
;;;1148         return  HAL_ERROR;
;;;1149       }
;;;1150   
;;;1151       /* Check the parameters */
;;;1152       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1153   
;;;1154       /* Process locked */
;;;1155       __HAL_LOCK(hspi);
000024  f8904050          LDRB     r4,[r0,#0x50]
000028  2c01              CMP      r4,#1
00002a  d039              BEQ      |L20.160|
00002c  2401              MOVS     r4,#1
00002e  f8804050          STRB     r4,[r0,#0x50]
;;;1156   
;;;1157       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1158       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
000032  f8904051          LDRB     r4,[r0,#0x51]
000036  2c22              CMP      r4,#0x22
000038  d002              BEQ      |L20.64|
;;;1159       {
;;;1160         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
00003a  2432              MOVS     r4,#0x32
00003c  f8804051          STRB     r4,[r0,#0x51]
                  |L20.64|
;;;1161       }
;;;1162   
;;;1163       /* Configure communication */
;;;1164       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000040  2400              MOVS     r4,#0
000042  6544              STR      r4,[r0,#0x54]
;;;1165   
;;;1166       hspi->TxISR = &SPI_TxISR;
000044  4d17              LDR      r5,|L20.164|
;;;1167       hspi->pTxBuffPtr   = pTxData;
;;;1168       hspi->TxXferSize   = Size;
000046  64c5              STR      r5,[r0,#0x4c]
000048  6301              STR      r1,[r0,#0x30]
00004a  8683              STRH     r3,[r0,#0x34]
;;;1169       hspi->TxXferCount  = Size;
00004c  86c3              STRH     r3,[r0,#0x36]
;;;1170   
;;;1171       hspi->RxISR = &SPI_2LinesRxISR;
00004e  4916              LDR      r1,|L20.168|
;;;1172       hspi->pRxBuffPtr   = pRxData;
;;;1173       hspi->RxXferSize   = Size;
000050  6382              STR      r2,[r0,#0x38]
000052  6481              STR      r1,[r0,#0x48]
000054  8783              STRH     r3,[r0,#0x3c]
;;;1174       hspi->RxXferCount  = Size;
000056  87c3              STRH     r3,[r0,#0x3e]
;;;1175   
;;;1176       /* Reset CRC Calculation */
;;;1177       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000058  6a81              LDR      r1,[r0,#0x28]
00005a  f5b15f00          CMP      r1,#0x2000
00005e  d002              BEQ      |L20.102|
000060  e00b              B        |L20.122|
                  |L20.98|
000062  2001              MOVS     r0,#1                 ;1148
;;;1178       {
;;;1179         SPI_RESET_CRC(hspi);
;;;1180       }
;;;1181   
;;;1182       /* Enable TXE, RXNE and ERR interrupt */
;;;1183       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1184   
;;;1185       /* Process Unlocked */
;;;1186       __HAL_UNLOCK(hspi);
;;;1187   
;;;1188       /* Check if the SPI is already enabled */ 
;;;1189       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1190       {
;;;1191         /* Enable SPI peripheral */
;;;1192         __HAL_SPI_ENABLE(hspi);
;;;1193       }
;;;1194   
;;;1195       return HAL_OK;
;;;1196     }
;;;1197     else
;;;1198     {
;;;1199       return HAL_BUSY; 
;;;1200     }
;;;1201   }
000064  bd30              POP      {r4,r5,pc}
                  |L20.102|
000066  6801              LDR      r1,[r0,#0]            ;1179
000068  680a              LDR      r2,[r1,#0]            ;1179
00006a  f4225200          BIC      r2,r2,#0x2000         ;1179
00006e  600a              STR      r2,[r1,#0]            ;1179
000070  6801              LDR      r1,[r0,#0]            ;1179
000072  680a              LDR      r2,[r1,#0]            ;1179
000074  f4425200          ORR      r2,r2,#0x2000         ;1179
000078  600a              STR      r2,[r1,#0]            ;1179
                  |L20.122|
00007a  6801              LDR      r1,[r0,#0]            ;1183
00007c  684a              LDR      r2,[r1,#4]            ;1183
00007e  f04202e0          ORR      r2,r2,#0xe0           ;1183
000082  604a              STR      r2,[r1,#4]            ;1183
000084  f8804050          STRB     r4,[r0,#0x50]         ;1186
000088  6800              LDR      r0,[r0,#0]            ;1189
00008a  6801              LDR      r1,[r0,#0]            ;1189
00008c  0649              LSLS     r1,r1,#25             ;1189
00008e  d405              BMI      |L20.156|
000090  6801              LDR      r1,[r0,#0]            ;1192
000092  e000              B        |L20.150|
                  |L20.148|
000094  e004              B        |L20.160|
                  |L20.150|
000096  f0410140          ORR      r1,r1,#0x40           ;1192
00009a  6001              STR      r1,[r0,#0]            ;1192
                  |L20.156|
00009c  2000              MOVS     r0,#0                 ;1195
00009e  bd30              POP      {r4,r5,pc}
                  |L20.160|
0000a0  2002              MOVS     r0,#2                 ;1199
0000a2  bd30              POP      {r4,r5,pc}
;;;1202   
                          ENDP

                  |L20.164|
                          DCD      SPI_TxISR
                  |L20.168|
                          DCD      SPI_2LinesRxISR

                          AREA ||i.HAL_SPI_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_DMA PROC
;;;1210     */
;;;1211   HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1212   {
000002  4604              MOV      r4,r0
;;;1213     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d150              BNE      |L21.174|
;;;1214     {
;;;1215       if((pData == NULL) || (Size == 0))
00000c  b1c9              CBZ      r1,|L21.66|
00000e  b1c2              CBZ      r2,|L21.66|
;;;1216       {
;;;1217         return  HAL_ERROR;
;;;1218       }
;;;1219   
;;;1220       /* Check the parameters */
;;;1221       assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1222   
;;;1223       /* Process Locked */
;;;1224       __HAL_LOCK(hspi);
000010  f8940050          LDRB     r0,[r4,#0x50]
000014  2801              CMP      r0,#1
000016  d04a              BEQ      |L21.174|
000018  2001              MOVS     r0,#1
00001a  f8840050          STRB     r0,[r4,#0x50]
;;;1225   
;;;1226       /* Configure communication */
;;;1227       hspi->State       = HAL_SPI_STATE_BUSY_TX;
00001e  2012              MOVS     r0,#0x12
000020  f8840051          STRB     r0,[r4,#0x51]
;;;1228       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000024  2500              MOVS     r5,#0
000026  6565              STR      r5,[r4,#0x54]
;;;1229   
;;;1230       hspi->pTxBuffPtr  = pData;
;;;1231       hspi->TxXferSize  = Size;
000028  6321              STR      r1,[r4,#0x30]
00002a  86a2              STRH     r2,[r4,#0x34]
;;;1232       hspi->TxXferCount = Size;
00002c  86e2              STRH     r2,[r4,#0x36]
;;;1233   
;;;1234       /*Init field not used in handle to zero */
;;;1235       hspi->TxISR       = 0;
;;;1236       hspi->RxISR       = 0;
00002e  64e5              STR      r5,[r4,#0x4c]
;;;1237       hspi->pRxBuffPtr  = NULL;
000030  64a5              STR      r5,[r4,#0x48]
;;;1238       hspi->RxXferSize  = 0;
000032  63a5              STR      r5,[r4,#0x38]
000034  87a5              STRH     r5,[r4,#0x3c]
;;;1239       hspi->RxXferCount = 0;
000036  87e5              STRH     r5,[r4,#0x3e]
;;;1240   
;;;1241       /* Configure communication direction : 1Line */
;;;1242       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  68a0              LDR      r0,[r4,#8]
00003a  f5b04f00          CMP      r0,#0x8000
00003e  d002              BEQ      |L21.70|
000040  e006              B        |L21.80|
                  |L21.66|
000042  2001              MOVS     r0,#1                 ;1217
;;;1243       {
;;;1244         SPI_1LINE_TX(hspi);
;;;1245       }
;;;1246   
;;;1247       /* Reset CRC Calculation */
;;;1248       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1249       {
;;;1250         SPI_RESET_CRC(hspi);
;;;1251       }
;;;1252   
;;;1253       /* Set the SPI TxDMA Half transfer complete callback */
;;;1254       hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
;;;1255   
;;;1256       /* Set the SPI TxDMA transfer complete callback */
;;;1257       hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
;;;1258   
;;;1259       /* Set the DMA error callback */
;;;1260       hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1261   
;;;1262       /* Enable the Tx DMA Channel */
;;;1263       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1264   
;;;1265       /* Enable Tx DMA Request */
;;;1266       SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1267   
;;;1268       /* Process Unlocked */
;;;1269       __HAL_UNLOCK(hspi);
;;;1270   
;;;1271       /* Check if the SPI is already enabled */ 
;;;1272       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1273       {
;;;1274         /* Enable SPI peripheral */
;;;1275         __HAL_SPI_ENABLE(hspi);
;;;1276       }
;;;1277   
;;;1278       return HAL_OK;
;;;1279     }
;;;1280     else
;;;1281     {
;;;1282       return HAL_BUSY;
;;;1283     }
;;;1284   }
000044  bd70              POP      {r4-r6,pc}
                  |L21.70|
000046  6820              LDR      r0,[r4,#0]            ;1244
000048  6801              LDR      r1,[r0,#0]            ;1244
00004a  f4414180          ORR      r1,r1,#0x4000         ;1244
00004e  6001              STR      r1,[r0,#0]            ;1244
                  |L21.80|
000050  6aa0              LDR      r0,[r4,#0x28]         ;1248
000052  f5b05f00          CMP      r0,#0x2000            ;1248
000056  d109              BNE      |L21.108|
000058  6820              LDR      r0,[r4,#0]            ;1250
00005a  6801              LDR      r1,[r0,#0]            ;1250
00005c  f4215100          BIC      r1,r1,#0x2000         ;1250
000060  6001              STR      r1,[r0,#0]            ;1250
000062  6820              LDR      r0,[r4,#0]            ;1250
000064  6801              LDR      r1,[r0,#0]            ;1250
000066  f4415100          ORR      r1,r1,#0x2000         ;1250
00006a  6001              STR      r1,[r0,#0]            ;1250
                  |L21.108|
00006c  6c21              LDR      r1,[r4,#0x40]         ;1254
00006e  4811              LDR      r0,|L21.180|
000070  62c8              STR      r0,[r1,#0x2c]         ;1257
000072  6c21              LDR      r1,[r4,#0x40]         ;1257
000074  4810              LDR      r0,|L21.184|
000076  6288              STR      r0,[r1,#0x28]         ;1260
000078  6c21              LDR      r1,[r4,#0x40]         ;1260
00007a  4810              LDR      r0,|L21.188|
00007c  6308              STR      r0,[r1,#0x30]         ;1263
00007e  6822              LDR      r2,[r4,#0]            ;1263
000080  8ee3              LDRH     r3,[r4,#0x36]         ;1263
000082  320c              ADDS     r2,r2,#0xc            ;1263
000084  6b21              LDR      r1,[r4,#0x30]         ;1263
000086  6c20              LDR      r0,[r4,#0x40]         ;1263
000088  f7fffffe          BL       HAL_DMA_Start_IT
00008c  6820              LDR      r0,[r4,#0]            ;1266
00008e  6841              LDR      r1,[r0,#4]            ;1266
000090  f0410102          ORR      r1,r1,#2              ;1266
000094  6041              STR      r1,[r0,#4]            ;1266
000096  f8845050          STRB     r5,[r4,#0x50]         ;1269
00009a  6820              LDR      r0,[r4,#0]            ;1272
00009c  6801              LDR      r1,[r0,#0]            ;1272
00009e  0649              LSLS     r1,r1,#25             ;1272
0000a0  d403              BMI      |L21.170|
0000a2  6801              LDR      r1,[r0,#0]            ;1275
0000a4  f0410140          ORR      r1,r1,#0x40           ;1275
0000a8  6001              STR      r1,[r0,#0]            ;1275
                  |L21.170|
0000aa  2000              MOVS     r0,#0                 ;1278
0000ac  bd70              POP      {r4-r6,pc}
                  |L21.174|
0000ae  2002              MOVS     r0,#2                 ;1282
0000b0  bd70              POP      {r4-r6,pc}
;;;1285   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L21.180|
                          DCD      SPI_DMAHalfTransmitCplt
                  |L21.184|
                          DCD      SPI_DMATransmitCplt
                  |L21.188|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Transmit_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_IT PROC
;;;981      */
;;;982    HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b510              PUSH     {r4,lr}
;;;983    {
;;;984      if(hspi->State == HAL_SPI_STATE_READY)
000002  f8903051          LDRB     r3,[r0,#0x51]
000006  2b01              CMP      r3,#1
000008  d147              BNE      |L22.154|
;;;985      {
;;;986        if((pData == NULL) || (Size == 0))
00000a  b1d1              CBZ      r1,|L22.66|
00000c  b1ca              CBZ      r2,|L22.66|
;;;987        {
;;;988          return  HAL_ERROR;
;;;989        }
;;;990    
;;;991        /* Check the parameters */
;;;992        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;993    
;;;994        /* Process Locked */
;;;995        __HAL_LOCK(hspi);
00000e  f8903050          LDRB     r3,[r0,#0x50]
000012  2b01              CMP      r3,#1
000014  d041              BEQ      |L22.154|
000016  2301              MOVS     r3,#1
000018  f8803050          STRB     r3,[r0,#0x50]
;;;996    
;;;997        /* Configure communication */
;;;998        hspi->State        = HAL_SPI_STATE_BUSY_TX;
00001c  2312              MOVS     r3,#0x12
00001e  f8803051          STRB     r3,[r0,#0x51]
;;;999        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000022  2300              MOVS     r3,#0
000024  6543              STR      r3,[r0,#0x54]
;;;1000   
;;;1001       hspi->TxISR        = &SPI_TxISR;
000026  4c1e              LDR      r4,|L22.160|
;;;1002       hspi->pTxBuffPtr   = pData;
;;;1003       hspi->TxXferSize   = Size;
000028  64c4              STR      r4,[r0,#0x4c]
00002a  6301              STR      r1,[r0,#0x30]
00002c  8682              STRH     r2,[r0,#0x34]
;;;1004       hspi->TxXferCount  = Size;
00002e  86c2              STRH     r2,[r0,#0x36]
;;;1005   
;;;1006       /*Init field not used in handle to zero */
;;;1007       hspi->RxISR        = 0;
;;;1008       hspi->pRxBuffPtr   = NULL;
000030  6483              STR      r3,[r0,#0x48]
;;;1009       hspi->RxXferSize   = 0;
000032  6383              STR      r3,[r0,#0x38]
000034  8783              STRH     r3,[r0,#0x3c]
;;;1010       hspi->RxXferCount  = 0;
000036  87c3              STRH     r3,[r0,#0x3e]
;;;1011   
;;;1012       /* Configure communication direction : 1Line */
;;;1013       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  6881              LDR      r1,[r0,#8]
00003a  f5b14f00          CMP      r1,#0x8000
00003e  d002              BEQ      |L22.70|
000040  e006              B        |L22.80|
                  |L22.66|
000042  2001              MOVS     r0,#1                 ;988
;;;1014       {
;;;1015         SPI_1LINE_TX(hspi);
;;;1016       }
;;;1017   
;;;1018       /* Reset CRC Calculation */
;;;1019       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1020       {
;;;1021         SPI_RESET_CRC(hspi);
;;;1022       }
;;;1023   
;;;1024       if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;1025       {
;;;1026         __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
;;;1027       }
;;;1028       else
;;;1029       {
;;;1030         /* Enable TXE and ERR interrupt */
;;;1031         __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
;;;1032       }
;;;1033       /* Process Unlocked */
;;;1034       __HAL_UNLOCK(hspi);
;;;1035   
;;;1036       /* Check if the SPI is already enabled */ 
;;;1037       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1038       {
;;;1039         /* Enable SPI peripheral */
;;;1040         __HAL_SPI_ENABLE(hspi);
;;;1041       }
;;;1042   
;;;1043       return HAL_OK;
;;;1044     }
;;;1045     else
;;;1046     {
;;;1047       return HAL_BUSY;
;;;1048     }
;;;1049   }
000044  bd10              POP      {r4,pc}
                  |L22.70|
000046  6801              LDR      r1,[r0,#0]            ;1015
000048  680a              LDR      r2,[r1,#0]            ;1015
00004a  f4424280          ORR      r2,r2,#0x4000         ;1015
00004e  600a              STR      r2,[r1,#0]            ;1015
                  |L22.80|
000050  6a81              LDR      r1,[r0,#0x28]         ;1019
000052  f5b15f00          CMP      r1,#0x2000            ;1019
000056  d109              BNE      |L22.108|
000058  6801              LDR      r1,[r0,#0]            ;1021
00005a  680a              LDR      r2,[r1,#0]            ;1021
00005c  f4225200          BIC      r2,r2,#0x2000         ;1021
000060  600a              STR      r2,[r1,#0]            ;1021
000062  6801              LDR      r1,[r0,#0]            ;1021
000064  680a              LDR      r2,[r1,#0]            ;1021
000066  f4425200          ORR      r2,r2,#0x2000         ;1021
00006a  600a              STR      r2,[r1,#0]            ;1021
                  |L22.108|
00006c  6881              LDR      r1,[r0,#8]            ;1024
00006e  2900              CMP      r1,#0                 ;1024
000070  6801              LDR      r1,[r0,#0]            ;1031
000072  684a              LDR      r2,[r1,#4]            ;1031
000074  d00e              BEQ      |L22.148|
000076  f04202a0          ORR      r2,r2,#0xa0           ;1031
                  |L22.122|
00007a  604a              STR      r2,[r1,#4]            ;1031
00007c  f8803050          STRB     r3,[r0,#0x50]         ;1034
000080  6800              LDR      r0,[r0,#0]            ;1037
000082  6801              LDR      r1,[r0,#0]            ;1037
000084  0649              LSLS     r1,r1,#25             ;1037
000086  d403              BMI      |L22.144|
000088  6801              LDR      r1,[r0,#0]            ;1040
00008a  f0410140          ORR      r1,r1,#0x40           ;1040
00008e  6001              STR      r1,[r0,#0]            ;1040
                  |L22.144|
000090  2000              MOVS     r0,#0                 ;1043
000092  bd10              POP      {r4,pc}
                  |L22.148|
000094  f0420280          ORR      r2,r2,#0x80           ;1026
000098  e7ef              B        |L22.122|
                  |L22.154|
00009a  2002              MOVS     r0,#2                 ;1047
00009c  bd10              POP      {r4,pc}
;;;1050   
                          ENDP

00009e  0000              DCW      0x0000
                  |L22.160|
                          DCD      SPI_TxISR

                          AREA ||i.HAL_SPI_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxCpltCallback PROC
;;;1628     */
;;;1629   __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1630   {
;;;1631     /* Prevent unused argument(s) compilation warning */
;;;1632     UNUSED(hspi);
;;;1633     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1634               the HAL_SPI_TxCpltCallback could be implenetd in the user file
;;;1635      */
;;;1636   }
;;;1637   
                          ENDP


                          AREA ||i.HAL_SPI_TxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxHalfCpltCallback PROC
;;;1673     */
;;;1674   __weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1675   {
;;;1676     /* Prevent unused argument(s) compilation warning */
;;;1677     UNUSED(hspi);
;;;1678     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1679               the HAL_SPI_TxHalfCpltCallback could be implenetd in the user file
;;;1680      */
;;;1681   }
;;;1682   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxCpltCallback PROC
;;;1658     */
;;;1659   __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1660   {
;;;1661     /* Prevent unused argument(s) compilation warning */
;;;1662     UNUSED(hspi);
;;;1663     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1664               the HAL_SPI_TxRxCpltCallback() could be implenetd in the user file
;;;1665      */
;;;1666   }
;;;1667   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxHalfCpltCallback PROC
;;;1703     */
;;;1704   __weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1705   {
;;;1706     /* Prevent unused argument(s) compilation warning */
;;;1707     UNUSED(hspi);
;;;1708     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1709               the HAL_SPI_TxRxHalfCpltCallback() could be implenetd in the user file
;;;1710      */
;;;1711   }
;;;1712   
                          ENDP


                          AREA ||i.SPI_2LinesRxISR||, CODE, READONLY, ALIGN=1

                  SPI_2LinesRxISR PROC
;;;1973     */
;;;1974   static void SPI_2LinesRxISR(SPI_HandleTypeDef *hspi)
000000  6802              LDR      r2,[r0,#0]
;;;1975   {
;;;1976     /* Receive data in 8 Bit mode */
;;;1977     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;1978     {
;;;1979       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;1980     }
;;;1981     /* Receive data in 16 Bit mode */
;;;1982     else
;;;1983     {
;;;1984       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000002  68c3              LDR      r3,[r0,#0xc]
000004  6b81              LDR      r1,[r0,#0x38]
000006  68d2              LDR      r2,[r2,#0xc]
000008  b15b              CBZ      r3,|L27.34|
00000a  800a              STRH     r2,[r1,#0]
;;;1985       hspi->pRxBuffPtr+=2;
00000c  6b81              LDR      r1,[r0,#0x38]
00000e  1c89              ADDS     r1,r1,#2
000010  6381              STR      r1,[r0,#0x38]
                  |L27.18|
;;;1986     }
;;;1987     hspi->RxXferCount--;
000012  8fc1              LDRH     r1,[r0,#0x3e]
000014  1e49              SUBS     r1,r1,#1
000016  0409              LSLS     r1,r1,#16
000018  0c09              LSRS     r1,r1,#16
00001a  87c1              STRH     r1,[r0,#0x3e]
;;;1988   
;;;1989     if(hspi->RxXferCount==0)
00001c  d105              BNE      |L27.42|
;;;1990     {
;;;1991       SPI_RxCloseIRQHandler(hspi);
00001e  f7ffbffe          B.W      SPI_RxCloseIRQHandler
                  |L27.34|
000022  1c4b              ADDS     r3,r1,#1              ;1979
000024  6383              STR      r3,[r0,#0x38]         ;1979
000026  700a              STRB     r2,[r1,#0]            ;1979
000028  e7f3              B        |L27.18|
                  |L27.42|
;;;1992     }
;;;1993   }
00002a  4770              BX       lr
;;;1994   
                          ENDP


                          AREA ||i.SPI_DMAError||, CODE, READONLY, ALIGN=1

                  SPI_DMAError PROC
;;;2278     */
;;;2279   static void SPI_DMAError(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2280   {
;;;2281     SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2282     hspi->TxXferCount = 0;
000004  2100              MOVS     r1,#0
000006  86c1              STRH     r1,[r0,#0x36]
;;;2283     hspi->RxXferCount = 0;
000008  87c1              STRH     r1,[r0,#0x3e]
;;;2284     hspi->State= HAL_SPI_STATE_READY;
00000a  2101              MOVS     r1,#1
00000c  f8801051          STRB     r1,[r0,#0x51]
;;;2285     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
000010  6d41              LDR      r1,[r0,#0x54]
000012  f0410108          ORR      r1,r1,#8
000016  6541              STR      r1,[r0,#0x54]
;;;2286     HAL_SPI_ErrorCallback(hspi);
000018  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2287   }
00001c  bd10              POP      {r4,pc}
;;;2288   
                          ENDP


                          AREA ||i.SPI_DMAHalfReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfReceiveCplt PROC
;;;2252     */
;;;2253   static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2254   {
;;;2255     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2256   
;;;2257     HAL_SPI_RxHalfCpltCallback(hspi);
000004  f7fffffe          BL       HAL_SPI_RxHalfCpltCallback
;;;2258   }
000008  bd10              POP      {r4,pc}
;;;2259   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitCplt PROC
;;;2239     */
;;;2240   static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2241   {
;;;2242     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2243   
;;;2244     HAL_SPI_TxHalfCpltCallback(hspi);
000004  f7fffffe          BL       HAL_SPI_TxHalfCpltCallback
;;;2245   }
000008  bd10              POP      {r4,pc}
;;;2246   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitReceiveCplt PROC
;;;2265     */
;;;2266   static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
000000  b510              PUSH     {r4,lr}
;;;2267   {
;;;2268     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2269   
;;;2270     HAL_SPI_TxRxHalfCpltCallback(hspi);
000004  f7fffffe          BL       HAL_SPI_TxRxHalfCpltCallback
;;;2271   }
000008  bd10              POP      {r4,pc}
;;;2272   
                          ENDP


                          AREA ||i.SPI_DMAReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAReceiveCplt PROC
;;;2083     */
;;;2084   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b538              PUSH     {r3-r5,lr}
;;;2085   {
;;;2086     __IO uint16_t tmpreg = 0;
000002  2500              MOVS     r5,#0
000004  f8ad5000          STRH     r5,[sp,#0]
;;;2087     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;2088   
;;;2089     /* DMA Normal mode */
;;;2090     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000008  6a44              LDR      r4,[r0,#0x24]
00000a  6800              LDR      r0,[r0,#0]
00000c  6800              LDR      r0,[r0,#0]
00000e  0680              LSLS     r0,r0,#26
000010  d45f              BMI      |L32.210|
;;;2091     {
;;;2092       /* Disable Rx DMA Request */
;;;2093       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000012  6820              LDR      r0,[r4,#0]
000014  6841              LDR      r1,[r0,#4]
000016  f0210101          BIC      r1,r1,#1
00001a  6041              STR      r1,[r0,#4]
;;;2094   
;;;2095       /* Disable Tx DMA Request (done by default to handle the case Master RX direction 2 lines) */
;;;2096       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00001c  6820              LDR      r0,[r4,#0]
00001e  6841              LDR      r1,[r0,#4]
000020  f0210102          BIC      r1,r1,#2
000024  6041              STR      r1,[r0,#4]
;;;2097   
;;;2098       /* CRC Calculation handling */
;;;2099       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000026  6aa0              LDR      r0,[r4,#0x28]
000028  f5b05f00          CMP      r0,#0x2000
00002c  d137              BNE      |L32.158|
;;;2100       {
;;;2101         /* Wait until RXNE flag is set (CRC ready) */
;;;2102         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00002e  230a              MOVS     r3,#0xa
000030  2200              MOVS     r2,#0
000032  2101              MOVS     r1,#1
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00003a  b118              CBZ      r0,|L32.68|
;;;2103         {
;;;2104           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00003c  6d60              LDR      r0,[r4,#0x54]
00003e  f0400010          ORR      r0,r0,#0x10
000042  6560              STR      r0,[r4,#0x54]
                  |L32.68|
;;;2105         }
;;;2106   
;;;2107         /* Read CRC */
;;;2108         tmpreg = hspi->Instance->DR;
000044  6820              LDR      r0,[r4,#0]
000046  68c0              LDR      r0,[r0,#0xc]
000048  f8ad0000          STRH     r0,[sp,#0]
;;;2109         UNUSED(tmpreg);
00004c  f8bd0000          LDRH     r0,[sp,#0]
;;;2110   
;;;2111         /* Wait until RXNE flag is reset */
;;;2112         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000050  2201              MOVS     r2,#1
000052  230a              MOVS     r3,#0xa
000054  4611              MOV      r1,r2
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00005c  b118              CBZ      r0,|L32.102|
;;;2113         {
;;;2114           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00005e  6d60              LDR      r0,[r4,#0x54]
000060  f0400010          ORR      r0,r0,#0x10
000064  6560              STR      r0,[r4,#0x54]
                  |L32.102|
;;;2115         }
;;;2116   
;;;2117         /* Check if CRC error occurred */
;;;2118         if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000066  6820              LDR      r0,[r4,#0]
000068  6880              LDR      r0,[r0,#8]
00006a  43c0              MVNS     r0,r0
00006c  06c0              LSLS     r0,r0,#27
00006e  d416              BMI      |L32.158|
;;;2119         {
;;;2120           /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;2121           if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR) 
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       SPI_ISCRCErrorValid
000076  2801              CMP      r0,#1
000078  d10d              BNE      |L32.150|
;;;2122           {
;;;2123             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
00007a  6d60              LDR      r0,[r4,#0x54]
00007c  f0400002          ORR      r0,r0,#2
000080  6560              STR      r0,[r4,#0x54]
;;;2124             
;;;2125             /* Reset CRC Calculation */
;;;2126             SPI_RESET_CRC(hspi);
000082  6820              LDR      r0,[r4,#0]
000084  6801              LDR      r1,[r0,#0]
000086  f4215100          BIC      r1,r1,#0x2000
00008a  6001              STR      r1,[r0,#0]
00008c  6820              LDR      r0,[r4,#0]
00008e  6801              LDR      r1,[r0,#0]
000090  f4415100          ORR      r1,r1,#0x2000
000094  6001              STR      r1,[r0,#0]
                  |L32.150|
;;;2127           }
;;;2128           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000096  6821              LDR      r1,[r4,#0]
000098  f06f0010          MVN      r0,#0x10
00009c  6088              STR      r0,[r1,#8]
                  |L32.158|
;;;2129         }
;;;2130       }
;;;2131   
;;;2132       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
00009e  6860              LDR      r0,[r4,#4]
0000a0  f5b07f82          CMP      r0,#0x104
0000a4  d10b              BNE      |L32.190|
0000a6  68a0              LDR      r0,[r4,#8]
0000a8  f5b04f00          CMP      r0,#0x8000
0000ac  d002              BEQ      |L32.180|
0000ae  f5b06f80          CMP      r0,#0x400
0000b2  d104              BNE      |L32.190|
                  |L32.180|
;;;2133       {
;;;2134         /* Disable SPI peripheral */
;;;2135         __HAL_SPI_DISABLE(hspi);
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6801              LDR      r1,[r0,#0]
0000b8  f0210140          BIC      r1,r1,#0x40
0000bc  6001              STR      r1,[r0,#0]
                  |L32.190|
;;;2136       }
;;;2137   
;;;2138       hspi->RxXferCount = 0;
0000be  87e5              STRH     r5,[r4,#0x3e]
;;;2139       hspi->State = HAL_SPI_STATE_READY;
0000c0  2001              MOVS     r0,#1
0000c2  f8840051          STRB     r0,[r4,#0x51]
;;;2140   
;;;2141       /* Check if Errors has been detected during transfer */
;;;2142       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000c6  6d60              LDR      r0,[r4,#0x54]
0000c8  b118              CBZ      r0,|L32.210|
;;;2143       {
;;;2144         HAL_SPI_ErrorCallback(hspi);
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2145       }
;;;2146       else
;;;2147       {
;;;2148         HAL_SPI_RxCpltCallback(hspi);
;;;2149       }
;;;2150     }
;;;2151     else
;;;2152     {
;;;2153       HAL_SPI_RxCpltCallback(hspi);
;;;2154     }
;;;2155   }
0000d0  bd38              POP      {r3-r5,pc}
                  |L32.210|
0000d2  4620              MOV      r0,r4                 ;2153
0000d4  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000d8  bd38              POP      {r3-r5,pc}
;;;2156   
                          ENDP


                          AREA ||i.SPI_DMATransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitCplt PROC
;;;2034     */
;;;2035   static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000000  b538              PUSH     {r3-r5,lr}
;;;2036   {
;;;2037     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;2038   
;;;2039     /* DMA Normal Mode */
;;;2040     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000002  6a44              LDR      r4,[r0,#0x24]
000004  6800              LDR      r0,[r0,#0]
000006  6800              LDR      r0,[r0,#0]
000008  0680              LSLS     r0,r0,#26
00000a  d41f              BMI      |L33.76|
;;;2041     {
;;;2042       /* Wait until TXE flag is set to send data */
;;;2043       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00000c  230a              MOVS     r3,#0xa
00000e  2200              MOVS     r2,#0
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000018  b118              CBZ      r0,|L33.34|
;;;2044       {
;;;2045         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00001a  6d60              LDR      r0,[r4,#0x54]
00001c  f0400010          ORR      r0,r0,#0x10
000020  6560              STR      r0,[r4,#0x54]
                  |L33.34|
;;;2046       }
;;;2047   
;;;2048       /* Disable Tx DMA Request */
;;;2049       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000022  6820              LDR      r0,[r4,#0]
000024  6841              LDR      r1,[r0,#4]
000026  f0210102          BIC      r1,r1,#2
00002a  6041              STR      r1,[r0,#4]
;;;2050   
;;;2051       /* Wait until Busy flag is reset before disabling SPI */
;;;2052       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
00002c  230a              MOVS     r3,#0xa
00002e  2201              MOVS     r2,#1
000030  2180              MOVS     r1,#0x80
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000038  b118              CBZ      r0,|L33.66|
;;;2053       {
;;;2054         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00003a  6d60              LDR      r0,[r4,#0x54]
00003c  f0400010          ORR      r0,r0,#0x10
000040  6560              STR      r0,[r4,#0x54]
                  |L33.66|
;;;2055       }
;;;2056   
;;;2057       hspi->TxXferCount = 0;
000042  2000              MOVS     r0,#0
000044  86e0              STRH     r0,[r4,#0x36]
;;;2058       hspi->State = HAL_SPI_STATE_READY;
000046  2001              MOVS     r0,#1
000048  f8840051          STRB     r0,[r4,#0x51]
                  |L33.76|
;;;2059     }
;;;2060   
;;;2061     /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;2062     if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
00004c  68a0              LDR      r0,[r4,#8]
00004e  b918              CBNZ     r0,|L33.88|
;;;2063     {
;;;2064       __HAL_SPI_CLEAR_OVRFLAG(hspi);
000050  6820              LDR      r0,[r4,#0]
000052  68c1              LDR      r1,[r0,#0xc]
000054  6880              LDR      r0,[r0,#8]
000056  9000              STR      r0,[sp,#0]
                  |L33.88|
;;;2065     }
;;;2066   
;;;2067     /* Check if Errors has been detected during transfer */
;;;2068     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
000058  6d60              LDR      r0,[r4,#0x54]
00005a  2800              CMP      r0,#0
;;;2069     {
;;;2070       HAL_SPI_ErrorCallback(hspi);
;;;2071     }
;;;2072     else
;;;2073     {
;;;2074       HAL_SPI_TxCpltCallback(hspi);
00005c  4620              MOV      r0,r4
00005e  d002              BEQ      |L33.102|
000060  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2075     }
;;;2076   }
000064  bd38              POP      {r3-r5,pc}
                  |L33.102|
000066  f7fffffe          BL       HAL_SPI_TxCpltCallback
00006a  bd38              POP      {r3-r5,pc}
;;;2077   
                          ENDP


                          AREA ||i.SPI_DMATransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitReceiveCplt PROC
;;;2162     */
;;;2163   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
000000  b538              PUSH     {r3-r5,lr}
;;;2164   {
;;;2165     __IO uint16_t tmpreg = 0;
000002  2500              MOVS     r5,#0
000004  f8ad5000          STRH     r5,[sp,#0]
;;;2166   
;;;2167     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;2168   
;;;2169     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000008  6a44              LDR      r4,[r0,#0x24]
00000a  6800              LDR      r0,[r0,#0]
00000c  6800              LDR      r0,[r0,#0]
00000e  0680              LSLS     r0,r0,#26
000010  d451              BMI      |L34.182|
;;;2170     {
;;;2171       /* CRC Calculation handling */
;;;2172       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000012  6aa0              LDR      r0,[r4,#0x28]
000014  f5b05f00          CMP      r0,#0x2000
000018  d122              BNE      |L34.96|
;;;2173       {
;;;2174         /* Check if CRC is done on going (RXNE flag set) */
;;;2175         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) == HAL_OK)
00001a  2201              MOVS     r2,#1
00001c  230a              MOVS     r3,#0xa
00001e  4611              MOV      r1,r2
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000026  b950              CBNZ     r0,|L34.62|
;;;2176         {
;;;2177           /* Wait until RXNE flag is set to send data */
;;;2178           if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000028  230a              MOVS     r3,#0xa
00002a  2200              MOVS     r2,#0
00002c  2101              MOVS     r1,#1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000034  b118              CBZ      r0,|L34.62|
;;;2179           {
;;;2180             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000036  6d60              LDR      r0,[r4,#0x54]
000038  f0400010          ORR      r0,r0,#0x10
00003c  6560              STR      r0,[r4,#0x54]
                  |L34.62|
;;;2181           }
;;;2182         }
;;;2183         /* Read CRC */
;;;2184         tmpreg = hspi->Instance->DR;
00003e  6820              LDR      r0,[r4,#0]
000040  68c1              LDR      r1,[r0,#0xc]
000042  f8ad1000          STRH     r1,[sp,#0]
;;;2185         UNUSED(tmpreg);
000046  f8bd1000          LDRH     r1,[sp,#0]
;;;2186   
;;;2187         /* Check if CRC error occurred */
;;;2188         if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00004a  6881              LDR      r1,[r0,#8]
00004c  43c9              MVNS     r1,r1
00004e  06c9              LSLS     r1,r1,#27
000050  d406              BMI      |L34.96|
;;;2189         {
;;;2190           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000052  6d61              LDR      r1,[r4,#0x54]
000054  f0410102          ORR      r1,r1,#2
000058  6561              STR      r1,[r4,#0x54]
;;;2191           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
00005a  f06f0110          MVN      r1,#0x10
00005e  6081              STR      r1,[r0,#8]
                  |L34.96|
;;;2192         }
;;;2193       }
;;;2194   
;;;2195       /* Wait until TXE flag is set to send data */
;;;2196       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000060  230a              MOVS     r3,#0xa
000062  2200              MOVS     r2,#0
000064  2102              MOVS     r1,#2
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00006c  b118              CBZ      r0,|L34.118|
;;;2197       {
;;;2198         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00006e  6d60              LDR      r0,[r4,#0x54]
000070  f0400010          ORR      r0,r0,#0x10
000074  6560              STR      r0,[r4,#0x54]
                  |L34.118|
;;;2199       }
;;;2200     
;;;2201       /* Disable Tx DMA Request */
;;;2202       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000076  6820              LDR      r0,[r4,#0]
000078  6841              LDR      r1,[r0,#4]
00007a  f0210102          BIC      r1,r1,#2
00007e  6041              STR      r1,[r0,#4]
;;;2203   
;;;2204       /* Wait until Busy flag is reset before disabling SPI */
;;;2205       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000080  230a              MOVS     r3,#0xa
000082  2201              MOVS     r2,#1
000084  2180              MOVS     r1,#0x80
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00008c  b118              CBZ      r0,|L34.150|
;;;2206       {
;;;2207         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00008e  6d60              LDR      r0,[r4,#0x54]
000090  f0400010          ORR      r0,r0,#0x10
000094  6560              STR      r0,[r4,#0x54]
                  |L34.150|
;;;2208       }
;;;2209   
;;;2210       /* Disable Rx DMA Request */
;;;2211       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000096  6820              LDR      r0,[r4,#0]
000098  6841              LDR      r1,[r0,#4]
00009a  f0210101          BIC      r1,r1,#1
00009e  6041              STR      r1,[r0,#4]
;;;2212   
;;;2213       hspi->TxXferCount = 0;
0000a0  86e5              STRH     r5,[r4,#0x36]
;;;2214       hspi->RxXferCount = 0;
0000a2  87e5              STRH     r5,[r4,#0x3e]
;;;2215   
;;;2216       hspi->State = HAL_SPI_STATE_READY;
0000a4  2001              MOVS     r0,#1
0000a6  f8840051          STRB     r0,[r4,#0x51]
;;;2217   
;;;2218       /* Check if Errors has been detected during transfer */
;;;2219       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000aa  6d60              LDR      r0,[r4,#0x54]
0000ac  b118              CBZ      r0,|L34.182|
;;;2220       {
;;;2221         HAL_SPI_ErrorCallback(hspi);
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2222       }
;;;2223       else
;;;2224       {
;;;2225         HAL_SPI_TxRxCpltCallback(hspi);
;;;2226       }
;;;2227     }
;;;2228     else
;;;2229     {
;;;2230       HAL_SPI_TxRxCpltCallback(hspi);
;;;2231     }
;;;2232   }
0000b4  bd38              POP      {r3-r5,pc}
                  |L34.182|
0000b6  4620              MOV      r0,r4                 ;2230
0000b8  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0000bc  bd38              POP      {r3-r5,pc}
;;;2233   
                          ENDP


                          AREA ||i.SPI_ISCRCErrorValid||, CODE, READONLY, ALIGN=1

                  SPI_ISCRCErrorValid PROC
;;;2391   */
;;;2392   __weak uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
000000  2001              MOVS     r0,#1
;;;2393   {
;;;2394     return (SPI_VALID_CRC_ERROR);
;;;2395   }
000002  4770              BX       lr
;;;2396   /**
                          ENDP


                          AREA ||i.SPI_RxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_RxCloseIRQHandler PROC
;;;1884     */
;;;1885   static void SPI_RxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;1886   {
000002  4604              MOV      r4,r0
;;;1887     __IO uint16_t tmpreg = 0;
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;1888   
;;;1889     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00000a  6aa0              LDR      r0,[r4,#0x28]
00000c  f5b05f00          CMP      r0,#0x2000
000010  d12d              BNE      |L36.110|
;;;1890     {
;;;1891       /* Wait until RXNE flag is set to read CRC data */
;;;1892       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000012  230a              MOVS     r3,#0xa
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00001e  b118              CBZ      r0,|L36.40|
;;;1893       {
;;;1894         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000020  6d60              LDR      r0,[r4,#0x54]
000022  f0400010          ORR      r0,r0,#0x10
000026  6560              STR      r0,[r4,#0x54]
                  |L36.40|
;;;1895       }
;;;1896   
;;;1897       /* Read CRC to reset RXNE flag */
;;;1898       tmpreg = hspi->Instance->DR;
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  f8ad0000          STRH     r0,[sp,#0]
;;;1899       UNUSED(tmpreg);
000030  f8bd0000          LDRH     r0,[sp,#0]
;;;1900   
;;;1901       /* Wait until RXNE flag is reset */
;;;1902       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000034  2201              MOVS     r2,#1
000036  230a              MOVS     r3,#0xa
000038  4611              MOV      r1,r2
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000040  b118              CBZ      r0,|L36.74|
;;;1903       {
;;;1904         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000042  6d60              LDR      r0,[r4,#0x54]
000044  f0400010          ORR      r0,r0,#0x10
000048  6560              STR      r0,[r4,#0x54]
                  |L36.74|
;;;1905       }
;;;1906   
;;;1907       /* Check if CRC error occurred */
;;;1908       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00004a  6820              LDR      r0,[r4,#0]
00004c  6880              LDR      r0,[r0,#8]
00004e  43c0              MVNS     r0,r0
000050  06c0              LSLS     r0,r0,#27
000052  d40c              BMI      |L36.110|
;;;1909       {
;;;1910         /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;1911         if (   (hspi->State != HAL_SPI_STATE_BUSY_RX)
000054  f8940051          LDRB     r0,[r4,#0x51]
000058  2822              CMP      r0,#0x22
00005a  d11b              BNE      |L36.148|
;;;1912             || (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR) )
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       SPI_ISCRCErrorValid
000062  2801              CMP      r0,#1
000064  d016              BEQ      |L36.148|
;;;1913         {
;;;1914           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;1915   
;;;1916           /* Reset CRC Calculation */
;;;1917           SPI_RESET_CRC(hspi);
;;;1918         }
;;;1919         else
;;;1920         {
;;;1921           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000066  6821              LDR      r1,[r4,#0]
000068  f06f0010          MVN      r0,#0x10
00006c  6088              STR      r0,[r1,#8]
                  |L36.110|
;;;1922         }
;;;1923       }
;;;1924     }
;;;1925   
;;;1926     /* Disable RXNE interrupt */
;;;1927     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE));
00006e  6820              LDR      r0,[r4,#0]
000070  6841              LDR      r1,[r0,#4]
000072  f0210140          BIC      r1,r1,#0x40
000076  6041              STR      r1,[r0,#4]
;;;1928   
;;;1929     /* if Transmit process is finished */
;;;1930     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) == RESET)
000078  6820              LDR      r0,[r4,#0]
00007a  6841              LDR      r1,[r0,#4]
00007c  43c9              MVNS     r1,r1
00007e  0609              LSLS     r1,r1,#24
000080  d52b              BPL      |L36.218|
;;;1931     {
;;;1932       /* Disable ERR interrupt */
;;;1933       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000082  6841              LDR      r1,[r0,#4]
000084  f0210120          BIC      r1,r1,#0x20
000088  6041              STR      r1,[r0,#4]
;;;1934   
;;;1935       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
00008a  6860              LDR      r0,[r4,#4]
00008c  f5b07f82          CMP      r0,#0x104
000090  d00f              BEQ      |L36.178|
000092  e01a              B        |L36.202|
                  |L36.148|
000094  6d60              LDR      r0,[r4,#0x54]         ;1914
000096  f0400002          ORR      r0,r0,#2              ;1914
00009a  6560              STR      r0,[r4,#0x54]         ;1914
00009c  6820              LDR      r0,[r4,#0]            ;1917
00009e  6801              LDR      r1,[r0,#0]            ;1917
0000a0  f4215100          BIC      r1,r1,#0x2000         ;1917
0000a4  6001              STR      r1,[r0,#0]            ;1917
0000a6  6820              LDR      r0,[r4,#0]            ;1917
0000a8  6801              LDR      r1,[r0,#0]            ;1917
0000aa  f4415100          ORR      r1,r1,#0x2000         ;1917
0000ae  6001              STR      r1,[r0,#0]            ;1917
0000b0  e7dd              B        |L36.110|
                  |L36.178|
0000b2  68a0              LDR      r0,[r4,#8]
0000b4  f5b04f00          CMP      r0,#0x8000
0000b8  d002              BEQ      |L36.192|
0000ba  f5b06f80          CMP      r0,#0x400
0000be  d104              BNE      |L36.202|
                  |L36.192|
;;;1936       {
;;;1937         /* Disable SPI peripheral */
;;;1938         __HAL_SPI_DISABLE(hspi);
0000c0  6820              LDR      r0,[r4,#0]
0000c2  6801              LDR      r1,[r0,#0]
0000c4  f0210140          BIC      r1,r1,#0x40
0000c8  6001              STR      r1,[r0,#0]
                  |L36.202|
;;;1939       }
;;;1940       
;;;1941       /* Check if Errors has been detected during transfer */
;;;1942       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
0000ca  6d61              LDR      r1,[r4,#0x54]
0000cc  2001              MOVS     r0,#1                 ;1892
0000ce  b129              CBZ      r1,|L36.220|
;;;1943       {
;;;1944         /* Check if we are in Rx or in Rx/Tx Mode */
;;;1945         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1946         {
;;;1947           /* Set state to READY before run the Callback Complete */
;;;1948           hspi->State = HAL_SPI_STATE_READY;
;;;1949           HAL_SPI_TxRxCpltCallback(hspi);
;;;1950         }
;;;1951         else
;;;1952         {
;;;1953           /* Set state to READY before run the Callback Complete */
;;;1954           hspi->State = HAL_SPI_STATE_READY;
;;;1955           HAL_SPI_RxCpltCallback(hspi);
;;;1956         }
;;;1957       }
;;;1958       else
;;;1959       {
;;;1960         /* Set state to READY before run the Callback Complete */
;;;1961         hspi->State = HAL_SPI_STATE_READY;
0000d0  f8840051          STRB     r0,[r4,#0x51]
;;;1962         /* Call Error call back in case of Error */
;;;1963         HAL_SPI_ErrorCallback(hspi);
0000d4  4620              MOV      r0,r4
0000d6  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L36.218|
;;;1964       }
;;;1965     }
;;;1966   }
0000da  bd38              POP      {r3-r5,pc}
                  |L36.220|
0000dc  f8941051          LDRB     r1,[r4,#0x51]         ;1945
0000e0  f8840051          STRB     r0,[r4,#0x51]         ;1954
0000e4  2932              CMP      r1,#0x32              ;1945
0000e6  4620              MOV      r0,r4                 ;1955
0000e8  d002              BEQ      |L36.240|
0000ea  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000ee  bd38              POP      {r3-r5,pc}
                  |L36.240|
0000f0  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0000f4  bd38              POP      {r3-r5,pc}
;;;1967   
                          ENDP


                          AREA ||i.SPI_RxISR||, CODE, READONLY, ALIGN=1

                  SPI_RxISR PROC
;;;2000     */
;;;2001   static void SPI_RxISR(SPI_HandleTypeDef *hspi)
000000  6802              LDR      r2,[r0,#0]
;;;2002   {
;;;2003     /* Receive data in 8 Bit mode */
;;;2004     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;2005     {
;;;2006       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;2007     }
;;;2008     /* Receive data in 16 Bit mode */
;;;2009     else
;;;2010     {
;;;2011       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000002  68c3              LDR      r3,[r0,#0xc]
000004  6b81              LDR      r1,[r0,#0x38]
000006  68d2              LDR      r2,[r2,#0xc]
000008  b153              CBZ      r3,|L37.32|
00000a  800a              STRH     r2,[r1,#0]
;;;2012       hspi->pRxBuffPtr+=2;
00000c  6b81              LDR      r1,[r0,#0x38]
00000e  1c89              ADDS     r1,r1,#2
000010  6381              STR      r1,[r0,#0x38]
                  |L37.18|
;;;2013     }
;;;2014       hspi->RxXferCount--;
000012  8fc1              LDRH     r1,[r0,#0x3e]
000014  1e49              SUBS     r1,r1,#1
000016  b289              UXTH     r1,r1
000018  87c1              STRH     r1,[r0,#0x3e]
;;;2015   
;;;2016     /* Enable CRC Transmission */
;;;2017     if((hspi->RxXferCount == 1) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
00001a  2901              CMP      r1,#1
00001c  d004              BEQ      |L37.40|
00001e  e00c              B        |L37.58|
                  |L37.32|
000020  1c4b              ADDS     r3,r1,#1              ;2006
000022  6383              STR      r3,[r0,#0x38]         ;2006
000024  700a              STRB     r2,[r1,#0]            ;2006
000026  e7f4              B        |L37.18|
                  |L37.40|
000028  6a81              LDR      r1,[r0,#0x28]
00002a  f5b15f00          CMP      r1,#0x2000
00002e  d109              BNE      |L37.68|
;;;2018     {
;;;2019       /* Set CRC Next to calculate CRC on Rx side */
;;;2020       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000030  6801              LDR      r1,[r0,#0]
000032  680a              LDR      r2,[r1,#0]
000034  f4425280          ORR      r2,r2,#0x1000
000038  600a              STR      r2,[r1,#0]
                  |L37.58|
;;;2021     }
;;;2022   
;;;2023     if(hspi->RxXferCount == 0)
00003a  8fc1              LDRH     r1,[r0,#0x3e]
00003c  2900              CMP      r1,#0
00003e  d101              BNE      |L37.68|
;;;2024     {
;;;2025       SPI_RxCloseIRQHandler(hspi);
000040  f7ffbffe          B.W      SPI_RxCloseIRQHandler
                  |L37.68|
;;;2026     }
;;;2027   }
000044  4770              BX       lr
;;;2028   
                          ENDP


                          AREA ||i.SPI_TxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_TxCloseIRQHandler PROC
;;;1791     */
;;;1792   static void SPI_TxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;1793   {
000002  4604              MOV      r4,r0
;;;1794     /* Wait until TXE flag is set to send data */
;;;1795     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000004  230a              MOVS     r3,#0xa
000006  2200              MOVS     r2,#0
000008  2102              MOVS     r1,#2
00000a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00000e  b118              CBZ      r0,|L38.24|
;;;1796     {
;;;1797       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000010  6d60              LDR      r0,[r4,#0x54]
000012  f0400010          ORR      r0,r0,#0x10
000016  6560              STR      r0,[r4,#0x54]
                  |L38.24|
;;;1798     }
;;;1799   
;;;1800     /* Disable TXE interrupt */
;;;1801     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE));
000018  6820              LDR      r0,[r4,#0]
00001a  6841              LDR      r1,[r0,#4]
00001c  f0210180          BIC      r1,r1,#0x80
000020  6041              STR      r1,[r0,#4]
;;;1802   
;;;1803     /* Disable ERR interrupt if Receive process is finished */
;;;1804     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) == RESET)
000022  6820              LDR      r0,[r4,#0]
000024  6841              LDR      r1,[r0,#4]
000026  43c9              MVNS     r1,r1
000028  0649              LSLS     r1,r1,#25
00002a  d51c              BPL      |L38.102|
;;;1805     {
;;;1806       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
00002c  6841              LDR      r1,[r0,#4]
00002e  f0210120          BIC      r1,r1,#0x20
000032  6041              STR      r1,[r0,#4]
;;;1807   
;;;1808       /* Wait until Busy flag is reset before disabling SPI */
;;;1809       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000034  230a              MOVS     r3,#0xa
000036  2201              MOVS     r2,#1
000038  2180              MOVS     r1,#0x80
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000040  b118              CBZ      r0,|L38.74|
;;;1810       {
;;;1811         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000042  6d60              LDR      r0,[r4,#0x54]
000044  f0400010          ORR      r0,r0,#0x10
000048  6560              STR      r0,[r4,#0x54]
                  |L38.74|
;;;1812       }
;;;1813   
;;;1814       /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;1815       if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
00004a  68a0              LDR      r0,[r4,#8]
00004c  b918              CBNZ     r0,|L38.86|
;;;1816       {
;;;1817         __HAL_SPI_CLEAR_OVRFLAG(hspi);
00004e  6820              LDR      r0,[r4,#0]
000050  68c1              LDR      r1,[r0,#0xc]
000052  6880              LDR      r0,[r0,#8]
000054  9000              STR      r0,[sp,#0]
                  |L38.86|
;;;1818       }
;;;1819       
;;;1820       /* Check if Errors has been detected during transfer */
;;;1821       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
000056  6d61              LDR      r1,[r4,#0x54]
000058  2001              MOVS     r0,#1                 ;1809
00005a  b129              CBZ      r1,|L38.104|
;;;1822       {
;;;1823         /* Check if we are in Tx or in Rx/Tx Mode */
;;;1824         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1825         {
;;;1826           /* Set state to READY before run the Callback Complete */
;;;1827           hspi->State = HAL_SPI_STATE_READY;
;;;1828           HAL_SPI_TxRxCpltCallback(hspi);
;;;1829         }
;;;1830         else
;;;1831         {
;;;1832           /* Set state to READY before run the Callback Complete */
;;;1833           hspi->State = HAL_SPI_STATE_READY;
;;;1834           HAL_SPI_TxCpltCallback(hspi);
;;;1835         }
;;;1836       }
;;;1837       else
;;;1838       {
;;;1839         /* Set state to READY before run the Callback Complete */
;;;1840         hspi->State = HAL_SPI_STATE_READY;
00005c  f8840051          STRB     r0,[r4,#0x51]
;;;1841         /* Call Error call back in case of Error */
;;;1842         HAL_SPI_ErrorCallback(hspi);
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L38.102|
;;;1843       }
;;;1844     }
;;;1845   }
000066  bd38              POP      {r3-r5,pc}
                  |L38.104|
000068  f8941051          LDRB     r1,[r4,#0x51]         ;1824
00006c  f8840051          STRB     r0,[r4,#0x51]         ;1833
000070  2932              CMP      r1,#0x32              ;1824
000072  4620              MOV      r0,r4                 ;1834
000074  d002              BEQ      |L38.124|
000076  f7fffffe          BL       HAL_SPI_TxCpltCallback
00007a  bd38              POP      {r3-r5,pc}
                  |L38.124|
00007c  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
000080  bd38              POP      {r3-r5,pc}
;;;1846   
                          ENDP


                          AREA ||i.SPI_TxISR||, CODE, READONLY, ALIGN=1

                  SPI_TxISR PROC
;;;1852     */
;;;1853   static void SPI_TxISR(SPI_HandleTypeDef *hspi)
000000  68c3              LDR      r3,[r0,#0xc]
;;;1854   {
000002  6802              LDR      r2,[r0,#0]
000004  6b01              LDR      r1,[r0,#0x30]
000006  b17b              CBZ      r3,|L39.40|
;;;1855     /* Transmit data in 8 Bit mode */
;;;1856     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;1857     {
;;;1858       hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;1859     }
;;;1860     /* Transmit data in 16 Bit mode */
;;;1861     else
;;;1862     {
;;;1863       hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
000008  8809              LDRH     r1,[r1,#0]
00000a  60d1              STR      r1,[r2,#0xc]
;;;1864       hspi->pTxBuffPtr+=2;
00000c  6b01              LDR      r1,[r0,#0x30]
00000e  1c89              ADDS     r1,r1,#2
000010  6301              STR      r1,[r0,#0x30]
                  |L39.18|
;;;1865     }
;;;1866     hspi->TxXferCount--;
000012  8ec1              LDRH     r1,[r0,#0x36]
000014  1e49              SUBS     r1,r1,#1
000016  0409              LSLS     r1,r1,#16
000018  0c09              LSRS     r1,r1,#16
00001a  86c1              STRH     r1,[r0,#0x36]
;;;1867   
;;;1868     if(hspi->TxXferCount == 0)
00001c  d110              BNE      |L39.64|
;;;1869     {
;;;1870       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00001e  6a81              LDR      r1,[r0,#0x28]
000020  f5b15f00          CMP      r1,#0x2000
000024  d005              BEQ      |L39.50|
000026  e009              B        |L39.60|
                  |L39.40|
000028  1c4b              ADDS     r3,r1,#1              ;1858
00002a  6303              STR      r3,[r0,#0x30]         ;1858
00002c  7809              LDRB     r1,[r1,#0]            ;1858
00002e  60d1              STR      r1,[r2,#0xc]          ;1858
000030  e7ef              B        |L39.18|
                  |L39.50|
;;;1871       {
;;;1872         /* calculate and transfer CRC on Tx line */
;;;1873         SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000032  6801              LDR      r1,[r0,#0]
000034  680a              LDR      r2,[r1,#0]
000036  f4425280          ORR      r2,r2,#0x1000
00003a  600a              STR      r2,[r1,#0]
                  |L39.60|
;;;1874       }
;;;1875       SPI_TxCloseIRQHandler(hspi);
00003c  f7ffbffe          B.W      SPI_TxCloseIRQHandler
                  |L39.64|
;;;1876     }
;;;1877   }
000040  4770              BX       lr
;;;1878   
                          ENDP


                          AREA ||i.SPI_WaitOnFlagUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitOnFlagUntilTimeout PROC
;;;2297     */
;;;2298   static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2299   {
000004  461d              MOV      r5,r3
000006  4690              MOV      r8,r2
000008  460e              MOV      r6,r1
00000a  4604              MOV      r4,r0
;;;2300     uint32_t tickstart = 0;
;;;2301   
;;;2302     /* Get tick */ 
;;;2303     tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4607              MOV      r7,r0
;;;2304   
;;;2305     /* Wait until flag is set */
;;;2306     if(Status == RESET)
000012  ea5f0008          MOVS     r0,r8
000016  f04f0800          MOV      r8,#0
;;;2307     {
;;;2308       while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
;;;2309       {
;;;2310         if(Timeout != HAL_MAX_DELAY)
;;;2311         {
;;;2312           if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
;;;2313           {
;;;2314             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2315                on both master and slave sides in order to resynchronize the master
;;;2316                and slave for their respective CRC calculation */
;;;2317   
;;;2318             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2319             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2320   
;;;2321             /* Disable SPI peripheral */
;;;2322             __HAL_SPI_DISABLE(hspi);
;;;2323   
;;;2324             /* Reset CRC Calculation */
;;;2325             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00001a  f44f5a00          MOV      r10,#0x2000
;;;2326             {
;;;2327               SPI_RESET_CRC(hspi);
;;;2328             }
;;;2329   
;;;2330             hspi->State= HAL_SPI_STATE_READY;
00001e  f04f0901          MOV      r9,#1
000022  d026              BEQ      |L40.114|
000024  e034              B        |L40.144|
                  |L40.38|
000026  1c68              ADDS     r0,r5,#1              ;2310
000028  d023              BEQ      |L40.114|
00002a  b125              CBZ      r5,|L40.54|
00002c  f7fffffe          BL       HAL_GetTick
000030  1bc0              SUBS     r0,r0,r7              ;2312
000032  42a8              CMP      r0,r5                 ;2312
000034  d91d              BLS      |L40.114|
                  |L40.54|
000036  6820              LDR      r0,[r4,#0]            ;2319
000038  6841              LDR      r1,[r0,#4]            ;2319
00003a  f02101e0          BIC      r1,r1,#0xe0           ;2319
00003e  6041              STR      r1,[r0,#4]            ;2319
000040  6820              LDR      r0,[r4,#0]            ;2322
000042  6801              LDR      r1,[r0,#0]            ;2322
000044  f0210140          BIC      r1,r1,#0x40           ;2322
000048  6001              STR      r1,[r0,#0]            ;2322
00004a  6aa0              LDR      r0,[r4,#0x28]         ;2325
00004c  4550              CMP      r0,r10                ;2325
00004e  d109              BNE      |L40.100|
000050  6820              LDR      r0,[r4,#0]            ;2327
000052  6801              LDR      r1,[r0,#0]            ;2327
000054  f4215100          BIC      r1,r1,#0x2000         ;2327
000058  6001              STR      r1,[r0,#0]            ;2327
00005a  6820              LDR      r0,[r4,#0]            ;2327
00005c  6801              LDR      r1,[r0,#0]            ;2327
00005e  f4415100          ORR      r1,r1,#0x2000         ;2327
000062  6001              STR      r1,[r0,#0]            ;2327
                  |L40.100|
;;;2331   
;;;2332             /* Process Unlocked */
;;;2333             __HAL_UNLOCK(hspi);
;;;2334   
;;;2335             return HAL_TIMEOUT;
;;;2336           }
;;;2337         }
;;;2338       }
;;;2339     }
;;;2340     else
;;;2341     {
;;;2342       while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
;;;2343       {
;;;2344         if(Timeout != HAL_MAX_DELAY)
;;;2345         {
;;;2346           if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
;;;2347           {
;;;2348             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2349                on both master and slave sides in order to resynchronize the master
;;;2350                and slave for their respective CRC calculation */
;;;2351   
;;;2352             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2353             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2354   
;;;2355             /* Disable SPI peripheral */
;;;2356             __HAL_SPI_DISABLE(hspi);
;;;2357   
;;;2358             /* Reset CRC Calculation */
;;;2359             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;2360             {
;;;2361               SPI_RESET_CRC(hspi);
;;;2362             }
;;;2363   
;;;2364             hspi->State= HAL_SPI_STATE_READY;
000064  f8849051          STRB     r9,[r4,#0x51]
;;;2365   
;;;2366             /* Process Unlocked */
;;;2367             __HAL_UNLOCK(hspi);
000068  f8848050          STRB     r8,[r4,#0x50]
;;;2368   
;;;2369             return HAL_TIMEOUT;
00006c  2003              MOVS     r0,#3
                  |L40.110|
;;;2370           }
;;;2371         }
;;;2372       }
;;;2373     }
;;;2374     return HAL_OK;
;;;2375   }
00006e  e8bd87f0          POP      {r4-r10,pc}
                  |L40.114|
000072  6820              LDR      r0,[r4,#0]            ;2308
000074  6880              LDR      r0,[r0,#8]            ;2308
000076  ea360000          BICS     r0,r6,r0              ;2308
00007a  d1d4              BNE      |L40.38|
00007c  e00d              B        |L40.154|
                  |L40.126|
00007e  1c68              ADDS     r0,r5,#1              ;2344
000080  d006              BEQ      |L40.144|
000082  2d00              CMP      r5,#0                 ;2346
000084  d0d7              BEQ      |L40.54|
000086  f7fffffe          BL       HAL_GetTick
00008a  1bc0              SUBS     r0,r0,r7              ;2346
00008c  42a8              CMP      r0,r5                 ;2346
00008e  d8d2              BHI      |L40.54|
                  |L40.144|
000090  6820              LDR      r0,[r4,#0]            ;2342
000092  6880              LDR      r0,[r0,#8]            ;2342
000094  ea360000          BICS     r0,r6,r0              ;2342
000098  d0f1              BEQ      |L40.126|
                  |L40.154|
00009a  2000              MOVS     r0,#0                 ;2374
00009c  e7e7              B        |L40.110|
;;;2376   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____RRX|
#line 587
|__asm___19_stm32f1xx_hal_spi_c_5e7b22bd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
