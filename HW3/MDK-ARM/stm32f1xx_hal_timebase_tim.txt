; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ohw3_freertos\stm32f1xx_hal_timebase_tim.o --asm_dir=./ --list_dir=--list --depend=hw3_freertos\stm32f1xx_hal_timebase_tim.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I../Drivers/CMSIS/Include -I..\FreeRTOS\include -I..\Middlewares\Third_Party\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\Middlewares\Third_Party\FreeRTOS\Source\include -I..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS -I.\RTE\_HW3_FreeRTOS -IC:\Users\ChangEn\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\ChangEn\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_HD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103x6 --omf_browse=hw3_freertos\stm32f1xx_hal_timebase_tim.crf ..\Src\stm32f1xx_hal_timebase_TIM.c]
                          THUMB

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;62       */
;;;63     HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b500              PUSH     {lr}
;;;64     {
;;;65       RCC_ClkInitTypeDef    clkconfig;
;;;66       uint32_t              uwTimclock = 0;
;;;67       uint32_t              uwPrescalerValue = 0;
;;;68       uint32_t              pFLatency;
;;;69       
;;;70       /*Configure the TIM1 IRQ priority */
;;;71       HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
000002  4601              MOV      r1,r0
000004  b087              SUB      sp,sp,#0x1c           ;64
000006  2200              MOVS     r2,#0
000008  2019              MOVS     r0,#0x19
00000a  f7fffffe          BL       HAL_NVIC_SetPriority
;;;72       
;;;73       /* Enable the TIM1 global Interrupt */
;;;74       HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
00000e  2019              MOVS     r0,#0x19
000010  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;75       
;;;76       /* Enable TIM1 clock */
;;;77       __HAL_RCC_TIM1_CLK_ENABLE();
000014  4813              LDR      r0,|L1.100|
000016  6981              LDR      r1,[r0,#0x18]
000018  f4416100          ORR      r1,r1,#0x800
00001c  6181              STR      r1,[r0,#0x18]
00001e  6980              LDR      r0,[r0,#0x18]
;;;78       
;;;79       /* Get clock configuration */
;;;80       HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
000020  a905              ADD      r1,sp,#0x14
000022  f4006000          AND      r0,r0,#0x800          ;77
000026  9006              STR      r0,[sp,#0x18]
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       HAL_RCC_GetClockConfig
;;;81       
;;;82       /* Compute TIM1 clock */
;;;83       uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
00002e  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
;;;84        
;;;85       /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
;;;86       uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
000032  490d              LDR      r1,|L1.104|
000034  0040              LSLS     r0,r0,#1              ;83
000036  fbb0f1f1          UDIV     r1,r0,r1
;;;87       
;;;88       /* Initialize TIM1 */
;;;89       htim1.Instance = TIM1;
00003a  480d              LDR      r0,|L1.112|
00003c  4a0b              LDR      r2,|L1.108|
;;;90       
;;;91       /* Initialize TIMx peripheral as follow:
;;;92       + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
;;;93       + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
;;;94       + ClockDivision = 0
;;;95       + Counter direction = Up
;;;96       */
;;;97       htim1.Init.Period = (1000000 / 1000) - 1;
00003e  1e49              SUBS     r1,r1,#1
000040  6002              STR      r2,[r0,#0]  ; htim1
;;;98       htim1.Init.Prescaler = uwPrescalerValue;
;;;99       htim1.Init.ClockDivision = 0;
000042  6041              STR      r1,[r0,#4]  ; htim1
000044  f24032e7          MOV      r2,#0x3e7             ;97
000048  2100              MOVS     r1,#0
00004a  e9c02103          STRD     r2,r1,[r0,#0xc]
;;;100      htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
;;;101      if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
00004e  6081              STR      r1,[r0,#8]  ; htim1
000050  f7fffffe          BL       HAL_TIM_Base_Init
000054  b110              CBZ      r0,|L1.92|
;;;102      {
;;;103        /* Start the TIM time Base generation in interrupt mode */
;;;104        return HAL_TIM_Base_Start_IT(&htim1);
;;;105      }
;;;106      
;;;107      /* Return function status */
;;;108      return HAL_ERROR;
000056  2001              MOVS     r0,#1
                  |L1.88|
;;;109    }
000058  b007              ADD      sp,sp,#0x1c
00005a  bd00              POP      {pc}
                  |L1.92|
00005c  4804              LDR      r0,|L1.112|
00005e  f7fffffe          BL       HAL_TIM_Base_Start_IT
000062  e7f9              B        |L1.88|
;;;110    
                          ENDP

                  |L1.100|
                          DCD      0x40021000
                  |L1.104|
                          DCD      0x000f4240
                  |L1.108|
                          DCD      0x40012c00
                  |L1.112|
                          DCD      ||.bss||

                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=2

                  HAL_ResumeTick PROC
;;;128      */
;;;129    void HAL_ResumeTick(void)
000000  4803              LDR      r0,|L2.16|
;;;130    {
;;;131      /* Enable TIM1 Update interrupt */
;;;132      __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
000002  6800              LDR      r0,[r0,#0]  ; htim1
000004  68c1              LDR      r1,[r0,#0xc]
000006  f0410101          ORR      r1,r1,#1
00000a  60c1              STR      r1,[r0,#0xc]
;;;133    }
00000c  4770              BX       lr
;;;134    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=2

                  HAL_SuspendTick PROC
;;;116      */
;;;117    void HAL_SuspendTick(void)
000000  4803              LDR      r0,|L3.16|
;;;118    {
;;;119      /* Disable TIM1 update Interrupt */
;;;120      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);                                                  
000002  6800              LDR      r0,[r0,#0]  ; htim1
000004  68c1              LDR      r1,[r0,#0xc]
000006  f0210101          BIC      r1,r1,#1
00000a  60c1              STR      r1,[r0,#0xc]
;;;121    }
00000c  4770              BX       lr
;;;122    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  htim1
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  uwIncrementState
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Src\\stm32f1xx_hal_timebase_TIM.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___28_stm32f1xx_hal_timebase_TIM_c_db020eec____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___28_stm32f1xx_hal_timebase_TIM_c_db020eec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___28_stm32f1xx_hal_timebase_TIM_c_db020eec____REVSH|
#line 402
|__asm___28_stm32f1xx_hal_timebase_TIM_c_db020eec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___28_stm32f1xx_hal_timebase_TIM_c_db020eec____RRX|
#line 587
|__asm___28_stm32f1xx_hal_timebase_TIM_c_db020eec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
