; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ohw3_freertos\stm32f1xx_hal_crc.o --asm_dir=./ --list_dir=--list --depend=hw3_freertos\stm32f1xx_hal_crc.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I../Drivers/CMSIS/Include -I..\FreeRTOS\include -I..\Middlewares\Third_Party\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\Middlewares\Third_Party\FreeRTOS\Source\include -I..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS -I.\RTE\_HW3_FreeRTOS -IC:\Users\ChangEn\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\ChangEn\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_HD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103x6 --omf_browse=hw3_freertos\stm32f1xx_hal_crc.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_crc.c]
                          THUMB

                          AREA ||i.HAL_CRC_Accumulate||, CODE, READONLY, ALIGN=1

                  HAL_CRC_Accumulate PROC
;;;234      */
;;;235    uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {
;;;237      uint32_t index = 0;
;;;238    
;;;239      /* Process Locked */
;;;240      __HAL_LOCK(hcrc);
000002  7904              LDRB     r4,[r0,#4]
000004  2300              MOVS     r3,#0                 ;237
000006  2c01              CMP      r4,#1
000008  d004              BEQ      |L1.20|
00000a  2401              MOVS     r4,#1
00000c  7104              STRB     r4,[r0,#4]
;;;241    
;;;242      /* Change CRC peripheral state */
;;;243      hcrc->State = HAL_CRC_STATE_BUSY;
00000e  2502              MOVS     r5,#2
000010  7145              STRB     r5,[r0,#5]
000012  e006              B        |L1.34|
                  |L1.20|
000014  2002              MOVS     r0,#2                 ;240
;;;244    
;;;245      /* Enter Data to the CRC calculator */
;;;246      for(index = 0; index < BufferLength; index++)
;;;247      {
;;;248        hcrc->Instance->DR = pBuffer[index];
;;;249      }
;;;250    
;;;251      /* Change CRC peripheral state */
;;;252      hcrc->State = HAL_CRC_STATE_READY;
;;;253    
;;;254      /* Process Unlocked */
;;;255      __HAL_UNLOCK(hcrc);
;;;256    
;;;257      /* Return the CRC computed value */
;;;258      return hcrc->Instance->DR;
;;;259    }
000016  bd70              POP      {r4-r6,pc}
                  |L1.24|
000018  6806              LDR      r6,[r0,#0]            ;248
00001a  f8515023          LDR      r5,[r1,r3,LSL #2]     ;248
00001e  6035              STR      r5,[r6,#0]            ;248
000020  1c5b              ADDS     r3,r3,#1              ;248
                  |L1.34|
000022  4293              CMP      r3,r2                 ;246
000024  d3f8              BCC      |L1.24|
000026  7144              STRB     r4,[r0,#5]            ;252
000028  2100              MOVS     r1,#0                 ;255
00002a  7101              STRB     r1,[r0,#4]            ;255
00002c  6800              LDR      r0,[r0,#0]            ;258
00002e  6800              LDR      r0,[r0,#0]            ;258
000030  bd70              POP      {r4-r6,pc}
;;;260    
                          ENDP


                          AREA ||i.HAL_CRC_Calculate||, CODE, READONLY, ALIGN=2

                  HAL_CRC_Calculate PROC
;;;269      */
;;;270    uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
000000  b570              PUSH     {r4-r6,lr}
;;;271    {
;;;272      uint32_t index = 0;
;;;273    
;;;274      /* Process Locked */
;;;275      __HAL_LOCK(hcrc); 
000002  7904              LDRB     r4,[r0,#4]
000004  2300              MOVS     r3,#0                 ;272
000006  2c01              CMP      r4,#1
000008  d009              BEQ      |L2.30|
00000a  2401              MOVS     r4,#1
00000c  7104              STRB     r4,[r0,#4]
;;;276    
;;;277      /* Change CRC peripheral state */
;;;278      hcrc->State = HAL_CRC_STATE_BUSY;
00000e  2502              MOVS     r5,#2
000010  7145              STRB     r5,[r0,#5]
;;;279    
;;;280      /* Reset CRC Calculation Unit */
;;;281      __HAL_CRC_DR_RESET(hcrc);
000012  6805              LDR      r5,[r0,#0]
000014  68ae              LDR      r6,[r5,#8]
000016  f0460601          ORR      r6,r6,#1
00001a  60ae              STR      r6,[r5,#8]
00001c  e007              B        |L2.46|
                  |L2.30|
00001e  2002              MOVS     r0,#2                 ;275
;;;282    
;;;283      /* Enter Data to the CRC calculator */
;;;284      for(index = 0; index < BufferLength; index++)
;;;285      {
;;;286        hcrc->Instance->DR = pBuffer[index];
;;;287      }
;;;288    
;;;289      /* Change CRC peripheral state */
;;;290      hcrc->State = HAL_CRC_STATE_READY;
;;;291    
;;;292      /* Process Unlocked */
;;;293      __HAL_UNLOCK(hcrc);
;;;294    
;;;295      /* Return the CRC computed value */
;;;296      return hcrc->Instance->DR;
;;;297    }
000020  bd70              POP      {r4-r6,pc}
000022  bf00              NOP                            ;286
                  |L2.36|
000024  6806              LDR      r6,[r0,#0]            ;286
000026  f8515023          LDR      r5,[r1,r3,LSL #2]     ;286
00002a  6035              STR      r5,[r6,#0]            ;286
00002c  1c5b              ADDS     r3,r3,#1              ;286
                  |L2.46|
00002e  4293              CMP      r3,r2                 ;284
000030  d3f8              BCC      |L2.36|
000032  7144              STRB     r4,[r0,#5]            ;290
000034  2100              MOVS     r1,#0                 ;293
000036  7101              STRB     r1,[r0,#4]            ;293
000038  6800              LDR      r0,[r0,#0]            ;296
00003a  6800              LDR      r0,[r0,#0]            ;296
00003c  bd70              POP      {r4-r6,pc}
;;;298    
                          ENDP


                          AREA ||i.HAL_CRC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_CRC_DeInit PROC
;;;144      */
;;;145    HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
000000  b510              PUSH     {r4,lr}
;;;146    {
000002  0004              MOVS     r4,r0
000004  d00d              BEQ      |L3.34|
;;;147      /* Check the CRC handle allocation */
;;;148      if(hcrc == NULL)
;;;149      {
;;;150        return HAL_ERROR;
;;;151      }
;;;152    
;;;153      /* Check the parameters */
;;;154      assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
;;;155    
;;;156      /* Change CRC peripheral state */
;;;157      hcrc->State = HAL_CRC_STATE_BUSY;
000006  2002              MOVS     r0,#2
000008  7160              STRB     r0,[r4,#5]
;;;158    
;;;159      /* DeInit the low level hardware */
;;;160      HAL_CRC_MspDeInit(hcrc);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       HAL_CRC_MspDeInit
;;;161    
;;;162      /* Resets the CRC calculation unit and sets the data register to 0xFFFF FFFF */
;;;163      __HAL_CRC_DR_RESET(hcrc);
000010  6820              LDR      r0,[r4,#0]
000012  6881              LDR      r1,[r0,#8]
000014  f0410101          ORR      r1,r1,#1
000018  6081              STR      r1,[r0,#8]
;;;164    
;;;165      /* Change CRC peripheral state */
;;;166      hcrc->State = HAL_CRC_STATE_RESET;
00001a  2000              MOVS     r0,#0
00001c  7160              STRB     r0,[r4,#5]
;;;167    
;;;168      /* Release Lock */
;;;169      __HAL_UNLOCK(hcrc);
00001e  7120              STRB     r0,[r4,#4]
;;;170    
;;;171      /* Return function status */
;;;172      return HAL_OK;
;;;173    }
000020  bd10              POP      {r4,pc}
                  |L3.34|
000022  2001              MOVS     r0,#1                 ;150
000024  bd10              POP      {r4,pc}
;;;174    
                          ENDP


                          AREA ||i.HAL_CRC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_CRC_GetState PROC
;;;322      */
;;;323    HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
000000  7940              LDRB     r0,[r0,#5]
;;;324    {
;;;325      return hcrc->State;
;;;326    }
000002  4770              BX       lr
;;;327    
                          ENDP


                          AREA ||i.HAL_CRC_Init||, CODE, READONLY, ALIGN=1

                  HAL_CRC_Init PROC
;;;111      */
;;;112    HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
000000  b510              PUSH     {r4,lr}
;;;113    {
000002  0004              MOVS     r4,r0
000004  d002              BEQ      |L5.12|
;;;114      /* Check the CRC handle allocation */
;;;115      if(hcrc == NULL)
;;;116      {
;;;117        return HAL_ERROR;
;;;118      }
;;;119    
;;;120      /* Check the parameters */
;;;121      assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
;;;122    
;;;123      if(hcrc->State == HAL_CRC_STATE_RESET)
000006  7960              LDRB     r0,[r4,#5]
000008  b110              CBZ      r0,|L5.16|
00000a  e006              B        |L5.26|
                  |L5.12|
00000c  2001              MOVS     r0,#1                 ;117
;;;124      {
;;;125        /* Allocate lock resource and initialize it */
;;;126        hcrc->Lock = HAL_UNLOCKED;
;;;127        
;;;128        /* Init the low level hardware */
;;;129        HAL_CRC_MspInit(hcrc);
;;;130      }
;;;131    
;;;132      /* Change CRC peripheral state */
;;;133      hcrc->State = HAL_CRC_STATE_READY;
;;;134      
;;;135      /* Return function status */
;;;136      return HAL_OK;
;;;137    }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  2000              MOVS     r0,#0                 ;126
000012  7120              STRB     r0,[r4,#4]            ;126
000014  4620              MOV      r0,r4                 ;129
000016  f7fffffe          BL       HAL_CRC_MspInit
                  |L5.26|
00001a  2001              MOVS     r0,#1                 ;133
00001c  7160              STRB     r0,[r4,#5]            ;133
00001e  2000              MOVS     r0,#0                 ;136
000020  bd10              POP      {r4,pc}
;;;138    
                          ENDP


                          AREA ||i.HAL_CRC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_CRC_MspDeInit PROC
;;;195      */
;;;196    __weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
000000  4770              BX       lr
;;;197    {
;;;198      /* Prevent unused argument(s) compilation warning */
;;;199      UNUSED(hcrc);
;;;200      /* NOTE : This function Should not be modified, when the callback is needed,
;;;201                the HAL_CRC_MspDeInit could be implemented in the user file
;;;202       */
;;;203    }
;;;204    
                          ENDP


                          AREA ||i.HAL_CRC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_CRC_MspInit PROC
;;;180      */
;;;181    __weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
000000  4770              BX       lr
;;;182    {
;;;183      /* Prevent unused argument(s) compilation warning */
;;;184      UNUSED(hcrc);
;;;185      /* NOTE : This function Should not be modified, when the callback is needed,
;;;186                the HAL_CRC_MspInit could be implemented in the user file
;;;187       */
;;;188    }
;;;189    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_crc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_crc_c_14c421d9____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_crc_c_14c421d9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_crc_c_14c421d9____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_crc_c_14c421d9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_crc_c_14c421d9____RRX|
#line 587
|__asm___19_stm32f1xx_hal_crc_c_14c421d9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
