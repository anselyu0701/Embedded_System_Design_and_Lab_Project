; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ohw3_freertos\event_groups.o --asm_dir=./ --list_dir=--list --depend=hw3_freertos\event_groups.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I../Drivers/CMSIS/Include -I..\FreeRTOS\include -I..\Middlewares\Third_Party\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\Middlewares\Third_Party\FreeRTOS\Source\include -I..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS -I.\RTE\_HW3_FreeRTOS -IC:\Users\ChangEn\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\ChangEn\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_HD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103x6 --omf_browse=hw3_freertos\event_groups.crf ..\Middlewares\Third_Party\FreeRTOS\Source\event_groups.c]
                          THUMB

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=1

                  prvTestWaitCondition PROC
;;;612    
;;;613    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  4603              MOV      r3,r0
;;;614    {
;;;615    BaseType_t xWaitConditionMet = pdFALSE;
000002  2000              MOVS     r0,#0
000004  b112              CBZ      r2,|L1.12|
;;;616    
;;;617    	if( xWaitForAllBits == pdFALSE )
;;;618    	{
;;;619    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;620    		set.  Is one already set? */
;;;621    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
;;;622    		{
;;;623    			xWaitConditionMet = pdTRUE;
;;;624    		}
;;;625    		else
;;;626    		{
;;;627    			mtCOVERAGE_TEST_MARKER();
;;;628    		}
;;;629    	}
;;;630    	else
;;;631    	{
;;;632    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;633    		Are they set already? */
;;;634    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000006  4399              BICS     r1,r1,r3
000008  d002              BEQ      |L1.16|
                  |L1.10|
;;;635    		{
;;;636    			xWaitConditionMet = pdTRUE;
;;;637    		}
;;;638    		else
;;;639    		{
;;;640    			mtCOVERAGE_TEST_MARKER();
;;;641    		}
;;;642    	}
;;;643    
;;;644    	return xWaitConditionMet;
;;;645    }
00000a  4770              BX       lr
                  |L1.12|
00000c  420b              TST      r3,r1                 ;621
00000e  d0fc              BEQ      |L1.10|
                  |L1.16|
000010  2001              MOVS     r0,#1                 ;623
000012  4770              BX       lr
;;;646    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupClearBitsCallback PROC
;;;606    an interrupt. */
;;;607    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  f7ffbffe          B.W      xEventGroupClearBits
;;;608    {
;;;609    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
;;;610    }
;;;611    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=1

                  vEventGroupDelete PROC
;;;573    
;;;574    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;575    {
;;;576    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  4605              MOV      r5,r0
;;;577    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000006  1d04              ADDS     r4,r0,#4
;;;578    
;;;579    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;580    	{
;;;581    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;582    
;;;583    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
;;;584    		{
;;;585    			/* Unblock the task, returning 0 as the event list is being deleted
;;;586    			and	cannot therefore have any bits set. */
;;;587    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
00000c  f1040608          ADD      r6,r4,#8
;;;588    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
000010  f04f7700          MOV      r7,#0x2000000
000014  e008              B        |L3.40|
                  |L3.22|
000016  68e0              LDR      r0,[r4,#0xc]          ;587
000018  42b0              CMP      r0,r6                 ;587
00001a  d102              BNE      |L3.34|
00001c  f7fffffe          BL       ulPortSetInterruptMask
                  |L3.32|
000020  e7fe              B        |L3.32|
                  |L3.34|
000022  4639              MOV      r1,r7
000024  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L3.40|
000028  6820              LDR      r0,[r4,#0]            ;583
00002a  2800              CMP      r0,#0                 ;583
00002c  d1f3              BNE      |L3.22|
;;;589    		}
;;;590    
;;;591    		vPortFree( pxEventBits );
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       vPortFree
;;;592    	}
;;;593    	( void ) xTaskResumeAll();
000034  e8bd41f0          POP      {r4-r8,lr}
000038  f7ffbffe          B.W      xTaskResumeAll
;;;594    }
;;;595    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupSetBitsCallback PROC
;;;598    an interrupt. */
;;;599    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  f7ffbffe          B.W      xEventGroupSetBits
;;;600    {
;;;601    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
;;;602    }
;;;603    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=1

                  xEventGroupClearBits PROC
;;;421    
;;;422    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  b570              PUSH     {r4-r6,lr}
;;;423    {
000002  460e              MOV      r6,r1
;;;424    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  0004              MOVS     r4,r0
000006  d004              BEQ      |L5.18|
;;;425    EventBits_t uxReturn;
;;;426    
;;;427    	/* Check the user is not attempting to clear the bits used by the kernel
;;;428    	itself. */
;;;429    	configASSERT( xEventGroup );
;;;430    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000008  0e30              LSRS     r0,r6,#24
00000a  d005              BEQ      |L5.24|
00000c  f7fffffe          BL       ulPortSetInterruptMask
                  |L5.16|
000010  e7fe              B        |L5.16|
                  |L5.18|
000012  f7fffffe          BL       ulPortSetInterruptMask
                  |L5.22|
000016  e7fe              B        |L5.22|
                  |L5.24|
;;;431    
;;;432    	taskENTER_CRITICAL();
000018  f7fffffe          BL       vPortEnterCritical
;;;433    	{
;;;434    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;435    
;;;436    		/* The value returned is the event group value prior to the bits being
;;;437    		cleared. */
;;;438    		uxReturn = pxEventBits->uxEventBits;
;;;439    
;;;440    		/* Clear the bits. */
;;;441    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00001c  6825              LDR      r5,[r4,#0]
00001e  ea250006          BIC      r0,r5,r6
;;;442    	}
;;;443    	taskEXIT_CRITICAL();
000022  6020              STR      r0,[r4,#0]
000024  f7fffffe          BL       vPortExitCritical
;;;444    
;;;445    	return uxReturn;
000028  4628              MOV      r0,r5
;;;446    }
00002a  bd70              POP      {r4-r6,pc}
;;;447    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=1

                  xEventGroupCreate PROC
;;;137    
;;;138    EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140    EventGroup_t *pxEventBits;
;;;141    
;;;142    	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000002  2018              MOVS     r0,#0x18
000004  f7fffffe          BL       pvPortMalloc
000008  0004              MOVS     r4,r0
;;;143    	if( pxEventBits != NULL )
00000a  d004              BEQ      |L6.22|
;;;144    	{
;;;145    		pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
;;;146    		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
00000e  6020              STR      r0,[r4,#0]
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L6.22|
;;;147    		traceEVENT_GROUP_CREATE( pxEventBits );
;;;148    	}
;;;149    	else
;;;150    	{
;;;151    		traceEVENT_GROUP_CREATE_FAILED();
;;;152    	}
;;;153    
;;;154    	return ( EventGroupHandle_t ) pxEventBits;
000016  4620              MOV      r0,r4
;;;155    }
000018  bd10              POP      {r4,pc}
;;;156    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=1

                  xEventGroupGetBitsFromISR PROC
;;;463    
;;;464    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  b510              PUSH     {r4,lr}
;;;465    {
;;;466    UBaseType_t uxSavedInterruptStatus;
;;;467    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000002  4604              MOV      r4,r0
;;;468    EventBits_t uxReturn;
;;;469    
;;;470    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000004  f7fffffe          BL       ulPortSetInterruptMask
;;;471    	{
;;;472    		uxReturn = pxEventBits->uxEventBits;
000008  6824              LDR      r4,[r4,#0]
;;;473    	}
;;;474    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00000a  f7fffffe          BL       vPortClearInterruptMask
;;;475    
;;;476    	return uxReturn;
00000e  4620              MOV      r0,r4
;;;477    }
000010  bd10              POP      {r4,pc}
;;;478    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=1

                  xEventGroupSetBits PROC
;;;479    
;;;480    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;481    {
;;;482    ListItem_t *pxListItem, *pxNext;
;;;483    ListItem_t const *pxListEnd;
;;;484    List_t *pxList;
;;;485    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
000004  2700              MOVS     r7,#0
000006  4688              MOV      r8,r1                 ;481
;;;486    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000008  0004              MOVS     r4,r0
00000a  d005              BEQ      |L8.24|
;;;487    BaseType_t xMatchFound = pdFALSE;
;;;488    
;;;489    	/* Check the user is not attempting to set the bits used by the kernel
;;;490    	itself. */
;;;491    	configASSERT( xEventGroup );
;;;492    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000c  ea5f6018          LSRS     r0,r8,#24
000010  d005              BEQ      |L8.30|
000012  f7fffffe          BL       ulPortSetInterruptMask
                  |L8.22|
000016  e7fe              B        |L8.22|
                  |L8.24|
000018  f7fffffe          BL       ulPortSetInterruptMask
                  |L8.28|
00001c  e7fe              B        |L8.28|
                  |L8.30|
;;;493    
;;;494    	pxList = &( pxEventBits->xTasksWaitingForBits );
00001e  1d26              ADDS     r6,r4,#4
000020  f104050c          ADD      r5,r4,#0xc
;;;495    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
;;;496    	vTaskSuspendAll();
000024  f7fffffe          BL       vTaskSuspendAll
;;;497    	{
;;;498    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;499    
;;;500    		pxListItem = listGET_HEAD_ENTRY( pxList );
;;;501    
;;;502    		/* Set the bits. */
;;;503    		pxEventBits->uxEventBits |= uxBitsToSet;
000028  6821              LDR      r1,[r4,#0]
00002a  68f0              LDR      r0,[r6,#0xc]
00002c  ea410108          ORR      r1,r1,r8
;;;504    
;;;505    		/* See if the new bit value should unblock any tasks. */
;;;506    		while( pxListItem != pxListEnd )
000030  6021              STR      r1,[r4,#0]
000032  e017              B        |L8.100|
                  |L8.52|
000034  e9d01600          LDRD     r1,r6,[r0,#0]
;;;507    		{
;;;508    			pxNext = listGET_NEXT( pxListItem );
;;;509    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
;;;510    			xMatchFound = pdFALSE;
;;;511    
;;;512    			/* Split the bits waited for from the control bits. */
;;;513    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
000038  f001427f          AND      r2,r1,#0xff000000
;;;514    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
;;;515    
;;;516    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
00003c  0153              LSLS     r3,r2,#5
00003e  6823              LDR      r3,[r4,#0]
000040  f021417f          BIC      r1,r1,#0xff000000     ;514
000044  d402              BMI      |L8.76|
;;;517    			{
;;;518    				/* Just looking for single bit being set. */
;;;519    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
000046  420b              TST      r3,r1
000048  d103              BNE      |L8.82|
00004a  e00a              B        |L8.98|
                  |L8.76|
;;;520    				{
;;;521    					xMatchFound = pdTRUE;
;;;522    				}
;;;523    				else
;;;524    				{
;;;525    					mtCOVERAGE_TEST_MARKER();
;;;526    				}
;;;527    			}
;;;528    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
00004c  ea310303          BICS     r3,r1,r3
000050  d107              BNE      |L8.98|
                  |L8.82|
;;;529    			{
;;;530    				/* All bits are set. */
;;;531    				xMatchFound = pdTRUE;
;;;532    			}
;;;533    			else
;;;534    			{
;;;535    				/* Need all bits to be set, but not all the bits were set. */
;;;536    			}
;;;537    
;;;538    			if( xMatchFound != pdFALSE )
;;;539    			{
;;;540    				/* The bits match.  Should the bits be cleared on exit? */
;;;541    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
000052  01d2              LSLS     r2,r2,#7
000054  d500              BPL      |L8.88|
;;;542    				{
;;;543    					uxBitsToClear |= uxBitsWaitedFor;
000056  430f              ORRS     r7,r7,r1
                  |L8.88|
;;;544    				}
;;;545    				else
;;;546    				{
;;;547    					mtCOVERAGE_TEST_MARKER();
;;;548    				}
;;;549    
;;;550    				/* Store the actual event flag value in the task's event list
;;;551    				item before removing the task from the event list.  The
;;;552    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;553    				that is was unblocked due to its required bits matching, rather
;;;554    				than because it timed out. */
;;;555    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
000058  6821              LDR      r1,[r4,#0]
00005a  f0417100          ORR      r1,r1,#0x2000000
00005e  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L8.98|
;;;556    			}
;;;557    
;;;558    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;559    			used here as the list item may have been removed from the event list
;;;560    			and inserted into the ready/pending reading list. */
;;;561    			pxListItem = pxNext;
000062  4630              MOV      r0,r6
                  |L8.100|
000064  42a8              CMP      r0,r5                 ;506
000066  d1e5              BNE      |L8.52|
;;;562    		}
;;;563    
;;;564    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;565    		bit was set in the control word. */
;;;566    		pxEventBits->uxEventBits &= ~uxBitsToClear;
000068  6820              LDR      r0,[r4,#0]
00006a  43b8              BICS     r0,r0,r7
;;;567    	}
;;;568    	( void ) xTaskResumeAll();
00006c  6020              STR      r0,[r4,#0]
00006e  f7fffffe          BL       xTaskResumeAll
;;;569    
;;;570    	return pxEventBits->uxEventBits;
000072  6820              LDR      r0,[r4,#0]
;;;571    }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;572    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=1

                  xEventGroupSync PROC
;;;157    
;;;158    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;159    {
000004  4604              MOV      r4,r0
000006  461f              MOV      r7,r3
000008  4615              MOV      r5,r2
00000a  4688              MOV      r8,r1
;;;160    EventBits_t uxOriginalBitValue, uxReturn;
;;;161    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;162    BaseType_t xAlreadyYielded;
;;;163    BaseType_t xTimeoutOccurred = pdFALSE;
;;;164    
;;;165    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000c  0e10              LSRS     r0,r2,#24
00000e  d002              BEQ      |L9.22|
000010  f7fffffe          BL       ulPortSetInterruptMask
                  |L9.20|
000014  e7fe              B        |L9.20|
                  |L9.22|
;;;166    	configASSERT( uxBitsToWaitFor != 0 );
000016  b11d              CBZ      r5,|L9.32|
;;;167    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;168    	{
;;;169    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
000018  f7fffffe          BL       xTaskGetSchedulerState
00001c  b118              CBZ      r0,|L9.38|
00001e  e006              B        |L9.46|
                  |L9.32|
000020  f7fffffe          BL       ulPortSetInterruptMask
                  |L9.36|
000024  e7fe              B        |L9.36|
                  |L9.38|
000026  b117              CBZ      r7,|L9.46|
000028  f7fffffe          BL       ulPortSetInterruptMask
                  |L9.44|
00002c  e7fe              B        |L9.44|
                  |L9.46|
;;;170    	}
;;;171    	#endif
;;;172    
;;;173    	vTaskSuspendAll();
00002e  f7fffffe          BL       vTaskSuspendAll
;;;174    	{
;;;175    		uxOriginalBitValue = pxEventBits->uxEventBits;
000032  4620              MOV      r0,r4
;;;176    
;;;177    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
000034  4641              MOV      r1,r8
000036  6826              LDR      r6,[r4,#0]
000038  f7fffffe          BL       xEventGroupSetBits
;;;178    
;;;179    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
00003c  ea460608          ORR      r6,r6,r8
000040  ea350006          BICS     r0,r5,r6
000044  d008              BEQ      |L9.88|
;;;180    		{
;;;181    			/* All the rendezvous bits are now set - no need to block. */
;;;182    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
;;;183    
;;;184    			/* Rendezvous always clear the bits.  They will have been cleared
;;;185    			already unless this is the only task in the rendezvous. */
;;;186    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
;;;187    
;;;188    			xTicksToWait = 0;
;;;189    		}
;;;190    		else
;;;191    		{
;;;192    			if( xTicksToWait != ( TickType_t ) 0 )
000046  b16f              CBZ      r7,|L9.100|
;;;193    			{
;;;194    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;195    
;;;196    				/* Store the bits that the calling task is waiting for in the
;;;197    				task's event list item so the kernel knows when a match is
;;;198    				found.  Then enter the blocked state. */
;;;199    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
000048  f04561a0          ORR      r1,r5,#0x5000000
00004c  463a              MOV      r2,r7
00004e  1d20              ADDS     r0,r4,#4
000050  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;200    
;;;201    				/* This assignment is obsolete as uxReturn will get set after
;;;202    				the task unblocks, but some compilers mistakenly generate a
;;;203    				warning about uxReturn being returned without being set if the
;;;204    				assignment is omitted. */
;;;205    				uxReturn = 0;
000054  2600              MOVS     r6,#0
000056  e006              B        |L9.102|
                  |L9.88|
000058  6820              LDR      r0,[r4,#0]            ;186
00005a  43a8              BICS     r0,r0,r5              ;186
;;;206    			}
;;;207    			else
;;;208    			{
;;;209    				/* The rendezvous bits were not set, but no block time was
;;;210    				specified - just return the current event bit value. */
;;;211    				uxReturn = pxEventBits->uxEventBits;
;;;212    			}
;;;213    		}
;;;214    	}
;;;215    	xAlreadyYielded = xTaskResumeAll();
00005c  6020              STR      r0,[r4,#0]
00005e  f7fffffe          BL       xTaskResumeAll
000062  e018              B        |L9.150|
                  |L9.100|
000064  6826              LDR      r6,[r4,#0]            ;211
                  |L9.102|
000066  f7fffffe          BL       xTaskResumeAll
;;;216    
;;;217    	if( xTicksToWait != ( TickType_t ) 0 )
00006a  b1a7              CBZ      r7,|L9.150|
;;;218    	{
;;;219    		if( xAlreadyYielded == pdFALSE )
00006c  b908              CBNZ     r0,|L9.114|
;;;220    		{
;;;221    			portYIELD_WITHIN_API();
00006e  f7fffffe          BL       vPortYield
                  |L9.114|
;;;222    		}
;;;223    		else
;;;224    		{
;;;225    			mtCOVERAGE_TEST_MARKER();
;;;226    		}
;;;227    
;;;228    		/* The task blocked to wait for its required bits to be set - at this
;;;229    		point either the required bits were set or the block time expired.  If
;;;230    		the required bits were set they will have been stored in the task's
;;;231    		event list item, and they should now be retrieved then cleared. */
;;;232    		uxReturn = uxTaskResetEventItemValue();
000072  f7fffffe          BL       uxTaskResetEventItemValue
000076  4606              MOV      r6,r0
;;;233    
;;;234    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
000078  0180              LSLS     r0,r0,#6
00007a  d40a              BMI      |L9.146|
;;;235    		{
;;;236    			/* The task timed out, just return the current event bit value. */
;;;237    			taskENTER_CRITICAL();
00007c  f7fffffe          BL       vPortEnterCritical
;;;238    			{
;;;239    				uxReturn = pxEventBits->uxEventBits;
;;;240    
;;;241    				/* Although the task got here because it timed out before the
;;;242    				bits it was waiting for were set, it is possible that since it
;;;243    				unblocked another task has set the bits.  If this is the case
;;;244    				then it needs to clear the bits before exiting. */
;;;245    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
000080  6826              LDR      r6,[r4,#0]
000082  ea350006          BICS     r0,r5,r6
000086  d102              BNE      |L9.142|
;;;246    				{
;;;247    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000088  ea260005          BIC      r0,r6,r5
00008c  6020              STR      r0,[r4,#0]
                  |L9.142|
;;;248    				}
;;;249    				else
;;;250    				{
;;;251    					mtCOVERAGE_TEST_MARKER();
;;;252    				}
;;;253    			}
;;;254    			taskEXIT_CRITICAL();
00008e  f7fffffe          BL       vPortExitCritical
                  |L9.146|
;;;255    
;;;256    			xTimeoutOccurred = pdTRUE;
;;;257    		}
;;;258    		else
;;;259    		{
;;;260    			/* The task unblocked because the bits were set. */
;;;261    		}
;;;262    
;;;263    		/* Control bits might be set as the task had blocked should not be
;;;264    		returned. */
;;;265    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000092  f026467f          BIC      r6,r6,#0xff000000
                  |L9.150|
;;;266    	}
;;;267    
;;;268    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;269    
;;;270    	return uxReturn;
000096  4630              MOV      r0,r6
;;;271    }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;272    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=1

                  xEventGroupWaitBits PROC
;;;273    
;;;274    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;275    {
000004  469a              MOV      r10,r3
000006  f8dd9020          LDR      r9,[sp,#0x20]
00000a  4690              MOV      r8,r2
00000c  460d              MOV      r5,r1
00000e  0004              MOVS     r4,r0
;;;276    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;277    EventBits_t uxReturn, uxControlBits = 0;
000010  f04f0700          MOV      r7,#0
000014  d004              BEQ      |L10.32|
;;;278    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;279    BaseType_t xTimeoutOccurred = pdFALSE;
;;;280    
;;;281    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;282    	itself, and that at least one bit is being requested. */
;;;283    	configASSERT( xEventGroup );
;;;284    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000016  0e28              LSRS     r0,r5,#24
000018  d005              BEQ      |L10.38|
00001a  f7fffffe          BL       ulPortSetInterruptMask
                  |L10.30|
00001e  e7fe              B        |L10.30|
                  |L10.32|
000020  f7fffffe          BL       ulPortSetInterruptMask
                  |L10.36|
000024  e7fe              B        |L10.36|
                  |L10.38|
;;;285    	configASSERT( uxBitsToWaitFor != 0 );
000026  b11d              CBZ      r5,|L10.48|
;;;286    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;287    	{
;;;288    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
000028  f7fffffe          BL       xTaskGetSchedulerState
00002c  b118              CBZ      r0,|L10.54|
00002e  e008              B        |L10.66|
                  |L10.48|
000030  f7fffffe          BL       ulPortSetInterruptMask
                  |L10.52|
000034  e7fe              B        |L10.52|
                  |L10.54|
000036  f1b90f00          CMP      r9,#0
00003a  d002              BEQ      |L10.66|
00003c  f7fffffe          BL       ulPortSetInterruptMask
                  |L10.64|
000040  e7fe              B        |L10.64|
                  |L10.66|
;;;289    	}
;;;290    	#endif
;;;291    
;;;292    	vTaskSuspendAll();
000042  f7fffffe          BL       vTaskSuspendAll
;;;293    	{
;;;294    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
;;;295    
;;;296    		/* Check to see if the wait condition is already met or not. */
;;;297    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
000046  6826              LDR      r6,[r4,#0]
000048  4652              MOV      r2,r10
00004a  4629              MOV      r1,r5
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       prvTestWaitCondition
;;;298    
;;;299    		if( xWaitConditionMet != pdFALSE )
000052  b130              CBZ      r0,|L10.98|
;;;300    		{
;;;301    			/* The wait condition has already been met so there is no need to
;;;302    			block. */
;;;303    			uxReturn = uxCurrentEventBits;
;;;304    			xTicksToWait = ( TickType_t ) 0;
;;;305    
;;;306    			/* Clear the wait bits if requested to do so. */
;;;307    			if( xClearOnExit != pdFALSE )
000054  f1b80f00          CMP      r8,#0
000058  d01a              BEQ      |L10.144|
;;;308    			{
;;;309    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
00005a  6820              LDR      r0,[r4,#0]
00005c  43a8              BICS     r0,r0,r5
00005e  6020              STR      r0,[r4,#0]
000060  e016              B        |L10.144|
                  |L10.98|
;;;310    			}
;;;311    			else
;;;312    			{
;;;313    				mtCOVERAGE_TEST_MARKER();
;;;314    			}
;;;315    		}
;;;316    		else if( xTicksToWait == ( TickType_t ) 0 )
000062  f1b90f00          CMP      r9,#0
000066  d013              BEQ      |L10.144|
;;;317    		{
;;;318    			/* The wait condition has not been met, but no block time was
;;;319    			specified, so just return the current value. */
;;;320    			uxReturn = uxCurrentEventBits;
;;;321    		}
;;;322    		else
;;;323    		{
;;;324    			/* The task is going to block to wait for its required bits to be
;;;325    			set.  uxControlBits are used to remember the specified behaviour of
;;;326    			this call to xEventGroupWaitBits() - for use when the event bits
;;;327    			unblock the task. */
;;;328    			if( xClearOnExit != pdFALSE )
000068  f1b80f00          CMP      r8,#0
00006c  d001              BEQ      |L10.114|
;;;329    			{
;;;330    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
00006e  f04f7780          MOV      r7,#0x1000000
                  |L10.114|
;;;331    			}
;;;332    			else
;;;333    			{
;;;334    				mtCOVERAGE_TEST_MARKER();
;;;335    			}
;;;336    
;;;337    			if( xWaitForAllBits != pdFALSE )
000072  f1ba0f00          CMP      r10,#0
000076  d001              BEQ      |L10.124|
;;;338    			{
;;;339    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
000078  f0476780          ORR      r7,r7,#0x4000000
                  |L10.124|
;;;340    			}
;;;341    			else
;;;342    			{
;;;343    				mtCOVERAGE_TEST_MARKER();
;;;344    			}
;;;345    
;;;346    			/* Store the bits that the calling task is waiting for in the
;;;347    			task's event list item so the kernel knows when a match is
;;;348    			found.  Then enter the blocked state. */
;;;349    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
00007c  ea450107          ORR      r1,r5,r7
000080  464a              MOV      r2,r9
000082  1d20              ADDS     r0,r4,#4
000084  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;350    
;;;351    			/* This is obsolete as it will get set after the task unblocks, but
;;;352    			some compilers mistakenly generate a warning about the variable
;;;353    			being returned without being set if it is not done. */
;;;354    			uxReturn = 0;
;;;355    
;;;356    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;357    		}
;;;358    	}
;;;359    	xAlreadyYielded = xTaskResumeAll();
000088  f7fffffe          BL       xTaskResumeAll
00008c  b118              CBZ      r0,|L10.150|
00008e  e004              B        |L10.154|
                  |L10.144|
000090  f7fffffe          BL       xTaskResumeAll
000094  e019              B        |L10.202|
                  |L10.150|
;;;360    
;;;361    	if( xTicksToWait != ( TickType_t ) 0 )
;;;362    	{
;;;363    		if( xAlreadyYielded == pdFALSE )
;;;364    		{
;;;365    			portYIELD_WITHIN_API();
000096  f7fffffe          BL       vPortYield
                  |L10.154|
;;;366    		}
;;;367    		else
;;;368    		{
;;;369    			mtCOVERAGE_TEST_MARKER();
;;;370    		}
;;;371    
;;;372    		/* The task blocked to wait for its required bits to be set - at this
;;;373    		point either the required bits were set or the block time expired.  If
;;;374    		the required bits were set they will have been stored in the task's
;;;375    		event list item, and they should now be retrieved then cleared. */
;;;376    		uxReturn = uxTaskResetEventItemValue();
00009a  f7fffffe          BL       uxTaskResetEventItemValue
00009e  4606              MOV      r6,r0
;;;377    
;;;378    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000a0  0180              LSLS     r0,r0,#6
0000a2  d410              BMI      |L10.198|
;;;379    		{
;;;380    			taskENTER_CRITICAL();
0000a4  f7fffffe          BL       vPortEnterCritical
;;;381    			{
;;;382    				/* The task timed out, just return the current event bit value. */
;;;383    				uxReturn = pxEventBits->uxEventBits;
;;;384    
;;;385    				/* It is possible that the event bits were updated between this
;;;386    				task leaving the Blocked state and running again. */
;;;387    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
0000a8  6826              LDR      r6,[r4,#0]
0000aa  4652              MOV      r2,r10
0000ac  4629              MOV      r1,r5
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       prvTestWaitCondition
0000b4  b128              CBZ      r0,|L10.194|
;;;388    				{
;;;389    					if( xClearOnExit != pdFALSE )
0000b6  f1b80f00          CMP      r8,#0
0000ba  d002              BEQ      |L10.194|
;;;390    					{
;;;391    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000bc  6820              LDR      r0,[r4,#0]
0000be  43a8              BICS     r0,r0,r5
0000c0  6020              STR      r0,[r4,#0]
                  |L10.194|
;;;392    					}
;;;393    					else
;;;394    					{
;;;395    						mtCOVERAGE_TEST_MARKER();
;;;396    					}
;;;397    				}
;;;398    				else
;;;399    				{
;;;400    					mtCOVERAGE_TEST_MARKER();
;;;401    				}
;;;402    			}
;;;403    			taskEXIT_CRITICAL();
0000c2  f7fffffe          BL       vPortExitCritical
                  |L10.198|
;;;404    
;;;405    			/* Prevent compiler warnings when trace macros are not used. */
;;;406    			xTimeoutOccurred = pdFALSE;
;;;407    		}
;;;408    		else
;;;409    		{
;;;410    			/* The task unblocked because the bits were set. */
;;;411    		}
;;;412    
;;;413    		/* The task blocked so control bits may have been set. */
;;;414    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000c6  f026467f          BIC      r6,r6,#0xff000000
                  |L10.202|
;;;415    	}
;;;416    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;417    
;;;418    	return uxReturn;
0000ca  4630              MOV      r0,r6
;;;419    }
0000cc  e8bd87f0          POP      {r4-r10,pc}
;;;420    /*-----------------------------------------------------------*/
                          ENDP

