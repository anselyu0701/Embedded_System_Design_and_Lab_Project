; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ohw3_freertos\main.o --asm_dir=./ --list_dir=--list --depend=hw3_freertos\main.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I../Drivers/CMSIS/Include -I..\FreeRTOS\include -I..\Middlewares\Third_Party\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\Middlewares\Third_Party\FreeRTOS\Source\include -I..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS -I.\RTE\_HW3_FreeRTOS -IC:\Users\ChangEn\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\ChangEn\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_HD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103x6 --omf_browse=hw3_freertos\main.crf ..\Src\main.c]
                          THUMB

                          AREA ||i.CalculatorTask||, CODE, READONLY, ALIGN=2

                  CalculatorTask PROC
;;;967    
;;;968    void CalculatorTask(void* t)
000000  4c10              LDR      r4,|L1.68|
;;;969    {
;;;970    	while(1)
;;;971    	{
;;;972    		if (mode == 1)
;;;973    		{
;;;974    			switch (calculatorMode)
;;;975    			{
;;;976    				case 1: // init
;;;977    					PrintCalculatorTitle();
;;;978    					calculatorMode++;
;;;979    					clearInputQueue();
;;;980    					break;
;;;981    				case 2: // waiting for enter
;;;982    					
;;;983    					break;
;;;984    			}
;;;985    		}
;;;986    		//calculatorFunction(10);
;;;987    		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
000002  4e11              LDR      r6,|L1.72|
000004  f44f4580          MOV      r5,#0x4000
;;;988    		HAL_UART_Transmit(&huart1,"Calculator.. \r\n",16,300);
000008  f44f7796          MOV      r7,#0x12c
                  |L1.12|
00000c  69a0              LDR      r0,[r4,#0x18]         ;972  ; mode
00000e  2801              CMP      r0,#1                 ;972
000010  d109              BNE      |L1.38|
000012  68a0              LDR      r0,[r4,#8]            ;974  ; calculatorMode
000014  2801              CMP      r0,#1                 ;974
000016  d106              BNE      |L1.38|
000018  f7fffffe          BL       PrintCalculatorTitle
00001c  68a0              LDR      r0,[r4,#8]            ;978  ; calculatorMode
00001e  1c40              ADDS     r0,r0,#1              ;978
000020  60a0              STR      r0,[r4,#8]            ;979  ; calculatorMode
000022  f7fffffe          BL       clearInputQueue
                  |L1.38|
000026  4629              MOV      r1,r5                 ;987
000028  4630              MOV      r0,r6                 ;987
00002a  f7fffffe          BL       HAL_GPIO_TogglePin
00002e  463b              MOV      r3,r7
000030  2210              MOVS     r2,#0x10
000032  a106              ADR      r1,|L1.76|
000034  4809              LDR      r0,|L1.92|
000036  f7fffffe          BL       HAL_UART_Transmit
;;;989    		osDelay(20);		
00003a  2014              MOVS     r0,#0x14
00003c  f7fffffe          BL       osDelay
000040  e7e4              B        |L1.12|
;;;990    	}
;;;991    }
;;;992    
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      ||.data||
                  |L1.72|
                          DCD      0x40010c00
                  |L1.76|
00004c  43616c63          DCB      "Calculator.. \r\n",0
000050  756c6174
000054  6f722e2e
000058  200d0a00
                  |L1.92|
                          DCD      ||area_number.27||

                          AREA ||i.ClockTask||, CODE, READONLY, ALIGN=2

                  ClockTask PROC
;;;994    
;;;995    void ClockTask(void* t)
000000  4e3f              LDR      r6,|L2.256|
;;;996    {
;;;997      /* USER CODE BEGIN 5 */
;;;998    	/*   initLCD    */
;;;999      /* Infinite loop */
;;;1000     for(;;)
;;;1001     {
;;;1002   		switch (clockMode)
;;;1003   		{
;;;1004   			case 1: //Initial show Title
;;;1005   				PrintClockTitleTitle();
;;;1006   				clockMode++;
;;;1007   				break;
;;;1008   			case 2: // time Running
;;;1009   				TimeCount();
;;;1010   				ShowTime();	
;;;1011   				osDelay(100);
;;;1012   				break;
;;;1013   			case 3: // set hour
;;;1014   				WriteLcdCom (0xC0+4);
;;;1015   				WriteLcdData(' ');
;;;1016   				WriteLcdData(' ');
;;;1017   				osDelay(50);
;;;1018   				WriteLcdCom (0xC0+4);
;;;1019   				WriteLcdData((time[0]/10)+'0');
;;;1020   				WriteLcdData((time[0]%10)+'0');
;;;1021   				osDelay(50);
;;;1022   				break;
;;;1023   			case 4: // set minuite
;;;1024   				WriteLcdCom (0xC0+7);
;;;1025   				WriteLcdData(' ');
;;;1026   				WriteLcdData(' ');
;;;1027   				osDelay(50);
;;;1028   				WriteLcdCom (0xC0+7);
;;;1029   				WriteLcdData((time[1]/10)+'0');
;;;1030   				WriteLcdData((time[1]%10)+'0');
;;;1031   				osDelay(50);
;;;1032   				break;
;;;1033   			case 5: // set second
;;;1034   				WriteLcdCom (0xC0+10);
;;;1035   				WriteLcdData(' ');
;;;1036   				WriteLcdData(' ');
;;;1037   				osDelay(50);
;;;1038   				WriteLcdCom (0xC0+10);
;;;1039   				WriteLcdData((time[2]/10)+'0');
;;;1040   				WriteLcdData((time[2]%10)+'0');
;;;1041   				osDelay(50);
;;;1042   				break;
;;;1043   			default: // calculator mode
;;;1044   				TimeCount();
;;;1045   				osDelay(100);
;;;1046   				break;
;;;1047   		}	
;;;1048   		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
000002  f8df8100          LDR      r8,|L2.260|
000006  f1060430          ADD      r4,r6,#0x30           ;1019
00000a  250a              MOVS     r5,#0xa               ;1019
00000c  f44f4700          MOV      r7,#0x8000
;;;1049   		HAL_UART_Transmit(&huart1,"Clock.. \r\n",16,300);		
000010  f44f7996          MOV      r9,#0x12c
                  |L2.20|
000014  6870              LDR      r0,[r6,#4]            ;1002  ; clockMode
000016  2806              CMP      r0,#6                 ;1002
000018  d26e              BCS      |L2.248|
00001a  e8dff000          TBB      [pc,r0]               ;1002
00001e  6d03              DCB      0x6d,0x03
000020  090f344c          DCB      0x09,0x0f,0x34,0x4c
000024  f7fffffe          BL       PrintClockTitleTitle
000028  6870              LDR      r0,[r6,#4]            ;1006  ; clockMode
00002a  1c40              ADDS     r0,r0,#1              ;1006
00002c  6070              STR      r0,[r6,#4]            ;1007  ; clockMode
00002e  e01f              B        |L2.112|
000030  f7fffffe          BL       TimeCount
000034  f7fffffe          BL       ShowTime
                  |L2.56|
000038  2064              MOVS     r0,#0x64              ;1045
00003a  e017              B        |L2.108|
00003c  20c4              MOVS     r0,#0xc4              ;1014
00003e  f7fffffe          BL       WriteLcdCom
000042  2020              MOVS     r0,#0x20              ;1015
000044  f7fffffe          BL       WriteLcdData
000048  2020              MOVS     r0,#0x20              ;1016
00004a  f7fffffe          BL       WriteLcdData
00004e  2032              MOVS     r0,#0x32              ;1017
000050  f7fffffe          BL       osDelay
000054  20c4              MOVS     r0,#0xc4              ;1018
000056  f7fffffe          BL       WriteLcdCom
00005a  6820              LDR      r0,[r4,#0]            ;1019  ; time
00005c  fb90f0f5          SDIV     r0,r0,r5              ;1019
000060  3030              ADDS     r0,r0,#0x30           ;1019
000062  b2c0              UXTB     r0,r0                 ;1019
000064  f7fffffe          BL       WriteLcdData
000068  6820              LDR      r0,[r4,#0]            ;1022  ; time
00006a  e03b              B        |L2.228|
                  |L2.108|
00006c  f7fffffe          BL       osDelay
                  |L2.112|
000070  4639              MOV      r1,r7                 ;1048
000072  4640              MOV      r0,r8                 ;1048
000074  f7fffffe          BL       HAL_GPIO_TogglePin
000078  464b              MOV      r3,r9
00007a  2210              MOVS     r2,#0x10
00007c  a122              ADR      r1,|L2.264|
00007e  4825              LDR      r0,|L2.276|
000080  f7fffffe          BL       HAL_UART_Transmit
000084  e7c6              B        |L2.20|
000086  20c7              MOVS     r0,#0xc7              ;1024
000088  f7fffffe          BL       WriteLcdCom
00008c  2020              MOVS     r0,#0x20              ;1025
00008e  f7fffffe          BL       WriteLcdData
000092  2020              MOVS     r0,#0x20              ;1026
000094  f7fffffe          BL       WriteLcdData
000098  2032              MOVS     r0,#0x32              ;1027
00009a  f7fffffe          BL       osDelay
00009e  20c7              MOVS     r0,#0xc7              ;1028
0000a0  f7fffffe          BL       WriteLcdCom
0000a4  6860              LDR      r0,[r4,#4]            ;1029  ; time
0000a6  fb90f0f5          SDIV     r0,r0,r5              ;1029
0000aa  3030              ADDS     r0,r0,#0x30           ;1029
0000ac  b2c0              UXTB     r0,r0                 ;1029
0000ae  f7fffffe          BL       WriteLcdData
0000b2  6860              LDR      r0,[r4,#4]            ;1032  ; time
0000b4  e016              B        |L2.228|
0000b6  20ca              MOVS     r0,#0xca              ;1034
0000b8  f7fffffe          BL       WriteLcdCom
0000bc  2020              MOVS     r0,#0x20              ;1035
0000be  f7fffffe          BL       WriteLcdData
0000c2  2020              MOVS     r0,#0x20              ;1036
0000c4  f7fffffe          BL       WriteLcdData
0000c8  2032              MOVS     r0,#0x32              ;1037
0000ca  f7fffffe          BL       osDelay
0000ce  20ca              MOVS     r0,#0xca              ;1038
0000d0  f7fffffe          BL       WriteLcdCom
0000d4  68a0              LDR      r0,[r4,#8]            ;1039  ; time
0000d6  fb90f0f5          SDIV     r0,r0,r5              ;1039
0000da  3030              ADDS     r0,r0,#0x30           ;1039
0000dc  b2c0              UXTB     r0,r0                 ;1039
0000de  f7fffffe          BL       WriteLcdData
0000e2  68a0              LDR      r0,[r4,#8]            ;1040  ; time
                  |L2.228|
0000e4  fb90f1f5          SDIV     r1,r0,r5              ;1040
0000e8  fb050011          MLS      r0,r5,r1,r0           ;1040
0000ec  3030              ADDS     r0,r0,#0x30           ;1040
0000ee  b2c0              UXTB     r0,r0                 ;1040
0000f0  f7fffffe          BL       WriteLcdData
0000f4  2032              MOVS     r0,#0x32              ;1041
0000f6  e7b9              B        |L2.108|
                  |L2.248|
0000f8  f7fffffe          BL       TimeCount
0000fc  e79c              B        |L2.56|
;;;1050     }
;;;1051     /* USER CODE END 5 */ 
;;;1052   }
;;;1053   
                          ENDP

0000fe  0000              DCW      0x0000
                  |L2.256|
                          DCD      ||.data||
                  |L2.260|
                          DCD      0x40010c00
                  |L2.264|
000108  436c6f63          DCB      "Clock.. \r\n",0
00010c  6b2e2e20
000110  0d0a00  
000113  00                DCB      0
                  |L2.276|
                          DCD      ||area_number.27||

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
                  |L3.0|
;;;1080     */
;;;1081   void Error_Handler(void)
000000  e7fe              B        |L3.0|
;;;1082   {
;;;1083     /* USER CODE BEGIN Error_Handler */
;;;1084     /* User can add his own implementation to report the HAL error return state */
;;;1085     while(1) 
;;;1086     {
;;;1087     }
;;;1088     /* USER CODE END Error_Handler */ 
;;;1089   }
;;;1090   
                          ENDP


                          AREA ||i.HAL_TIM_PeriodElapsedCallback||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PeriodElapsedCallback PROC
;;;1061     */
;;;1062   void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
000000  6800              LDR      r0,[r0,#0]
;;;1063   {
;;;1064   /* USER CODE BEGIN Callback 0 */
;;;1065   
;;;1066   /* USER CODE END Callback 0 */
;;;1067     if (htim->Instance == TIM1) {
000002  4903              LDR      r1,|L4.16|
000004  4288              CMP      r0,r1
000006  d101              BNE      |L4.12|
;;;1068       HAL_IncTick();
000008  f7ffbffe          B.W      HAL_IncTick
                  |L4.12|
;;;1069      
;;;1070     }
;;;1071   /* USER CODE BEGIN Callback 1 */
;;;1072   
;;;1073   /* USER CODE END Callback 1 */
;;;1074   }
00000c  4770              BX       lr
;;;1075   
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40012c00

                          AREA ||i.MX_GPIO_Init||, CODE, READONLY, ALIGN=2

                  MX_GPIO_Init PROC
;;;270    */
;;;271    static void MX_GPIO_Init(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;272    {
;;;273    
;;;274      GPIO_InitTypeDef GPIO_InitStruct;
;;;275    
;;;276      /* GPIO Ports Clock Enable */
;;;277      __HAL_RCC_GPIOC_CLK_ENABLE();
000004  4831              LDR      r0,|L5.204|
000006  b086              SUB      sp,sp,#0x18           ;272
000008  6981              LDR      r1,[r0,#0x18]
00000a  f0410110          ORR      r1,r1,#0x10
00000e  6181              STR      r1,[r0,#0x18]
000010  6981              LDR      r1,[r0,#0x18]
000012  f0010110          AND      r1,r1,#0x10
;;;278      __HAL_RCC_GPIOD_CLK_ENABLE();
000016  9104              STR      r1,[sp,#0x10]
000018  6981              LDR      r1,[r0,#0x18]
00001a  f0410120          ORR      r1,r1,#0x20
00001e  6181              STR      r1,[r0,#0x18]
000020  6981              LDR      r1,[r0,#0x18]
000022  f0010120          AND      r1,r1,#0x20
;;;279      __HAL_RCC_GPIOA_CLK_ENABLE();
000026  9104              STR      r1,[sp,#0x10]
000028  6981              LDR      r1,[r0,#0x18]
00002a  f0410104          ORR      r1,r1,#4
00002e  6181              STR      r1,[r0,#0x18]
000030  6981              LDR      r1,[r0,#0x18]
000032  f0010104          AND      r1,r1,#4
;;;280      __HAL_RCC_GPIOB_CLK_ENABLE();
000036  9104              STR      r1,[sp,#0x10]
000038  6981              LDR      r1,[r0,#0x18]
00003a  f0410108          ORR      r1,r1,#8
00003e  6181              STR      r1,[r0,#0x18]
000040  6980              LDR      r0,[r0,#0x18]
;;;281    
;;;282      /*Configure GPIO pins : PC13 PC14 PC15 PC0 
;;;283                               PC1 PC2 PC3 PC4 
;;;284                               PC5 PC6 PC7 PC8 
;;;285                               PC9 PC10 PC11 PC12 */
;;;286      GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
000042  f64f77ff          MOV      r7,#0xffff
;;;287                              |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
;;;288                              |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
;;;289                              |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
;;;290      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
000046  2403              MOVS     r4,#3
000048  f0000008          AND      r0,r0,#8              ;280
;;;291      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
00004c  e9cd7400          STRD     r7,r4,[sp,#0]
000050  9004              STR      r0,[sp,#0x10]
000052  4669              MOV      r1,sp
000054  481e              LDR      r0,|L5.208|
000056  f7fffffe          BL       HAL_GPIO_Init
;;;292    
;;;293      /*Configure GPIO pins : PD0 PD1 PD2 */
;;;294      GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
00005a  2007              MOVS     r0,#7
;;;295      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
;;;296      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
00005c  e9cd0400          STRD     r0,r4,[sp,#0]
000060  4669              MOV      r1,sp
000062  481c              LDR      r0,|L5.212|
000064  f7fffffe          BL       HAL_GPIO_Init
;;;297    
;;;298      /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4 
;;;299                               PA6 PA8 PA11 PA12 
;;;300                               PA13 PA14 PA15 */
;;;301      GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
000068  f64f1040          MOV      r0,#0xf940
;;;302                              |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
;;;303      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
00006c  2401              MOVS     r4,#1
;;;304    	GPIO_InitStruct.Pull = GPIO_NOPULL;
00006e  2500              MOVS     r5,#0
;;;305    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000070  2602              MOVS     r6,#2
;;;306      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000072  e88d0071          STM      sp,{r0,r4-r6}
000076  f8df8060          LDR      r8,|L5.216|
00007a  4669              MOV      r1,sp
00007c  4640              MOV      r0,r8
00007e  f7fffffe          BL       HAL_GPIO_Init
;;;307    	
;;;308    	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
000082  203f              MOVS     r0,#0x3f
000084  e9cd0500          STRD     r0,r5,[sp,#0]
;;;309    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
;;;310    	GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;311    	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000088  4669              MOV      r1,sp
00008a  4640              MOV      r0,r8
00008c  9502              STR      r5,[sp,#8]
00008e  f7fffffe          BL       HAL_GPIO_Init
;;;312    	
;;;313    	
;;;314      /*Configure GPIO pin : PA9 */
;;;315      GPIO_InitStruct.Pin = GPIO_PIN_9;
000092  0260              LSLS     r0,r4,#9
;;;316      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
;;;317      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
;;;318      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000094  e9cd0400          STRD     r0,r4,[sp,#0]
000098  4669              MOV      r1,sp
00009a  9603              STR      r6,[sp,#0xc]
00009c  4640              MOV      r0,r8
00009e  f7fffffe          BL       HAL_GPIO_Init
;;;319    
;;;320      /*Configure GPIO pins : PB0 PB1 PB2 PB10 
;;;321                               PB11 PB12 PB13 PB14 
;;;322                               PB15 PB3 PB4 PB5 
;;;323                               PB6 PB7 PB8 PB9 */
;;;324      GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
;;;325                              |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
;;;326                              |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_0
;;;327                              |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
;;;328      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
;;;329    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
;;;330      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
0000a2  e9cd7400          STRD     r7,r4,[sp,#0]
0000a6  4669              MOV      r1,sp
0000a8  480c              LDR      r0,|L5.220|
0000aa  9603              STR      r6,[sp,#0xc]
0000ac  f7fffffe          BL       HAL_GPIO_Init
;;;331    
;;;332      /*Configure peripheral I/O remapping */
;;;333      __HAL_AFIO_REMAP_PD01_ENABLE();
0000b0  480b              LDR      r0,|L5.224|
0000b2  6841              LDR      r1,[r0,#4]
0000b4  f4414100          ORR      r1,r1,#0x8000
0000b8  6041              STR      r1,[r0,#4]
;;;334    
;;;335      /*Configure GPIO pin Output Level */
;;;336      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
0000ba  2200              MOVS     r2,#0
0000bc  03e1              LSLS     r1,r4,#15
0000be  4640              MOV      r0,r8
0000c0  f7fffffe          BL       HAL_GPIO_WritePin
;;;337    
;;;338    
;;;339    }
0000c4  b006              ADD      sp,sp,#0x18
0000c6  e8bd81f0          POP      {r4-r8,pc}
;;;340    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L5.204|
                          DCD      0x40021000
                  |L5.208|
                          DCD      0x40011000
                  |L5.212|
                          DCD      0x40011400
                  |L5.216|
                          DCD      0x40010800
                  |L5.220|
                          DCD      0x40010c00
                  |L5.224|
                          DCD      0x40010000

                          AREA ||i.PrintCalculatorTitle||, CODE, READONLY, ALIGN=1

                  PrintCalculatorTitle PROC
;;;483    /*    Calculator    */
;;;484    void PrintCalculatorTitle()
000000  b510              PUSH     {r4,lr}
;;;485    {
;;;486    	WriteLcdCom (0x01); // clear
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       WriteLcdCom
;;;487    	WriteLcdCom (0x06); //display setting
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       WriteLcdCom
;;;488    	WriteLcdCom (0x38); //display two line	
00000e  2038              MOVS     r0,#0x38
000010  f7fffffe          BL       WriteLcdCom
;;;489    	WriteLcdCom (0x0C); //display on
000014  200c              MOVS     r0,#0xc
000016  f7fffffe          BL       WriteLcdCom
;;;490    	WriteLcdCom (0x80+3);
00001a  2083              MOVS     r0,#0x83
00001c  f7fffffe          BL       WriteLcdCom
;;;491    	WriteLcdData (0x4E); // 'N'
000020  204e              MOVS     r0,#0x4e
000022  f7fffffe          BL       WriteLcdData
;;;492    	WriteLcdData (0x54); // 'T'
000026  2054              MOVS     r0,#0x54
000028  f7fffffe          BL       WriteLcdData
;;;493    	WriteLcdData (0x55); // 'U'
00002c  2055              MOVS     r0,#0x55
00002e  f7fffffe          BL       WriteLcdData
;;;494    	WriteLcdData (0x53); // 'S'
000032  2053              MOVS     r0,#0x53
000034  f7fffffe          BL       WriteLcdData
;;;495    	WriteLcdData (0x54); // 'T'		
000038  2054              MOVS     r0,#0x54
00003a  f7fffffe          BL       WriteLcdData
;;;496    	WriteLcdData (0x20); // ' '		
00003e  2020              MOVS     r0,#0x20
000040  f7fffffe          BL       WriteLcdData
;;;497    	WriteLcdData (0x43); // 'C'	
000044  2043              MOVS     r0,#0x43
000046  f7fffffe          BL       WriteLcdData
;;;498    	WriteLcdData ('A'); // 'A'	
00004a  2041              MOVS     r0,#0x41
00004c  f7fffffe          BL       WriteLcdData
;;;499    	WriteLcdData ('L'); // 'L'	
000050  204c              MOVS     r0,#0x4c
000052  f7fffffe          BL       WriteLcdData
;;;500    	WriteLcdData ('C'); // 'C'	
000056  e8bd4010          POP      {r4,lr}
00005a  2043              MOVS     r0,#0x43
00005c  f7ffbffe          B.W      WriteLcdData
;;;501    }
;;;502    
                          ENDP


                          AREA ||i.PrintClockTitleTitle||, CODE, READONLY, ALIGN=1

                  PrintClockTitleTitle PROC
;;;406    /*     Clock     */
;;;407    void PrintClockTitleTitle ()
000000  b510              PUSH     {r4,lr}
;;;408    {
;;;409    	WriteLcdCom (0x01); // clear
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       WriteLcdCom
;;;410    	WriteLcdCom (0x06); //display setting
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       WriteLcdCom
;;;411    	WriteLcdCom (0x38); //display two line	
00000e  2038              MOVS     r0,#0x38
000010  f7fffffe          BL       WriteLcdCom
;;;412    	WriteLcdCom (0x0C); //display on
000014  200c              MOVS     r0,#0xc
000016  f7fffffe          BL       WriteLcdCom
;;;413    	WriteLcdCom (0x80+3);
00001a  2083              MOVS     r0,#0x83
00001c  f7fffffe          BL       WriteLcdCom
;;;414    	WriteLcdData (0x4E); // 'N'
000020  204e              MOVS     r0,#0x4e
000022  f7fffffe          BL       WriteLcdData
;;;415    	WriteLcdData (0x54); // 'T'
000026  2054              MOVS     r0,#0x54
000028  f7fffffe          BL       WriteLcdData
;;;416    	WriteLcdData (0x55); // 'U'
00002c  2055              MOVS     r0,#0x55
00002e  f7fffffe          BL       WriteLcdData
;;;417    	WriteLcdData (0x53); // 'S'
000032  2053              MOVS     r0,#0x53
000034  f7fffffe          BL       WriteLcdData
;;;418    	WriteLcdData (0x54); // 'T'		
000038  2054              MOVS     r0,#0x54
00003a  f7fffffe          BL       WriteLcdData
;;;419    	WriteLcdData (0x20); // ' '		
00003e  2020              MOVS     r0,#0x20
000040  f7fffffe          BL       WriteLcdData
;;;420    	WriteLcdData (0x43); // 'C'	
000044  2043              MOVS     r0,#0x43
000046  f7fffffe          BL       WriteLcdData
;;;421    	WriteLcdData (0x4C); // 'L'	
00004a  204c              MOVS     r0,#0x4c
00004c  f7fffffe          BL       WriteLcdData
;;;422    	WriteLcdData (0x4F); // 'O'	
000050  204f              MOVS     r0,#0x4f
000052  f7fffffe          BL       WriteLcdData
;;;423    	WriteLcdData (0x43); // 'C'	
000056  2043              MOVS     r0,#0x43
000058  f7fffffe          BL       WriteLcdData
;;;424    	WriteLcdData (0x4B); // 'K'
00005c  e8bd4010          POP      {r4,lr}
000060  204b              MOVS     r0,#0x4b
000062  f7ffbffe          B.W      WriteLcdData
;;;425    }
;;;426    
                          ENDP


                          AREA ||i.ScanKeyPadTask||, CODE, READONLY, ALIGN=2

                  ScanKeyPadTask PROC
;;;957    /*     Task Function *    */
;;;958    void ScanKeyPadTask(void* t)
000000  f44f7496          MOV      r4,#0x12c
                  |L8.4|
;;;959    {
;;;960    	while(1)
;;;961    	{
;;;962    		scanKeyPad();
000004  f7fffffe          BL       scanKeyPad
;;;963    		osDelay(20);
000008  2014              MOVS     r0,#0x14
00000a  f7fffffe          BL       osDelay
;;;964    		HAL_UART_Transmit(&huart1,"ScanKeyPad.. \r\n",16,300);		
00000e  4623              MOV      r3,r4
000010  2210              MOVS     r2,#0x10
000012  a102              ADR      r1,|L8.28|
000014  4805              LDR      r0,|L8.44|
000016  f7fffffe          BL       HAL_UART_Transmit
00001a  e7f3              B        |L8.4|
;;;965    	}
;;;966    }
;;;967    
                          ENDP

                  |L8.28|
00001c  5363616e          DCB      "ScanKeyPad.. \r\n",0
000020  4b657950
000024  61642e2e
000028  200d0a00
                  |L8.44|
                          DCD      ||area_number.27||

                          AREA ||i.ShowTime||, CODE, READONLY, ALIGN=2

                  ShowTime PROC
;;;426    
;;;427    void ShowTime ()
000000  b570              PUSH     {r4-r6,lr}
;;;428    {
;;;429    	WriteLcdCom (0xC0+4);
000002  20c4              MOVS     r0,#0xc4
000004  f7fffffe          BL       WriteLcdCom
;;;430    	WriteLcdData ((time[0]/10)+'0');
000008  4c1c              LDR      r4,|L9.124|
00000a  250a              MOVS     r5,#0xa
00000c  6820              LDR      r0,[r4,#0]  ; time
00000e  fb90f0f5          SDIV     r0,r0,r5
000012  3030              ADDS     r0,r0,#0x30
000014  b2c0              UXTB     r0,r0
000016  f7fffffe          BL       WriteLcdData
;;;431    	WriteLcdData ((time[0]%10)+'0');
00001a  6820              LDR      r0,[r4,#0]  ; time
00001c  fb90f1f5          SDIV     r1,r0,r5
000020  fb050011          MLS      r0,r5,r1,r0
000024  3030              ADDS     r0,r0,#0x30
000026  b2c0              UXTB     r0,r0
000028  f7fffffe          BL       WriteLcdData
;;;432    	WriteLcdData (':');
00002c  203a              MOVS     r0,#0x3a
00002e  f7fffffe          BL       WriteLcdData
;;;433    	WriteLcdData ((time[1]/10)+'0');
000032  6860              LDR      r0,[r4,#4]  ; time
000034  fb90f0f5          SDIV     r0,r0,r5
000038  3030              ADDS     r0,r0,#0x30
00003a  b2c0              UXTB     r0,r0
00003c  f7fffffe          BL       WriteLcdData
;;;434    	WriteLcdData ((time[1]%10)+'0');
000040  6860              LDR      r0,[r4,#4]  ; time
000042  fb90f1f5          SDIV     r1,r0,r5
000046  fb050011          MLS      r0,r5,r1,r0
00004a  3030              ADDS     r0,r0,#0x30
00004c  b2c0              UXTB     r0,r0
00004e  f7fffffe          BL       WriteLcdData
;;;435    	WriteLcdData (':');
000052  203a              MOVS     r0,#0x3a
000054  f7fffffe          BL       WriteLcdData
;;;436    	WriteLcdData ((time[2]/10)+'0');
000058  68a0              LDR      r0,[r4,#8]  ; time
00005a  fb90f0f5          SDIV     r0,r0,r5
00005e  3030              ADDS     r0,r0,#0x30
000060  b2c0              UXTB     r0,r0
000062  f7fffffe          BL       WriteLcdData
;;;437    	WriteLcdData ((time[2]%10)+'0');
000066  68a0              LDR      r0,[r4,#8]  ; time
000068  fb90f1f5          SDIV     r1,r0,r5
00006c  fb050011          MLS      r0,r5,r1,r0
000070  e8bd4070          POP      {r4-r6,lr}
000074  3030              ADDS     r0,r0,#0x30
000076  b2c0              UXTB     r0,r0
000078  f7ffbffe          B.W      WriteLcdData
;;;438    }
;;;439    
                          ENDP

                  |L9.124|
                          DCD      ||.data||+0x30

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=1

                  SystemClock_Config PROC
;;;176    */
;;;177    void SystemClock_Config(void)
000000  b510              PUSH     {r4,lr}
;;;178    {
000002  b090              SUB      sp,sp,#0x40
;;;179    
;;;180      RCC_OscInitTypeDef RCC_OscInitStruct;
;;;181      RCC_ClkInitTypeDef RCC_ClkInitStruct;
;;;182    
;;;183      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
;;;184      RCC_OscInitStruct.HSIState = RCC_HSI_ON;
000004  2001              MOVS     r0,#1
000006  2402              MOVS     r4,#2                 ;183
;;;185      RCC_OscInitStruct.HSICalibrationValue = 16;
000008  9004              STR      r0,[sp,#0x10]
00000a  9400              STR      r4,[sp,#0]
00000c  2010              MOVS     r0,#0x10
;;;186      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
;;;187      RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
00000e  9005              STR      r0,[sp,#0x14]
000010  2000              MOVS     r0,#0
000012  e9cd4007          STRD     r4,r0,[sp,#0x1c]
;;;188      RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
000016  04a0              LSLS     r0,r4,#18
;;;189      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
000018  9009              STR      r0,[sp,#0x24]
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       HAL_RCC_OscConfig
000020  b100              CBZ      r0,|L10.36|
                  |L10.34|
000022  e7fe              B        |L10.34|
                  |L10.36|
;;;190      {
;;;191        Error_Handler();
;;;192      }
;;;193    
;;;194      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
000024  200f              MOVS     r0,#0xf
000026  e9cd040a          STRD     r0,r4,[sp,#0x28]
;;;195                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
;;;196      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
;;;197      RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
00002a  2080              MOVS     r0,#0x80
;;;198      RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
00002c  900c              STR      r0,[sp,#0x30]
00002e  f44f60a0          MOV      r0,#0x500
;;;199      RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
000032  900d              STR      r0,[sp,#0x34]
000034  f44f6080          MOV      r0,#0x400
;;;200      if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
000038  900e              STR      r0,[sp,#0x38]
00003a  2100              MOVS     r1,#0
00003c  a80a              ADD      r0,sp,#0x28
00003e  f7fffffe          BL       HAL_RCC_ClockConfig
000042  b100              CBZ      r0,|L10.70|
                  |L10.68|
000044  e7fe              B        |L10.68|
                  |L10.70|
;;;201      {
;;;202        Error_Handler();
;;;203      }
;;;204    
;;;205      HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
000046  f7fffffe          BL       HAL_RCC_GetHCLKFreq
00004a  f44f717a          MOV      r1,#0x3e8
00004e  fbb0f0f1          UDIV     r0,r0,r1
000052  f7fffffe          BL       HAL_SYSTICK_Config
;;;206    
;;;207      HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
000056  2004              MOVS     r0,#4
000058  f7fffffe          BL       HAL_SYSTICK_CLKSourceConfig
;;;208    
;;;209      /* SysTick_IRQn interrupt configuration */
;;;210      HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
00005c  2200              MOVS     r2,#0
00005e  210f              MOVS     r1,#0xf
000060  1e50              SUBS     r0,r2,#1
000062  f7fffffe          BL       HAL_NVIC_SetPriority
;;;211    }
000066  b010              ADD      sp,sp,#0x40
000068  bd10              POP      {r4,pc}
;;;212    
                          ENDP


                          AREA ||i.TimeCount||, CODE, READONLY, ALIGN=2

                  TimeCount PROC
;;;439    
;;;440    void TimeCount ()
000000  480c              LDR      r0,|L11.52|
;;;441    {
;;;442    	time[2]++;
000002  2100              MOVS     r1,#0
000004  6882              LDR      r2,[r0,#8]  ; time
000006  1c52              ADDS     r2,r2,#1
;;;443    	if(time[2]>59)
000008  6082              STR      r2,[r0,#8]  ; time
00000a  2a3b              CMP      r2,#0x3b
00000c  dc01              BGT      |L11.18|
;;;444    	{
;;;445    		time[2] = 0;
;;;446    		time[1]++;
00000e  6842              LDR      r2,[r0,#4]  ; time
000010  e003              B        |L11.26|
                  |L11.18|
000012  6081              STR      r1,[r0,#8]  ; time
000014  6842              LDR      r2,[r0,#4]  ; time
000016  1c52              ADDS     r2,r2,#1
000018  6042              STR      r2,[r0,#4]  ; time
                  |L11.26|
;;;447    	}
;;;448    	if (time[1] > 59)
00001a  2a3b              CMP      r2,#0x3b
00001c  dc01              BGT      |L11.34|
;;;449    	{
;;;450    		time[1] = 0;
;;;451    		time[0]++;
00001e  6802              LDR      r2,[r0,#0]  ; time
000020  e003              B        |L11.42|
                  |L11.34|
000022  6041              STR      r1,[r0,#4]  ; time
000024  6802              LDR      r2,[r0,#0]  ; time
000026  1c52              ADDS     r2,r2,#1
000028  6002              STR      r2,[r0,#0]  ; time
                  |L11.42|
;;;452    	}
;;;453    	if (time[0] > 23)
00002a  2a17              CMP      r2,#0x17
00002c  dd00              BLE      |L11.48|
;;;454    	{
;;;455    		time[0] = 0;
00002e  6001              STR      r1,[r0,#0]  ; time
                  |L11.48|
;;;456    	}
;;;457    }
000030  4770              BX       lr
;;;458    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      ||.data||+0x30

                          AREA ||i.WriteLcdCom||, CODE, READONLY, ALIGN=2

                  WriteLcdCom PROC
;;;374    }
;;;375    void WriteLcdCom (uint8_t com)
000000  b570              PUSH     {r4-r6,lr}
;;;376    {
;;;377    	GPIOB -> BSRR = 0x00ff0000;
000002  4918              LDR      r1,|L12.100|
000004  f44f027f          MOV      r2,#0xff0000
000008  600a              STR      r2,[r1,#0]
;;;378    	GPIOB -> BSRR = com;
00000a  6008              STR      r0,[r1,#0]
;;;379    	osDelay(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       osDelay
;;;380    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // write data to LCD
000012  4c14              LDR      r4,|L12.100|
000014  2200              MOVS     r2,#0
000016  3c10              SUBS     r4,r4,#0x10
000018  f44f7100          MOV      r1,#0x200
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       HAL_GPIO_WritePin
;;;381    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // instruction input
000022  2200              MOVS     r2,#0
000024  1521              ASRS     r1,r4,#20
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_GPIO_WritePin
;;;382    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // initial HIGH enable
00002c  15a5              ASRS     r5,r4,#22
00002e  2200              MOVS     r2,#0
000030  4629              MOV      r1,r5
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_GPIO_WritePin
;;;383    	osDelay(1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       osDelay
;;;384    	// negative edge trigger
;;;385    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
00003e  2201              MOVS     r2,#1
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       HAL_GPIO_WritePin
;;;386    	osDelay(1);
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       osDelay
;;;387    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
00004e  2200              MOVS     r2,#0
000050  4629              MOV      r1,r5
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       HAL_GPIO_WritePin
;;;388    	osDelay(2);
000058  e8bd4070          POP      {r4-r6,lr}
00005c  2002              MOVS     r0,#2
00005e  f7ffbffe          B.W      osDelay
;;;389    }
;;;390    
                          ENDP

000062  0000              DCW      0x0000
                  |L12.100|
                          DCD      0x40010c10

                          AREA ||i.WriteLcdData||, CODE, READONLY, ALIGN=2

                  WriteLcdData PROC
;;;390    
;;;391    void WriteLcdData (uint8_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;392    {
;;;393    	GPIOB -> BSRR = 0x00ff0000;
000002  4918              LDR      r1,|L13.100|
000004  f44f027f          MOV      r2,#0xff0000
000008  600a              STR      r2,[r1,#0]
;;;394    	GPIOB -> BSRR = data;
00000a  6008              STR      r0,[r1,#0]
;;;395    	osDelay(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       osDelay
;;;396    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // write data to LCD
000012  4c14              LDR      r4,|L13.100|
000014  2200              MOVS     r2,#0
000016  3c10              SUBS     r4,r4,#0x10
000018  f44f7100          MOV      r1,#0x200
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       HAL_GPIO_WritePin
;;;397    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // data input
000022  2201              MOVS     r2,#1
000024  0291              LSLS     r1,r2,#10
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_GPIO_WritePin
;;;398    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // initial HIGH enable
00002c  15a5              ASRS     r5,r4,#22
00002e  2200              MOVS     r2,#0
000030  4629              MOV      r1,r5
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_GPIO_WritePin
;;;399    	osDelay(1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       osDelay
;;;400    	// negative edge trigger
;;;401    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
00003e  2201              MOVS     r2,#1
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       HAL_GPIO_WritePin
;;;402    	osDelay(1);
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       osDelay
;;;403    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
00004e  2200              MOVS     r2,#0
000050  4629              MOV      r1,r5
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       HAL_GPIO_WritePin
;;;404    	osDelay(2);
000058  e8bd4070          POP      {r4-r6,lr}
00005c  2002              MOVS     r0,#2
00005e  f7ffbffe          B.W      osDelay
;;;405    }
;;;406    /*     Clock     */
                          ENDP

000062  0000              DCW      0x0000
                  |L13.100|
                          DCD      0x40010c10

                          AREA ||i.calShowLCD||, CODE, READONLY, ALIGN=2

                  calShowLCD PROC
;;;342    /* USER CODE END 4 */
;;;343    void calShowLCD(int input, int iPointer)
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
;;;345    	int index1;
;;;346    	WriteLcdCom(0xC0+15-iPointer);
000002  f1c100cf          RSB      r0,r1,#0xcf
000006  460c              MOV      r4,r1                 ;344
000008  b2c0              UXTB     r0,r0
00000a  f7fffffe          BL       WriteLcdCom
;;;347    	for (index1 = 0; index1 <= iPointer+1; index1++)
00000e  2500              MOVS     r5,#0
;;;348    	{
;;;349    		switch (inputQueue[index1])
000010  4e13              LDR      r6,|L14.96|
000012  1c64              ADDS     r4,r4,#1
000014  e019              B        |L14.74|
000016  bf00              NOP      
                  |L14.24|
000018  f8560025          LDR      r0,[r6,r5,LSL #2]
00001c  2818              CMP      r0,#0x18
00001e  d019              BEQ      |L14.84|
000020  dc06              BGT      |L14.48|
000022  2815              CMP      r0,#0x15
000024  d00b              BEQ      |L14.62|
000026  2816              CMP      r0,#0x16
000028  d00b              BEQ      |L14.66|
00002a  2817              CMP      r0,#0x17
00002c  d104              BNE      |L14.56|
00002e  e00f              B        |L14.80|
                  |L14.48|
000030  281e              CMP      r0,#0x1e
000032  d011              BEQ      |L14.88|
000034  2828              CMP      r0,#0x28
000036  d011              BEQ      |L14.92|
                  |L14.56|
000038  3030              ADDS     r0,r0,#0x30
;;;350    		{
;;;351    			case 21:
;;;352    				WriteLcdData('+');	
;;;353    				break;
;;;354    			case 22:
;;;355    				WriteLcdData('-');	
;;;356    				break;
;;;357    			case 23:
;;;358    				WriteLcdData('*');	
;;;359    				break;
;;;360    			case 24:
;;;361    				WriteLcdData('/');	
;;;362    				break;
;;;363    			case 30:
;;;364    				WriteLcdData('=');	
;;;365    				break;
;;;366    			case 40:
;;;367    				WriteLcdData('.');	
;;;368    				break;
;;;369    			default:
;;;370    				WriteLcdData(inputQueue[index1]+'0');	
00003a  b2c0              UXTB     r0,r0
;;;371    				break;
00003c  e002              B        |L14.68|
                  |L14.62|
00003e  202b              MOVS     r0,#0x2b              ;352
000040  e000              B        |L14.68|
                  |L14.66|
000042  202d              MOVS     r0,#0x2d              ;355
                  |L14.68|
000044  f7fffffe          BL       WriteLcdData
000048  1c6d              ADDS     r5,r5,#1              ;352
                  |L14.74|
00004a  42a5              CMP      r5,r4                 ;347
00004c  dde4              BLE      |L14.24|
;;;372    		}
;;;373    	}
;;;374    }
00004e  bd70              POP      {r4-r6,pc}
                  |L14.80|
000050  202a              MOVS     r0,#0x2a              ;358
000052  e7f7              B        |L14.68|
                  |L14.84|
000054  202f              MOVS     r0,#0x2f              ;361
000056  e7f5              B        |L14.68|
                  |L14.88|
000058  203d              MOVS     r0,#0x3d              ;364
00005a  e7f3              B        |L14.68|
                  |L14.92|
00005c  202e              MOVS     r0,#0x2e              ;367
00005e  e7f1              B        |L14.68|
;;;375    void WriteLcdCom (uint8_t com)
                          ENDP

                  |L14.96|
                          DCD      ||area_number.27||+0x40

                          AREA ||i.calculate||, CODE, READONLY, ALIGN=2

                  calculate PROC
;;;577    }
;;;578    void calculate(double number[], int operation, int inputLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;579    {
;;;580    	bool isError = false;
;;;581    	bool bignum = false;
;;;582    	switch (operation)
;;;583    	{
;;;584    		case 21: // +
;;;585    			calculateResult = number[0] + number[1];
000004  4d3e              LDR      r5,|L15.256|
000006  4604              MOV      r4,r0                 ;579
000008  2915              CMP      r1,#0x15              ;582
00000a  d009              BEQ      |L15.32|
00000c  2916              CMP      r1,#0x16              ;582
00000e  d00c              BEQ      |L15.42|
;;;586    			break;
;;;587    		case 22: // -
;;;588    			calculateResult = number[0] - number[1];
;;;589    			break;
;;;590    		case 23: // *
;;;591    			if (number[0] == 789456123 || number[1] == 789456123)
000010  4f3c              LDR      r7,|L15.260|
000012  f04f46fb          MOV      r6,#0x7d800000
000016  2917              CMP      r1,#0x17              ;582
000018  d00c              BEQ      |L15.52|
00001a  2918              CMP      r1,#0x18              ;582
00001c  d140              BNE      |L15.160|
00001e  e043              B        |L15.168|
                  |L15.32|
000020  e894000f          LDM      r4,{r0-r3}            ;582
000024  f7fffffe          BL       __aeabi_dadd
000028  e038              B        |L15.156|
                  |L15.42|
00002a  e894000f          LDM      r4,{r0-r3}            ;586
00002e  f7fffffe          BL       __aeabi_dsub
000032  e033              B        |L15.156|
                  |L15.52|
000034  e9d40100          LDRD     r0,r1,[r4,#0]
000038  4632              MOV      r2,r6
00003a  463b              MOV      r3,r7
00003c  f7fffffe          BL       __aeabi_cdcmpeq
000040  d006              BEQ      |L15.80|
000042  e9d40102          LDRD     r0,r1,[r4,#8]
000046  4632              MOV      r2,r6
000048  463b              MOV      r3,r7
00004a  f7fffffe          BL       __aeabi_cdcmpeq
00004e  d121              BNE      |L15.148|
                  |L15.80|
;;;592    			{
;;;593    				clearInputQueue();
000050  f7fffffe          BL       clearInputQueue
;;;594    				WriteLcdCom(0xC0+6);
000054  20c6              MOVS     r0,#0xc6
000056  f7fffffe          BL       WriteLcdCom
;;;595    				WriteLcdData(3+'0');
00005a  2033              MOVS     r0,#0x33
00005c  f7fffffe          BL       WriteLcdData
;;;596    				WriteLcdData(5+'0');
000060  2035              MOVS     r0,#0x35
000062  f7fffffe          BL       WriteLcdData
;;;597    				WriteLcdData(9+'0');
000066  2039              MOVS     r0,#0x39
000068  f7fffffe          BL       WriteLcdData
;;;598    				WriteLcdData(9+'0');
00006c  2039              MOVS     r0,#0x39
00006e  f7fffffe          BL       WriteLcdData
;;;599    				WriteLcdData(9+'0');
000072  2039              MOVS     r0,#0x39
000074  f7fffffe          BL       WriteLcdData
;;;600    				WriteLcdData(1+'0');
000078  2031              MOVS     r0,#0x31
00007a  f7fffffe          BL       WriteLcdData
;;;601    				WriteLcdData(9+'0');
00007e  2039              MOVS     r0,#0x39
000080  f7fffffe          BL       WriteLcdData
;;;602    				WriteLcdData(9+'0');
000084  2039              MOVS     r0,#0x39
000086  f7fffffe          BL       WriteLcdData
;;;603    				WriteLcdData(2+'0');
00008a  2032              MOVS     r0,#0x32
00008c  f7fffffe          BL       WriteLcdData
;;;604    				WriteLcdData(0+'0');
000090  2030              MOVS     r0,#0x30
;;;605    				bignum = true;
000092  e02c              B        |L15.238|
                  |L15.148|
000094  e894000f          LDM      r4,{r0-r3}
;;;606    			}
;;;607    			else
;;;608    				calculateResult = number[0] * number[1];
000098  f7fffffe          BL       __aeabi_dmul
                  |L15.156|
00009c  e9c5010a          STRD     r0,r1,[r5,#0x28]
                  |L15.160|
;;;609    			break;
;;;610    		case 24: // /
;;;611    			if (number[1] == 0)
;;;612    			{
;;;613    				if (number[0] == 0)
;;;614    					calculateResult = 0.0;
;;;615    				else
;;;616    					isError = true;
;;;617    			}
;;;618    			else 
;;;619    				calculateResult = number[0] / number[1];
;;;620    			break;
;;;621    	}
;;;622        if(!isError && !bignum)
;;;623           showResultatLCD();
0000a0  e8bd41f0          POP      {r4-r8,lr}
0000a4  f7ffbffe          B.W      showResultatLCD
                  |L15.168|
0000a8  e9d40102          LDRD     r0,r1,[r4,#8]         ;611
0000ac  2200              MOVS     r2,#0                 ;611
0000ae  4613              MOV      r3,r2                 ;611
0000b0  f7fffffe          BL       __aeabi_cdcmpeq
0000b4  d11f              BNE      |L15.246|
0000b6  e9d40100          LDRD     r0,r1,[r4,#0]         ;613
0000ba  2200              MOVS     r2,#0                 ;613
0000bc  4613              MOV      r3,r2                 ;613
0000be  f7fffffe          BL       __aeabi_cdcmpeq
0000c2  d102              BNE      |L15.202|
0000c4  2000              MOVS     r0,#0                 ;613
0000c6  4601              MOV      r1,r0                 ;613
0000c8  e7e8              B        |L15.156|
                  |L15.202|
;;;624    		else if (isError) 
;;;625    		{
;;;626    			clearInputQueue();
0000ca  f7fffffe          BL       clearInputQueue
;;;627    			WriteLcdCom(0xC0+11);
0000ce  20cb              MOVS     r0,#0xcb
0000d0  f7fffffe          BL       WriteLcdCom
;;;628    			WriteLcdData('e');
0000d4  2065              MOVS     r0,#0x65
0000d6  f7fffffe          BL       WriteLcdData
;;;629    			WriteLcdData('r');
0000da  2072              MOVS     r0,#0x72
0000dc  f7fffffe          BL       WriteLcdData
;;;630    			WriteLcdData('r');
0000e0  2072              MOVS     r0,#0x72
0000e2  f7fffffe          BL       WriteLcdData
;;;631    			WriteLcdData('o');
0000e6  206f              MOVS     r0,#0x6f
0000e8  f7fffffe          BL       WriteLcdData
;;;632    			WriteLcdData('r');
0000ec  2072              MOVS     r0,#0x72
                  |L15.238|
0000ee  e8bd41f0          POP      {r4-r8,lr}
0000f2  f7ffbffe          B.W      WriteLcdData
                  |L15.246|
0000f6  e894000f          LDM      r4,{r0-r3}
0000fa  f7fffffe          BL       __aeabi_ddiv
0000fe  e7cd              B        |L15.156|
;;;633    		}
;;;634    }
;;;635    
                          ENDP

                  |L15.256|
                          DCD      ||.data||
                  |L15.260|
                          DCD      0x41c78712

                          AREA ||i.calculatorFunction||, CODE, READONLY, ALIGN=2

                  calculatorFunction PROC
;;;635    
;;;636    void calculatorFunction(int inputLength)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;637    {
000004  4607              MOV      r7,r0
;;;638    	int index1;
;;;639    	double number[2] = {0.0, 0.0};
000006  2000              MOVS     r0,#0
000008  b087              SUB      sp,sp,#0x1c           ;637
;;;640    	int numberSelected = 0; // start from number[0]
00000a  4681              MOV      r9,r0
00000c  9000              STR      r0,[sp,#0]            ;639
00000e  9001              STR      r0,[sp,#4]            ;639
000010  9002              STR      r0,[sp,#8]            ;639
;;;641    	int operation = 25; // + - * /, noInput = 25
000012  f04f0a19          MOV      r10,#0x19
;;;642    	bool intOrDeci = true; // int = T, Deci = F
000016  f04f0801          MOV      r8,#1
00001a  4604              MOV      r4,r0
00001c  4605              MOV      r5,r0
;;;643    	double powPointer = 0.0; // start from digits
;;;644    	
;;;645    	for (index1 = 0; index1 < inputLength; index1++)
00001e  4606              MOV      r6,r0
;;;646    	{
;;;647    		switch (inputQueue[index1])
000020  f8dfb0cc          LDR      r11,|L16.240|
000024  9003              STR      r0,[sp,#0xc]          ;637
000026  e05e              B        |L16.230|
                  |L16.40|
000028  f85b0026          LDR      r0,[r11,r6,LSL #2]
00002c  2818              CMP      r0,#0x18
00002e  d024              BEQ      |L16.122|
000030  dc06              BGT      |L16.64|
000032  2815              CMP      r0,#0x15
000034  d021              BEQ      |L16.122|
000036  2816              CMP      r0,#0x16
000038  d01f              BEQ      |L16.122|
00003a  2817              CMP      r0,#0x17
00003c  d104              BNE      |L16.72|
00003e  e01c              B        |L16.122|
                  |L16.64|
000040  281e              CMP      r0,#0x1e
000042  d021              BEQ      |L16.136|
000044  2828              CMP      r0,#0x28
000046  d025              BEQ      |L16.148|
                  |L16.72|
;;;648    		{
;;;649    			case 21: // +
;;;650    				operation = 21;
;;;651    				numberSelected = 1;
;;;652    				intOrDeci = true;
;;;653    				powPointer = 0.0;
;;;654    				break;
;;;655    			case 22: // -
;;;656    				operation = 22;
;;;657    				numberSelected = 1;
;;;658    				intOrDeci = true;
;;;659    				powPointer = 0.0;
;;;660    				break;
;;;661    			case 23: // *
;;;662    				operation = 23;
;;;663    				numberSelected = 1;
;;;664    				intOrDeci = true;
;;;665    				powPointer = 0.0;
;;;666    				break; 
;;;667    			case 24: // /
;;;668    				operation = 24;
;;;669    				numberSelected = 1;
;;;670    				intOrDeci = true;
;;;671    				powPointer = 0.0;
;;;672    				break;
;;;673    			case 30: // =
;;;674    				calculate(number, operation, inputLength);
;;;675    				break;
;;;676    			case 40: // .
;;;677    				intOrDeci = false;
;;;678    				powPointer = 1.0;
;;;679    				break;
;;;680    			default: // 0~9
;;;681    				if(intOrDeci) //int
000048  f1b80f00          CMP      r8,#0
00004c  d027              BEQ      |L16.158|
;;;682    				{
;;;683    					number[numberSelected] = number[numberSelected] * 10 + inputQueue[index1];
00004e  f7fffffe          BL       __aeabi_i2d
000052  e9cd0104          STRD     r0,r1,[sp,#0x10]
000056  4668              MOV      r0,sp
000058  eb0002c9          ADD      r2,r0,r9,LSL #3
00005c  9206              STR      r2,[sp,#0x18]
00005e  e9d20100          LDRD     r0,r1,[r2,#0]
000062  2200              MOVS     r2,#0
000064  4b23              LDR      r3,|L16.244|
000066  f7fffffe          BL       __aeabi_dmul
00006a  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00006e  f7fffffe          BL       __aeabi_dadd
000072  9a06              LDR      r2,[sp,#0x18]
000074  e9c20100          STRD     r0,r1,[r2,#0]
;;;684    					powPointer += 1.0;
000078  e02c              B        |L16.212|
                  |L16.122|
00007a  f04f0901          MOV      r9,#1                 ;651
00007e  2400              MOVS     r4,#0                 ;652
000080  4682              MOV      r10,r0                ;650
000082  46c8              MOV      r8,r9                 ;652
000084  4625              MOV      r5,r4                 ;652
000086  e02d              B        |L16.228|
                  |L16.136|
000088  463a              MOV      r2,r7                 ;674
00008a  4651              MOV      r1,r10                ;674
00008c  4668              MOV      r0,sp                 ;674
00008e  f7fffffe          BL       calculate
000092  e027              B        |L16.228|
                  |L16.148|
000094  f04f0800          MOV      r8,#0                 ;677
000098  4644              MOV      r4,r8                 ;677
00009a  4d17              LDR      r5,|L16.248|
00009c  e022              B        |L16.228|
                  |L16.158|
;;;685    				}
;;;686    				else //float
;;;687    				{
;;;688    					number[numberSelected] = inputQueue[index1] * pow(0.1, powPointer) + number[numberSelected];
00009e  4622              MOV      r2,r4
0000a0  462b              MOV      r3,r5
0000a2  4816              LDR      r0,|L16.252|
0000a4  4916              LDR      r1,|L16.256|
0000a6  f7fffffe          BL       pow
0000aa  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000ae  f85b0026          LDR      r0,[r11,r6,LSL #2]
0000b2  f7fffffe          BL       __aeabi_i2d
0000b6  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0000ba  f7fffffe          BL       __aeabi_dmul
0000be  466a              MOV      r2,sp
0000c0  eb0203c9          ADD      r3,r2,r9,LSL #3
0000c4  9304              STR      r3,[sp,#0x10]
0000c6  e9d32300          LDRD     r2,r3,[r3,#0]
0000ca  f7fffffe          BL       __aeabi_dadd
0000ce  9b04              LDR      r3,[sp,#0x10]
0000d0  e9c30100          STRD     r0,r1,[r3,#0]
                  |L16.212|
0000d4  2200              MOVS     r2,#0                 ;684
0000d6  4b08              LDR      r3,|L16.248|
0000d8  4620              MOV      r0,r4                 ;684
0000da  4629              MOV      r1,r5                 ;684
0000dc  f7fffffe          BL       __aeabi_dadd
0000e0  4604              MOV      r4,r0                 ;684
0000e2  460d              MOV      r5,r1                 ;684
                  |L16.228|
0000e4  1c76              ADDS     r6,r6,#1              ;684
                  |L16.230|
0000e6  42be              CMP      r6,r7                 ;645
0000e8  db9e              BLT      |L16.40|
;;;689    					powPointer += 1.0;
;;;690    				}
;;;691    				break;
;;;692    		}
;;;693    	}
;;;694    }
0000ea  b007              ADD      sp,sp,#0x1c
0000ec  e8bd8ff0          POP      {r4-r11,pc}
;;;695    /*    scan KeyPad    */
                          ENDP

                  |L16.240|
                          DCD      ||area_number.27||+0x40
                  |L16.244|
                          DCD      0x40240000
                  |L16.248|
                          DCD      0x3ff00000
                  |L16.252|
                          DCD      0x9999999a
                  |L16.256|
                          DCD      0x3fb99999

                          AREA ||i.clearInputQueue||, CODE, READONLY, ALIGN=2

                  clearInputQueue PROC
;;;502    
;;;503    void clearInputQueue()
000000  b570              PUSH     {r4-r6,lr}
;;;504    {
;;;505    	int index1, index2;
;;;506    	WriteLcdCom(0xC0);
000002  20c0              MOVS     r0,#0xc0
000004  f7fffffe          BL       WriteLcdCom
;;;507    	for (index1 = 0; index1 < 50; index1++)
000008  2000              MOVS     r0,#0
;;;508    		inputQueue[index1] = 0;
00000a  4909              LDR      r1,|L17.48|
00000c  4605              MOV      r5,r0                 ;507
00000e  bf00              NOP      
                  |L17.16|
000010  f8415020          STR      r5,[r1,r0,LSL #2]
000014  1c40              ADDS     r0,r0,#1
000016  2832              CMP      r0,#0x32              ;507
000018  dbfa              BLT      |L17.16|
;;;509    	for (index2 = 0; index2 < 16; index2++)
00001a  2400              MOVS     r4,#0
                  |L17.28|
;;;510    		WriteLcdData(' ');
00001c  2020              MOVS     r0,#0x20
00001e  f7fffffe          BL       WriteLcdData
000022  1c64              ADDS     r4,r4,#1
000024  2c10              CMP      r4,#0x10              ;509
000026  dbf9              BLT      |L17.28|
;;;511    	inputPointer = 0;
000028  4802              LDR      r0,|L17.52|
00002a  61c5              STR      r5,[r0,#0x1c]  ; inputPointer
;;;512    }
00002c  bd70              POP      {r4-r6,pc}
;;;513    
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
                          DCD      ||area_number.27||+0x40
                  |L17.52|
                          DCD      ||.data||

                          AREA ||i.determineInput||, CODE, READONLY, ALIGN=2

                  determineInput PROC
;;;695    /*    scan KeyPad    */
;;;696    void determineInput(int row, int col)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;697    {
;;;698    	//int inputPointer;
;;;699    	if (row == 0 && col == 1)
;;;700    	{
;;;701    		if (mode == 0)
000004  4c74              LDR      r4,|L18.472|
000006  2500              MOVS     r5,#0                 ;697
;;;702    		{
;;;703    			setTime(7);
;;;704    		}
;;;705    		else
;;;706    		{
;;;707    			inputQueue[inputPointer] = 7;
000008  4b72              LDR      r3,|L18.468|
00000a  e9d46206          LDRD     r6,r2,[r4,#0x18]      ;701
00000e  2701              MOVS     r7,#1                 ;697
000010  f04f0902          MOV      r9,#2                 ;697
000014  f04f0803          MOV      r8,#3                 ;697
;;;708    			calShowLCD(7, inputPointer);
;;;709    			inputPointer++;
;;;710    		}		
;;;711    	}
;;;712    	else if (row == 0 && col == 2)
;;;713    	{
;;;714    		if (mode == 0)
;;;715    		{
;;;716    			setTime(8);
;;;717    		}
;;;718    		else
;;;719    		{
;;;720    			inputQueue[inputPointer] = 8;
;;;721    			calShowLCD(8, inputPointer);
;;;722    			inputPointer++;
;;;723    		}		
;;;724    	}
;;;725    	else if (row == 0 && col == 3)
;;;726    	{
;;;727    		if (mode == 0)
;;;728    		{
;;;729    			setTime(9);
;;;730    		}
;;;731    		else
;;;732    		{
;;;733    			inputQueue[inputPointer] = 9;
;;;734    			calShowLCD(9, inputPointer);
;;;735    			inputPointer++;
;;;736    		}		
;;;737    	}
;;;738    	else if (row == 0 && col == 4)
;;;739    	{
;;;740    		inputQueue[inputPointer] = 23;
;;;741    		calShowLCD(23, inputPointer);
;;;742    		inputPointer++;
;;;743    	}
;;;744    	else if (row == 0 && col == 5)
;;;745    	{
;;;746    		inputQueue[inputPointer] = 24;
;;;747    		calShowLCD(24, inputPointer);
;;;748    		inputPointer++;
;;;749    	}
;;;750    	else if (row == 1 && col == 1)
;;;751    	{
;;;752    		if (mode == 0)
;;;753    		{
;;;754    			setTime(4);
;;;755    		}
;;;756    		else
;;;757    		{
;;;758    			inputQueue[inputPointer] = 4;
;;;759    			calShowLCD(4, inputPointer);
;;;760    			inputPointer++;
;;;761    		}		
;;;762    	}
;;;763    	else if (row == 1 && col == 2)
;;;764    	{
;;;765    		if (mode == 0)
;;;766    		{
;;;767    			setTime(5);
;;;768    		}
;;;769    		else
;;;770    		{
;;;771    			inputQueue[inputPointer] = 5;
;;;772    			calShowLCD(5, inputPointer);
;;;773    			inputPointer++;
;;;774    		}		
;;;775    	}
;;;776    	else if (row == 1 && col == 3)
;;;777    	{
;;;778    		if (mode == 0)
;;;779    		{
;;;780    			setTime(6);
000018  f04f0c06          MOV      r12,#6
00001c  b130              CBZ      r0,|L18.44|
00001e  2801              CMP      r0,#1                 ;750
000020  d036              BEQ      |L18.144|
;;;781    		}
;;;782    		else
;;;783    		{
;;;784    			inputQueue[inputPointer] = 6;
;;;785    			calShowLCD(6, inputPointer);
;;;786    			inputPointer++;
;;;787    		}		
;;;788    	}
;;;789    	else if (row == 1 && col == 4)
;;;790    	{
;;;791    		inputQueue[inputPointer] = 22;
;;;792    		calShowLCD(22, inputPointer);
;;;793    		inputPointer++;
;;;794    	}
;;;795    	else if (row == 2 && col == 1)
000022  2802              CMP      r0,#2
000024  d058              BEQ      |L18.216|
;;;796    	{
;;;797    		if (mode == 0)
;;;798    		{
;;;799    			setTime(1);
;;;800    		}
;;;801    		else
;;;802    		{
;;;803    			inputQueue[inputPointer] = 1;
;;;804    			calShowLCD(1, inputPointer);
;;;805    			inputPointer++;
;;;806    		}		
;;;807    		
;;;808    	}
;;;809    	else if (row == 2 && col == 2)
;;;810    	{
;;;811    		if (mode == 0)
;;;812    		{
;;;813    			setTime(2);
;;;814    		}
;;;815    		else
;;;816    		{
;;;817    			inputQueue[inputPointer] = 2;
;;;818    			calShowLCD(2, inputPointer);
;;;819    			inputPointer++;
;;;820    		}		
;;;821    		
;;;822    	}
;;;823    	else if (row == 2 && col == 3)
;;;824    	{
;;;825    		if (mode == 0)
;;;826    		{
;;;827    			setTime(3);
;;;828    		}
;;;829    		else
;;;830    		{
;;;831    			inputQueue[inputPointer] = 3;
;;;832    			calShowLCD(3, inputPointer);
;;;833    			inputPointer++;
;;;834    		}		
;;;835    		
;;;836    	}
;;;837    	else if (row == 3 && col == 4)
000026  2803              CMP      r0,#3
000028  d076              BEQ      |L18.280|
00002a  e07d              B        |L18.296|
                  |L18.44|
00002c  2901              CMP      r1,#1                 ;699
00002e  d008              BEQ      |L18.66|
000030  2902              CMP      r1,#2                 ;712
000032  d00e              BEQ      |L18.82|
000034  2903              CMP      r1,#3                 ;725
000036  d01a              BEQ      |L18.110|
000038  2904              CMP      r1,#4                 ;738
00003a  d01f              BEQ      |L18.124|
00003c  2905              CMP      r1,#5                 ;744
00003e  d022              BEQ      |L18.134|
000040  e072              B        |L18.296|
                  |L18.66|
000042  2e00              CMP      r6,#0                 ;701
000044  f04f0007          MOV      r0,#7                 ;707
000048  d040              BEQ      |L18.204|
00004a  f8430022          STR      r0,[r3,r2,LSL #2]     ;707
00004e  4611              MOV      r1,r2                 ;707
000050  e006              B        |L18.96|
                  |L18.82|
000052  2e00              CMP      r6,#0                 ;714
000054  f04f0008          MOV      r0,#8                 ;720
000058  d07f              BEQ      |L18.346|
00005a  f8430022          STR      r0,[r3,r2,LSL #2]     ;720
00005e  4611              MOV      r1,r2                 ;720
                  |L18.96|
000060  f7fffffe          BL       calShowLCD
000064  69e0              LDR      r0,[r4,#0x1c]         ;709  ; inputPointer
000066  1c40              ADDS     r0,r0,#1              ;709
000068  61e0              STR      r0,[r4,#0x1c]         ;709  ; inputPointer
                  |L18.106|
;;;838    	{
;;;839    		inputQueue[inputPointer] = 21;
;;;840    		calShowLCD(21, inputPointer);
;;;841    		inputPointer++;
;;;842    	}
;;;843    	else if (row == 3 && col == 1)
;;;844    	{
;;;845    		if (mode == 0)
;;;846    		{
;;;847    			setTime(0);
;;;848    		}
;;;849    		else
;;;850    		{
;;;851    			inputQueue[inputPointer] = 0;
;;;852    			calShowLCD(0, inputPointer);
;;;853    			inputPointer++;
;;;854    		}		
;;;855    	}
;;;856    	else if (row == 3 && col == 2)
;;;857    	{
;;;858    		inputQueue[inputPointer] = 40;
;;;859    		calShowLCD(40, inputPointer);
;;;860    		inputPointer++;
;;;861    	}
;;;862    	else if (row == 3 && col == 3) // =
;;;863    	{
;;;864    		if(mode == 1)
;;;865    		{
;;;866    			inputQueue[inputPointer] = 30;
;;;867    			calShowLCD(30, inputPointer);
;;;868    			inputPointer++;
;;;869    			calculatorFunction(inputPointer);
;;;870    		}
;;;871    	}
;;;872    	else if (row == 0 && col == 0) // clear
;;;873    	{
;;;874    		if (mode == 0)
;;;875    		{
;;;876    			
;;;877    		}
;;;878    		else
;;;879    		{
;;;880    			clearInputQueue();
;;;881    			inputPointer = 0;
;;;882    			WriteLcdCom(0xC0+15);
;;;883    			WriteLcdData('0');
;;;884    		}
;;;885    	}
;;;886    	else if (row == 3 && col == 0)  // ? set time
;;;887    	{
;;;888    		if (clockMode == 1 || clockMode == 2)
;;;889    		{
;;;890    			clockMode = 3;
;;;891    		}
;;;892    		else if (clockMode == 5)
;;;893    			clockMode = 2;
;;;894    		else
;;;895    		{
;;;896    			clockMode++;
;;;897    		}
;;;898    	}
;;;899    	else if (row == 2 && col == 0)
;;;900    	{
;;;901    		if (mode == 0)
;;;902    		{
;;;903    			clockMode = 6;
;;;904    			mode = 1;
;;;905    			calculatorMode = 1;
;;;906    			//inputPointer = 0;
;;;907    		}
;;;908    		else
;;;909    		{
;;;910    			clockMode = 1;
;;;911    			mode = 0;
;;;912    		}
;;;913    	}
;;;914    }
00006a  e8bd87f0          POP      {r4-r10,pc}
                  |L18.110|
00006e  f04f0009          MOV      r0,#9                 ;733
000072  b35e              CBZ      r6,|L18.204|
000074  f8430022          STR      r0,[r3,r2,LSL #2]     ;733
000078  4611              MOV      r1,r2                 ;733
00007a  e7f1              B        |L18.96|
                  |L18.124|
00007c  2017              MOVS     r0,#0x17              ;740
00007e  f8430022          STR      r0,[r3,r2,LSL #2]     ;740
000082  4611              MOV      r1,r2                 ;740
000084  e7ec              B        |L18.96|
                  |L18.134|
000086  2018              MOVS     r0,#0x18              ;746
000088  f8430022          STR      r0,[r3,r2,LSL #2]     ;746
00008c  4611              MOV      r1,r2                 ;746
00008e  e7e7              B        |L18.96|
                  |L18.144|
000090  2901              CMP      r1,#1                 ;750
000092  d006              BEQ      |L18.162|
000094  2902              CMP      r1,#2                 ;763
000096  d00b              BEQ      |L18.176|
000098  2903              CMP      r1,#3                 ;776
00009a  d010              BEQ      |L18.190|
00009c  2904              CMP      r1,#4                 ;789
00009e  d016              BEQ      |L18.206|
0000a0  e042              B        |L18.296|
                  |L18.162|
0000a2  f04f0004          MOV      r0,#4                 ;758
0000a6  b18e              CBZ      r6,|L18.204|
0000a8  f8430022          STR      r0,[r3,r2,LSL #2]     ;758
0000ac  4611              MOV      r1,r2                 ;758
0000ae  e7d7              B        |L18.96|
                  |L18.176|
0000b0  f04f0005          MOV      r0,#5                 ;771
0000b4  b156              CBZ      r6,|L18.204|
0000b6  f8430022          STR      r0,[r3,r2,LSL #2]     ;771
0000ba  4611              MOV      r1,r2                 ;771
0000bc  e7d0              B        |L18.96|
                  |L18.190|
0000be  b126              CBZ      r6,|L18.202|
0000c0  f843c022          STR      r12,[r3,r2,LSL #2]    ;784
0000c4  4611              MOV      r1,r2                 ;784
0000c6  2006              MOVS     r0,#6                 ;785
0000c8  e7ca              B        |L18.96|
                  |L18.202|
0000ca  2006              MOVS     r0,#6                 ;780
                  |L18.204|
0000cc  e045              B        |L18.346|
                  |L18.206|
0000ce  2016              MOVS     r0,#0x16              ;791
0000d0  f8430022          STR      r0,[r3,r2,LSL #2]     ;791
0000d4  4611              MOV      r1,r2                 ;791
0000d6  e7c3              B        |L18.96|
                  |L18.216|
0000d8  2901              CMP      r1,#1                 ;795
0000da  d004              BEQ      |L18.230|
0000dc  2902              CMP      r1,#2                 ;809
0000de  d00a              BEQ      |L18.246|
0000e0  2903              CMP      r1,#3                 ;823
0000e2  d010              BEQ      |L18.262|
0000e4  e020              B        |L18.296|
                  |L18.230|
0000e6  b126              CBZ      r6,|L18.242|
0000e8  f8437022          STR      r7,[r3,r2,LSL #2]     ;803
0000ec  4611              MOV      r1,r2                 ;803
0000ee  2001              MOVS     r0,#1                 ;804
0000f0  e7b6              B        |L18.96|
                  |L18.242|
0000f2  2001              MOVS     r0,#1                 ;799
0000f4  e031              B        |L18.346|
                  |L18.246|
0000f6  b126              CBZ      r6,|L18.258|
0000f8  f8439022          STR      r9,[r3,r2,LSL #2]     ;817
0000fc  4611              MOV      r1,r2                 ;817
0000fe  2002              MOVS     r0,#2                 ;818
000100  e7ae              B        |L18.96|
                  |L18.258|
000102  2002              MOVS     r0,#2                 ;813
000104  e029              B        |L18.346|
                  |L18.262|
000106  b12e              CBZ      r6,|L18.276|
000108  f8438022          STR      r8,[r3,r2,LSL #2]     ;831
00010c  4611              MOV      r1,r2                 ;831
00010e  2003              MOVS     r0,#3                 ;832
000110  e7a6              B        |L18.96|
000112  e001              B        |L18.280|
                  |L18.276|
000114  2003              MOVS     r0,#3                 ;827
000116  e020              B        |L18.346|
                  |L18.280|
000118  2904              CMP      r1,#4                 ;837
00011a  d012              BEQ      |L18.322|
00011c  2901              CMP      r1,#1                 ;843
00011e  d015              BEQ      |L18.332|
000120  2902              CMP      r1,#2                 ;856
000122  d01e              BEQ      |L18.354|
000124  2903              CMP      r1,#3                 ;862
000126  d021              BEQ      |L18.364|
                  |L18.296|
000128  ea500201          ORRS     r2,r0,r1              ;872
00012c  d02d              BEQ      |L18.394|
00012e  2803              CMP      r0,#3                 ;886
000130  d038              BEQ      |L18.420|
000132  2802              CMP      r0,#2                 ;899
000134  d199              BNE      |L18.106|
000136  2900              CMP      r1,#0                 ;899
000138  d197              BNE      |L18.106|
00013a  b3ee              CBZ      r6,|L18.440|
00013c  6067              STR      r7,[r4,#4]            ;911  ; clockMode
00013e  61a5              STR      r5,[r4,#0x18]         ;911  ; mode
                  |L18.320|
000140  e793              B        |L18.106|
                  |L18.322|
000142  2015              MOVS     r0,#0x15              ;839
000144  f8430022          STR      r0,[r3,r2,LSL #2]     ;839
000148  4611              MOV      r1,r2                 ;839
00014a  e789              B        |L18.96|
                  |L18.332|
00014c  b126              CBZ      r6,|L18.344|
00014e  f8435022          STR      r5,[r3,r2,LSL #2]     ;851
000152  4611              MOV      r1,r2                 ;851
000154  2000              MOVS     r0,#0                 ;852
000156  e783              B        |L18.96|
                  |L18.344|
000158  2000              MOVS     r0,#0                 ;847
                  |L18.346|
00015a  e8bd47f0          POP      {r4-r10,lr}           ;847
00015e  f7ffbffe          B.W      setTime
                  |L18.354|
000162  2028              MOVS     r0,#0x28              ;858
000164  f8430022          STR      r0,[r3,r2,LSL #2]     ;858
000168  4611              MOV      r1,r2                 ;858
00016a  e779              B        |L18.96|
                  |L18.364|
00016c  2e01              CMP      r6,#1                 ;864
00016e  d1e7              BNE      |L18.320|
000170  201e              MOVS     r0,#0x1e              ;866
000172  f8430022          STR      r0,[r3,r2,LSL #2]     ;866
000176  4611              MOV      r1,r2                 ;866
000178  f7fffffe          BL       calShowLCD
00017c  69e0              LDR      r0,[r4,#0x1c]         ;868  ; inputPointer
00017e  1c40              ADDS     r0,r0,#1              ;868
000180  61e0              STR      r0,[r4,#0x1c]         ;869  ; inputPointer
000182  e8bd47f0          POP      {r4-r10,lr}           ;869
000186  f7ffbffe          B.W      calculatorFunction
                  |L18.394|
00018a  2e00              CMP      r6,#0                 ;874
00018c  d0d8              BEQ      |L18.320|
00018e  f7fffffe          BL       clearInputQueue
000192  20cf              MOVS     r0,#0xcf              ;882
000194  61e5              STR      r5,[r4,#0x1c]         ;882  ; inputPointer
000196  f7fffffe          BL       WriteLcdCom
00019a  e8bd47f0          POP      {r4-r10,lr}           ;883
00019e  2030              MOVS     r0,#0x30              ;883
0001a0  f7ffbffe          B.W      WriteLcdData
                  |L18.420|
0001a4  2900              CMP      r1,#0                 ;886
0001a6  d1cb              BNE      |L18.320|
0001a8  6860              LDR      r0,[r4,#4]            ;888  ; clockMode
0001aa  2801              CMP      r0,#1                 ;888
0001ac  d008              BEQ      |L18.448|
0001ae  2802              CMP      r0,#2                 ;888
0001b0  d006              BEQ      |L18.448|
0001b2  2805              CMP      r0,#5                 ;892
0001b4  d007              BEQ      |L18.454|
0001b6  e000              B        |L18.442|
                  |L18.440|
0001b8  e008              B        |L18.460|
                  |L18.442|
0001ba  1c40              ADDS     r0,r0,#1              ;892
0001bc  6060              STR      r0,[r4,#4]            ;896  ; clockMode
0001be  e754              B        |L18.106|
                  |L18.448|
0001c0  f8c48004          STR      r8,[r4,#4]            ;890  ; clockMode
0001c4  e751              B        |L18.106|
                  |L18.454|
0001c6  f8c49004          STR      r9,[r4,#4]            ;893  ; clockMode
0001ca  e74e              B        |L18.106|
                  |L18.460|
0001cc  61a7              STR      r7,[r4,#0x18]         ;904  ; mode
0001ce  e9c4c701          STRD     r12,r7,[r4,#4]        ;904
0001d2  e74a              B        |L18.106|
;;;915    
                          ENDP

                  |L18.468|
                          DCD      ||area_number.27||+0x40
                  |L18.472|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;99     
;;;100    int main(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;101    {
;;;102    
;;;103      /* USER CODE BEGIN 1 */
;;;104      running = 0;
000002  4836              LDR      r0,|L19.220|
000004  2400              MOVS     r4,#0
000006  7004              STRB     r4,[r0,#0]
;;;105    
;;;106      /* USER CODE END 1 */
;;;107    
;;;108      /* MCU Configuration----------------------------------------------------------*/
;;;109    
;;;110      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;111      HAL_Init();
000008  f7fffffe          BL       HAL_Init
;;;112    
;;;113      /* Configure the system clock */
;;;114      SystemClock_Config();
00000c  f7fffffe          BL       SystemClock_Config
;;;115    
;;;116      /* Initialize all configured peripherals */
;;;117      MX_GPIO_Init();
000010  f7fffffe          BL       MX_GPIO_Init
000014  4832              LDR      r0,|L19.224|
000016  6941              LDR      r1,[r0,#0x14]
000018  f0410101          ORR      r1,r1,#1
00001c  6141              STR      r1,[r0,#0x14]
00001e  6940              LDR      r0,[r0,#0x14]
000020  2200              MOVS     r2,#0
000022  f0000001          AND      r0,r0,#1
000026  9000              STR      r0,[sp,#0]
000028  2105              MOVS     r1,#5
00002a  200d              MOVS     r0,#0xd
00002c  f7fffffe          BL       HAL_NVIC_SetPriority
000030  200d              MOVS     r0,#0xd
000032  f7fffffe          BL       HAL_NVIC_EnableIRQ
000036  2200              MOVS     r2,#0
000038  2105              MOVS     r1,#5
00003a  200e              MOVS     r0,#0xe
00003c  f7fffffe          BL       HAL_NVIC_SetPriority
000040  200e              MOVS     r0,#0xe
000042  f7fffffe          BL       HAL_NVIC_EnableIRQ
000046  4925              LDR      r1,|L19.220|
000048  4826              LDR      r0,|L19.228|
00004a  3120              ADDS     r1,r1,#0x20
00004c  6008              STR      r0,[r1,#0]  ; hcrc
00004e  4608              MOV      r0,r1
000050  f7fffffe          BL       HAL_CRC_Init
000054  b100              CBZ      r0,|L19.88|
                  |L19.86|
000056  e7fe              B        |L19.86|
                  |L19.88|
000058  4824              LDR      r0,|L19.236|
00005a  4923              LDR      r1,|L19.232|
00005c  6001              STR      r1,[r0,#0]  ; huart1
00005e  f44f31e1          MOV      r1,#0x1c200
000062  e9c01401          STRD     r1,r4,[r0,#4]
000066  210c              MOVS     r1,#0xc
000068  60c4              STR      r4,[r0,#0xc]  ; huart1
00006a  e9c04104          STRD     r4,r1,[r0,#0x10]
00006e  6184              STR      r4,[r0,#0x18]  ; huart1
000070  61c4              STR      r4,[r0,#0x1c]  ; huart1
000072  f7fffffe          BL       HAL_UART_Init
000076  b100              CBZ      r0,|L19.122|
                  |L19.120|
000078  e7fe              B        |L19.120|
                  |L19.122|
;;;118      MX_DMA_Init();
;;;119      MX_CRC_Init();
;;;120      MX_USART1_UART_Init();
;;;121    
;;;122      /* USER CODE BEGIN 2 */
;;;123    	
;;;124      /* USER CODE END 2 */
;;;125    
;;;126      /* USER CODE BEGIN RTOS_MUTEX */
;;;127      /* USER CODE END RTOS_MUTEX */
;;;128    
;;;129      /* USER CODE BEGIN RTOS_SEMAPHORES */
;;;130      /* add semaphores, ... */
;;;131      /* USER CODE END RTOS_SEMAPHORES */
;;;132    
;;;133      /* USER CODE BEGIN RTOS_TIMERS */
;;;134      /* start timers, add new ones, ... */
;;;135      /* USER CODE END RTOS_TIMERS */
;;;136    
;;;137      /* Create the thread(s) */
;;;138      /* definition and creation of Display */
;;;139      //osThreadDef(ClockPrinter, TaskClock, osPriorityNormal, 0, 200);
;;;140      //ClockPrinterHandle = osThreadCreate(osThread(ClockPrinter), NULL);
;;;141    	HAL_UART_Transmit(&huart1,"TaskCreat.. \r\n",20,300);
00007a  f44f7396          MOV      r3,#0x12c
00007e  2214              MOVS     r2,#0x14
000080  a11b              ADR      r1,|L19.240|
000082  481a              LDR      r0,|L19.236|
000084  f7fffffe          BL       HAL_UART_Transmit
;;;142    	
;;;143    	xTaskCreate(CalculatorTask, "Calcul", configMINIMAL_STACK_SIZE, NULL, 3, &Task1_Handle );
000088  4814              LDR      r0,|L19.220|
00008a  2503              MOVS     r5,#3
00008c  300c              ADDS     r0,r0,#0xc
00008e  9500              STR      r5,[sp,#0]
000090  e9cd0401          STRD     r0,r4,[sp,#4]
000094  2300              MOVS     r3,#0
000096  2280              MOVS     r2,#0x80
000098  a119              ADR      r1,|L19.256|
00009a  481b              LDR      r0,|L19.264|
00009c  9403              STR      r4,[sp,#0xc]
00009e  f7fffffe          BL       xTaskGenericCreate
;;;144    	xTaskCreate(ClockTask, "Clock", configMINIMAL_STACK_SIZE, NULL, 3, &Task2_Handle );
0000a2  480e              LDR      r0,|L19.220|
0000a4  9500              STR      r5,[sp,#0]
0000a6  3010              ADDS     r0,r0,#0x10
0000a8  e9cd0401          STRD     r0,r4,[sp,#4]
0000ac  2300              MOVS     r3,#0
0000ae  2280              MOVS     r2,#0x80
0000b0  a116              ADR      r1,|L19.268|
0000b2  4818              LDR      r0,|L19.276|
0000b4  9403              STR      r4,[sp,#0xc]
0000b6  f7fffffe          BL       xTaskGenericCreate
;;;145    	xTaskCreate(ScanKeyPadTask, "ScanKey", configMINIMAL_STACK_SIZE, NULL, 2, &Task3_Handle );
0000ba  4808              LDR      r0,|L19.220|
0000bc  2102              MOVS     r1,#2
0000be  9100              STR      r1,[sp,#0]
0000c0  3014              ADDS     r0,r0,#0x14
0000c2  e9cd0401          STRD     r0,r4,[sp,#4]
0000c6  2300              MOVS     r3,#0
0000c8  2280              MOVS     r2,#0x80
0000ca  a113              ADR      r1,|L19.280|
0000cc  4814              LDR      r0,|L19.288|
0000ce  9403              STR      r4,[sp,#0xc]
0000d0  f7fffffe          BL       xTaskGenericCreate
;;;146    	vTaskStartScheduler();
0000d4  f7fffffe          BL       vTaskStartScheduler
                  |L19.216|
;;;147    
;;;148      /* USER CODE BEGIN RTOS_THREADS */
;;;149      /* add threads, ... */
;;;150      /* USER CODE END RTOS_THREADS */
;;;151    
;;;152      /* USER CODE BEGIN RTOS_QUEUES */
;;;153      /* add queues, ... */
;;;154      /* USER CODE END RTOS_QUEUES */
;;;155     
;;;156    
;;;157      /* Start scheduler */
;;;158      //osKernelStart();
;;;159      
;;;160      /* We should never get here as control is now taken by the scheduler */
;;;161    
;;;162      /* Infinite loop */
;;;163      /* USER CODE BEGIN WHILE */
;;;164      while (1)
0000d8  e7fe              B        |L19.216|
;;;165      {
;;;166      /* USER CODE END WHILE */
;;;167    	
;;;168      /* USER CODE BEGIN 3 */
;;;169    
;;;170      }
;;;171      /* USER CODE END 3 */
;;;172    
;;;173    }
;;;174    
                          ENDP

0000da  0000              DCW      0x0000
                  |L19.220|
                          DCD      ||.data||
                  |L19.224|
                          DCD      0x40021000
                  |L19.228|
                          DCD      0x40023000
                  |L19.232|
                          DCD      0x40013800
                  |L19.236|
                          DCD      ||area_number.27||
                  |L19.240|
0000f0  5461736b          DCB      "TaskCreat.. \r\n",0
0000f4  43726561
0000f8  742e2e20
0000fc  0d0a00  
0000ff  00                DCB      0
                  |L19.256|
000100  43616c63          DCB      "Calcul",0
000104  756c00  
000107  00                DCB      0
                  |L19.264|
                          DCD      CalculatorTask
                  |L19.268|
00010c  436c6f63          DCB      "Clock",0
000110  6b00    
000112  00                DCB      0
000113  00                DCB      0
                  |L19.276|
                          DCD      ClockTask
                  |L19.280|
000118  5363616e          DCB      "ScanKey",0
00011c  4b657900
                  |L19.288|
                          DCD      ScanKeyPadTask

                          AREA ||i.scanKeyPad||, CODE, READONLY, ALIGN=2

                  scanKeyPad PROC
;;;937    
;;;938    void scanKeyPad()
000000  b570              PUSH     {r4-r6,lr}
;;;939    {
;;;940    	//int index1;
;;;941    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
000002  2201              MOVS     r2,#1
000004  4c1c              LDR      r4,|L20.120|
000006  0315              LSLS     r5,r2,#12
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       HAL_GPIO_WritePin
;;;942    	whichPress(0);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       whichPress
;;;943    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
000016  2200              MOVS     r2,#0
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_GPIO_WritePin
;;;944    	//
;;;945    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
000020  2201              MOVS     r2,#1
000022  0355              LSLS     r5,r2,#13
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_GPIO_WritePin
;;;946    	whichPress(1);
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       whichPress
;;;947    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
000032  2200              MOVS     r2,#0
000034  4629              MOV      r1,r5
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       HAL_GPIO_WritePin
;;;948    	//
;;;949    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
00003c  2201              MOVS     r2,#1
00003e  0395              LSLS     r5,r2,#14
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       HAL_GPIO_WritePin
;;;950    	whichPress(2);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       whichPress
;;;951    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
00004e  2200              MOVS     r2,#0
000050  4629              MOV      r1,r5
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       HAL_GPIO_WritePin
;;;952    	//
;;;953    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
000058  2201              MOVS     r2,#1
00005a  03d5              LSLS     r5,r2,#15
00005c  4629              MOV      r1,r5
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       HAL_GPIO_WritePin
;;;954    	whichPress(3);
000064  2003              MOVS     r0,#3
000066  f7fffffe          BL       whichPress
;;;955    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
00006a  4629              MOV      r1,r5
00006c  4620              MOV      r0,r4
00006e  e8bd4070          POP      {r4-r6,lr}
000072  2200              MOVS     r2,#0
000074  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;956    }
;;;957    /*     Task Function *    */
                          ENDP

                  |L20.120|
                          DCD      0x40010800

                          AREA ||i.setTime||, CODE, READONLY, ALIGN=2

                  setTime PROC
;;;459    //int setTimeWhich;
;;;460    void setTime(int inputNum)
000000  4913              LDR      r1,|L21.80|
;;;461    {
;;;462    	switch (clockMode)
;;;463    	{
;;;464    		case 3:	//set hour
;;;465    			time[0] = time[0] * 10 + inputNum;
000002  684a              LDR      r2,[r1,#4]  ; clockMode
000004  3130              ADDS     r1,r1,#0x30
000006  2a03              CMP      r2,#3                 ;462
000008  d00d              BEQ      |L21.38|
00000a  2a04              CMP      r2,#4                 ;462
00000c  d015              BEQ      |L21.58|
00000e  2a05              CMP      r2,#5                 ;462
000010  d108              BNE      |L21.36|
;;;466    			if(time[0]>23)
;;;467    				time[0] = inputNum;			
;;;468    			break;
;;;469    		case 4: // set min
;;;470    			time[1] = time[1] * 10 + inputNum;
;;;471    			if(time[1]>59)
;;;472    				time[1] = inputNum;
;;;473    			break;
;;;474    		case 5:	// set sec
;;;475    			time[2] = time[2] * 10 + inputNum;
000012  688a              LDR      r2,[r1,#8]  ; time
000014  eb020282          ADD      r2,r2,r2,LSL #2
000018  eb000242          ADD      r2,r0,r2,LSL #1
;;;476    			if(time[2]>59)
00001c  608a              STR      r2,[r1,#8]  ; time
00001e  2a3b              CMP      r2,#0x3b
000020  dd00              BLE      |L21.36|
;;;477    				time[2] = inputNum;
000022  6088              STR      r0,[r1,#8]  ; time
                  |L21.36|
;;;478    			break;
;;;479    		default:
;;;480    			break;
;;;481    	}
;;;482    }
000024  4770              BX       lr
                  |L21.38|
000026  680a              LDR      r2,[r1,#0]            ;465  ; time
000028  eb020282          ADD      r2,r2,r2,LSL #2       ;465
00002c  eb000242          ADD      r2,r0,r2,LSL #1       ;465
000030  600a              STR      r2,[r1,#0]            ;466  ; time
000032  2a17              CMP      r2,#0x17              ;466
000034  ddf6              BLE      |L21.36|
000036  6008              STR      r0,[r1,#0]            ;467  ; time
                  |L21.56|
000038  4770              BX       lr
                  |L21.58|
00003a  684a              LDR      r2,[r1,#4]            ;470  ; time
00003c  eb020282          ADD      r2,r2,r2,LSL #2       ;470
000040  eb000242          ADD      r2,r0,r2,LSL #1       ;470
000044  604a              STR      r2,[r1,#4]            ;471  ; time
000046  2a3b              CMP      r2,#0x3b              ;471
000048  ddf6              BLE      |L21.56|
00004a  6048              STR      r0,[r1,#4]            ;472  ; time
00004c  4770              BX       lr
;;;483    /*    Calculator    */
                          ENDP

00004e  0000              DCW      0x0000
                  |L21.80|
                          DCD      ||.data||

                          AREA ||i.showResultatLCD||, CODE, READONLY, ALIGN=2

                  showResultatLCD PROC
;;;513    
;;;514    void showResultatLCD()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;515    {
;;;516    	int intResult;
;;;517    	int index4;
;;;518    	char chResult[20];
;;;519    	int chPointer = 0;
000004  2400              MOVS     r4,#0
000006  b089              SUB      sp,sp,#0x24           ;515
;;;520    	for (index4 = 0; index4 < 16; index4++)
000008  4626              MOV      r6,r4
                  |L22.10|
;;;521    		WriteLcdData(' ');
00000a  2020              MOVS     r0,#0x20
00000c  f7fffffe          BL       WriteLcdData
;;;522    	if (calculateResult < 0)
000010  4d60              LDR      r5,|L22.404|
000012  1c76              ADDS     r6,r6,#1              ;518
000014  46e8              MOV      r8,sp                 ;518
000016  2e10              CMP      r6,#0x10              ;520
000018  dbf7              BLT      |L22.10|
00001a  e9d5010a          LDRD     r0,r1,[r5,#0x28]
00001e  2200              MOVS     r2,#0
000020  4613              MOV      r3,r2
000022  f7fffffe          BL       __aeabi_cdcmple
000026  d207              BCS      |L22.56|
;;;523    	{
;;;524    		chResult[chPointer++] = '-';
000028  212d              MOVS     r1,#0x2d
00002a  f8081004          STRB     r1,[r8,r4]
;;;525    		calculateResult = -calculateResult;
00002e  6ae9              LDR      r1,[r5,#0x2c]  ; calculateResult
000030  1c64              ADDS     r4,r4,#1
000032  f0814100          EOR      r1,r1,#0x80000000
000036  62e9              STR      r1,[r5,#0x2c]  ; calculateResult
                  |L22.56|
;;;526    	}
;;;527    	int t = calculateResult;
000038  4956              LDR      r1,|L22.404|
00003a  e9d1010a          LDRD     r0,r1,[r1,#0x28]
00003e  f7fffffe          BL       __aeabi_d2iz
000042  4681              MOV      r9,r0
;;;528    	int t1 = calculateResult;
;;;529    	// integer
;;;530    	int i, q = 1;
;;;531    	int index1;
;;;532    	for (i=0; q>0; i++)
000044  2500              MOVS     r5,#0
;;;533    	{
;;;534    		q = t / pow(10.0, i);
000046  9007              STR      r0,[sp,#0x1c]
000048  f7fffffe          BL       __aeabi_i2d
00004c  460f              MOV      r7,r1
00004e  4606              MOV      r6,r0
                  |L22.80|
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       __aeabi_i2d
000056  4602              MOV      r2,r0
000058  460b              MOV      r3,r1
00005a  2000              MOVS     r0,#0
00005c  494e              LDR      r1,|L22.408|
00005e  f7fffffe          BL       pow
000062  4602              MOV      r2,r0
000064  460b              MOV      r3,r1
000066  4630              MOV      r0,r6
000068  4639              MOV      r1,r7
00006a  f7fffffe          BL       __aeabi_ddiv
00006e  f7fffffe          BL       __aeabi_d2iz
000072  1c6d              ADDS     r5,r5,#1
000074  2800              CMP      r0,#0                 ;532
000076  dceb              BGT      |L22.80|
;;;535    	}
;;;536    	if(i == 1)
000078  2d01              CMP      r5,#1
00007a  d046              BEQ      |L22.266|
00007c  1ead              SUBS     r5,r5,#2
;;;537    	{
;;;538    		WriteLcdData('0');
;;;539    		chResult[chPointer] = '0';
;;;540    		chPointer++;
;;;541    	}
;;;542    	else
;;;543    	{
;;;544    		i-=2;
;;;545    		for (index1 = i; index1 >= 0; index1--)
00007e  462e              MOV      r6,r5
000080  d437              BMI      |L22.242|
                  |L22.130|
;;;546    		{
;;;547    			intResult = (t / (pow(10.0, index1)));
000082  4630              MOV      r0,r6
000084  f7fffffe          BL       __aeabi_i2d
000088  4607              MOV      r7,r0
00008a  460b              MOV      r3,r1
00008c  9106              STR      r1,[sp,#0x18]
00008e  463a              MOV      r2,r7
000090  2000              MOVS     r0,#0
000092  4941              LDR      r1,|L22.408|
000094  f7fffffe          BL       pow
000098  4682              MOV      r10,r0
00009a  468b              MOV      r11,r1
00009c  4648              MOV      r0,r9
00009e  f7fffffe          BL       __aeabi_i2d
0000a2  4681              MOV      r9,r0
0000a4  4652              MOV      r2,r10
0000a6  465b              MOV      r3,r11
0000a8  9105              STR      r1,[sp,#0x14]
0000aa  f7fffffe          BL       __aeabi_ddiv
0000ae  f7fffffe          BL       __aeabi_d2iz
0000b2  4682              MOV      r10,r0
;;;548    			t = t - (intResult * pow(10.0, index1));
0000b4  463a              MOV      r2,r7
0000b6  2000              MOVS     r0,#0
0000b8  4937              LDR      r1,|L22.408|
0000ba  9b06              LDR      r3,[sp,#0x18]
0000bc  f7fffffe          BL       pow
0000c0  4607              MOV      r7,r0
0000c2  468b              MOV      r11,r1
0000c4  4650              MOV      r0,r10
0000c6  f7fffffe          BL       __aeabi_i2d
0000ca  463a              MOV      r2,r7
0000cc  465b              MOV      r3,r11
0000ce  f7fffffe          BL       __aeabi_dmul
0000d2  4602              MOV      r2,r0
0000d4  460b              MOV      r3,r1
0000d6  4648              MOV      r0,r9
0000d8  9905              LDR      r1,[sp,#0x14]
0000da  f7fffffe          BL       __aeabi_dsub
0000de  f7fffffe          BL       __aeabi_d2iz
0000e2  4681              MOV      r9,r0
;;;549    			chResult[chPointer++] = intResult+'0';
0000e4  f10a0030          ADD      r0,r10,#0x30
0000e8  f8080004          STRB     r0,[r8,r4]
0000ec  1c64              ADDS     r4,r4,#1
0000ee  1e76              SUBS     r6,r6,#1
0000f0  d5c7              BPL      |L22.130|
                  |L22.242|
;;;550    			//WriteLcdData(intResult+'0');
;;;551    		}	
;;;552    	}
;;;553    	// float
;;;554    	double f = calculateResult - t1;
0000f2  9807              LDR      r0,[sp,#0x1c]
0000f4  f7fffffe          BL       __aeabi_i2d
0000f8  4b26              LDR      r3,|L22.404|
0000fa  e9d3230a          LDRD     r2,r3,[r3,#0x28]
0000fe  f7fffffe          BL       __aeabi_drsub
;;;555    	int index2, x, index3;
;;;556    	for (index2 = 1;index2 <= (10-i); index2++)
000102  2601              MOVS     r6,#1
;;;557    	{
;;;558    		f = f * 10;
;;;559    		x = f;
;;;560    		f = f - x;
;;;561    		if(index2 == 1)
;;;562    		{
;;;563    			chResult[chPointer++] = '.';
;;;564    		}
;;;565    		if (index2 <= (9-i))
;;;566    			chResult[chPointer++] = x+'0';
;;;567    		if(index2 == (10-i) && x>4)
000104  f1c5070a          RSB      r7,r5,#0xa
000108  e030              B        |L22.364|
                  |L22.266|
00010a  2030              MOVS     r0,#0x30              ;538
00010c  f7fffffe          BL       WriteLcdData
000110  2130              MOVS     r1,#0x30              ;539
000112  f8081004          STRB     r1,[r8,r4]            ;539
000116  1c64              ADDS     r4,r4,#1              ;539
000118  e7eb              B        |L22.242|
                  |L22.282|
00011a  2200              MOVS     r2,#0                 ;558
00011c  4b1e              LDR      r3,|L22.408|
00011e  f7fffffe          BL       __aeabi_dmul
000122  4681              MOV      r9,r0                 ;558
000124  468a              MOV      r10,r1                ;558
000126  f7fffffe          BL       __aeabi_d2iz
00012a  4683              MOV      r11,r0                ;559
00012c  f7fffffe          BL       __aeabi_i2d
000130  464a              MOV      r2,r9                 ;560
000132  4653              MOV      r3,r10                ;560
000134  f7fffffe          BL       __aeabi_drsub
000138  2e01              CMP      r6,#1                 ;561
00013a  d103              BNE      |L22.324|
00013c  232e              MOVS     r3,#0x2e              ;563
00013e  f8083004          STRB     r3,[r8,r4]            ;563
000142  1c64              ADDS     r4,r4,#1              ;563
                  |L22.324|
000144  f1c50209          RSB      r2,r5,#9              ;565
000148  42b2              CMP      r2,r6                 ;565
00014a  db04              BLT      |L22.342|
00014c  f10b0230          ADD      r2,r11,#0x30          ;566
000150  f8082004          STRB     r2,[r8,r4]            ;566
000154  1c64              ADDS     r4,r4,#1              ;566
                  |L22.342|
000156  42b7              CMP      r7,r6
000158  d107              BNE      |L22.362|
00015a  f1bb0f04          CMP      r11,#4
00015e  dd04              BLE      |L22.362|
;;;568    			chResult[10-i]++;
000160  f8183007          LDRB     r3,[r8,r7]
000164  1c5b              ADDS     r3,r3,#1
000166  f8083007          STRB     r3,[r8,r7]
                  |L22.362|
00016a  1c76              ADDS     r6,r6,#1
                  |L22.364|
00016c  42b7              CMP      r7,r6                 ;556
00016e  dad4              BGE      |L22.282|
;;;569    			
;;;570    	}
;;;571    	WriteLcdCom(0xC0+16-chPointer);
000170  f1c400d0          RSB      r0,r4,#0xd0
000174  b2c0              UXTB     r0,r0
000176  f7fffffe          BL       WriteLcdCom
;;;572    	for	(index3 = 0; index3<chPointer; index3++)
00017a  2500              MOVS     r5,#0
00017c  4646              MOV      r6,r8                 ;518
00017e  e003              B        |L22.392|
                  |L22.384|
;;;573    	{
;;;574    		WriteLcdData(chResult[index3]);
000180  5d70              LDRB     r0,[r6,r5]
000182  f7fffffe          BL       WriteLcdData
000186  1c6d              ADDS     r5,r5,#1
                  |L22.392|
000188  42a5              CMP      r5,r4                 ;572
00018a  dbf9              BLT      |L22.384|
;;;575    	}
;;;576    	
;;;577    }
00018c  b009              ADD      sp,sp,#0x24
00018e  e8bd8ff0          POP      {r4-r11,pc}
;;;578    void calculate(double number[], int operation, int inputLength)
                          ENDP

000192  0000              DCW      0x0000
                  |L22.404|
                          DCD      ||.data||
                  |L22.408|
                          DCD      0x40240000

                          AREA ||i.whichPress||, CODE, READONLY, ALIGN=2

                  whichPress PROC
;;;915    
;;;916    void whichPress(int row)
000000  b570              PUSH     {r4-r6,lr}
;;;917    {
;;;918    	int index1;
;;;919    	bool pressed = false;
;;;920    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
000002  4c29              LDR      r4,|L23.168|
000004  4605              MOV      r5,r0                 ;917
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       HAL_GPIO_ReadPin
00000e  b108              CBZ      r0,|L23.20|
;;;921    		determineInput(row, 0);
000010  2100              MOVS     r1,#0
000012  e021              B        |L23.88|
                  |L23.20|
;;;922    	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
000014  2102              MOVS     r1,#2
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_GPIO_ReadPin
00001c  b108              CBZ      r0,|L23.34|
;;;923    		determineInput(row, 1);
00001e  2101              MOVS     r1,#1
000020  e01a              B        |L23.88|
                  |L23.34|
;;;924    	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
000022  2104              MOVS     r1,#4
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       HAL_GPIO_ReadPin
00002a  b108              CBZ      r0,|L23.48|
;;;925    		determineInput(row, 2);
00002c  2102              MOVS     r1,#2
00002e  e013              B        |L23.88|
                  |L23.48|
;;;926    	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
000030  2108              MOVS     r1,#8
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_GPIO_ReadPin
000038  b108              CBZ      r0,|L23.62|
;;;927    		determineInput(row, 3);
00003a  2103              MOVS     r1,#3
00003c  e00c              B        |L23.88|
                  |L23.62|
;;;928    	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
00003e  2110              MOVS     r1,#0x10
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       HAL_GPIO_ReadPin
000046  b108              CBZ      r0,|L23.76|
;;;929    		determineInput(row, 4);
000048  2104              MOVS     r1,#4
00004a  e005              B        |L23.88|
                  |L23.76|
;;;930    	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
00004c  2120              MOVS     r1,#0x20
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       HAL_GPIO_ReadPin
000054  b118              CBZ      r0,|L23.94|
;;;931    		determineInput(row, 5);
000056  2105              MOVS     r1,#5
                  |L23.88|
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       determineInput
                  |L23.94|
;;;932    	
;;;933    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)
00005e  2101              MOVS     r1,#1
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       HAL_GPIO_ReadPin
000066  2800              CMP      r0,#0
000068  d1f9              BNE      |L23.94|
00006a  2102              MOVS     r1,#2
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       HAL_GPIO_ReadPin
000072  2800              CMP      r0,#0
000074  d1f3              BNE      |L23.94|
000076  2104              MOVS     r1,#4
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       HAL_GPIO_ReadPin
00007e  2800              CMP      r0,#0
000080  d1ed              BNE      |L23.94|
;;;934    		|| HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
000082  2108              MOVS     r1,#8
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       HAL_GPIO_ReadPin
00008a  2800              CMP      r0,#0
00008c  d1e7              BNE      |L23.94|
00008e  2110              MOVS     r1,#0x10
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       HAL_GPIO_ReadPin
000096  2800              CMP      r0,#0
000098  d1e1              BNE      |L23.94|
00009a  2120              MOVS     r1,#0x20
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       HAL_GPIO_ReadPin
0000a2  2800              CMP      r0,#0
0000a4  d1db              BNE      |L23.94|
;;;935    	//osDelay(20);
;;;936    }
0000a6  bd70              POP      {r4-r6,pc}
;;;937    
                          ENDP

                  |L23.168|
                          DCD      0x40010800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hspi1
                          %        88

                          AREA ||area_number.26||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.bss||
                  hdma_spi1_tx
                          %        56

                          AREA ||area_number.27||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.bss||
                  huart1
                          %        64
                  inputQueue
                          %        200

                          AREA ||area_number.28||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.bss||
                  hdma_usart1_tx
                          %        56

                          AREA ||.data||, DATA, ALIGN=3

                  running
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  clockMode
                          DCD      0x00000001
                  calculatorMode
                          DCD      0x00000001
                  Task1_Handle
                          DCD      0x00000000
                  Task2_Handle
                          DCD      0x00000000
                  Task3_Handle
                          DCD      0x00000000
                  mode
                          DCD      0x00000000
                  inputPointer
                          DCD      0x00000000
                  hcrc
                          %        8
                  calculateResult
                          %        8
                  time
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_time____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_time____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_time____REVSH|
#line 402
|__asm___6_main_c_time____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_time____RRX|
#line 587
|__asm___6_main_c_time____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
