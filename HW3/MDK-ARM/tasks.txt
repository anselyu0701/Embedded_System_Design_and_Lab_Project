; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ohw3_freertos\tasks.o --asm_dir=./ --list_dir=--list --depend=hw3_freertos\tasks.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I../Drivers/CMSIS/Include -I..\FreeRTOS\include -I..\Middlewares\Third_Party\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\Middlewares\Third_Party\FreeRTOS\Source\include -I..\Middlewares\Third_Party\FreeRTOS\Source\CMSIS_RTOS -I.\RTE\_HW3_FreeRTOS -IC:\Users\ChangEn\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\ChangEn\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_HD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103x6 --omf_browse=hw3_freertos\tasks.crf ..\Middlewares\Third_Party\FreeRTOS\Source\tasks.c]
                          THUMB

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;3070   
;;;3071   static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
000000  b570              PUSH     {r4-r6,lr}
;;;3072   {
;;;3073   	/* The list item will be inserted in wake time order. */
;;;3074   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
000002  4c0b              LDR      r4,|L1.48|
000004  4605              MOV      r5,r0                 ;3072
000006  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
;;;3075   
;;;3076   	if( xTimeToWake < xTickCount )
000008  6045              STR      r5,[r0,#4]
00000a  68e0              LDR      r0,[r4,#0xc]  ; xTickCount
;;;3077   	{
;;;3078   		/* Wake time has overflowed.  Place this item in the overflow list. */
;;;3079   		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;3080   	}
;;;3081   	else
;;;3082   	{
;;;3083   		/* The wake time has not overflowed, so the current block list is used. */
;;;3084   		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
00000c  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
00000e  4285              CMP      r5,r0                 ;3076
000010  d205              BCS      |L1.30|
000012  6b60              LDR      r0,[r4,#0x34]         ;3079  ; pxOverflowDelayedTaskList
000014  e8bd4070          POP      {r4-r6,lr}            ;3079
000018  1d09              ADDS     r1,r1,#4              ;3079
00001a  f7ffbffe          B.W      vListInsert
                  |L1.30|
00001e  6b20              LDR      r0,[r4,#0x30]  ; pxDelayedTaskList
000020  1d09              ADDS     r1,r1,#4
000022  f7fffffe          BL       vListInsert
;;;3085   
;;;3086   		/* If the task entering the blocked state was placed at the head of the
;;;3087   		list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;3088   		too. */
;;;3089   		if( xTimeToWake < xNextTaskUnblockTime )
000026  6aa0              LDR      r0,[r4,#0x28]  ; xNextTaskUnblockTime
000028  4285              CMP      r5,r0
00002a  d200              BCS      |L1.46|
;;;3090   		{
;;;3091   			xNextTaskUnblockTime = xTimeToWake;
00002c  62a5              STR      r5,[r4,#0x28]  ; xNextTaskUnblockTime
                  |L1.46|
;;;3092   		}
;;;3093   		else
;;;3094   		{
;;;3095   			mtCOVERAGE_TEST_MARKER();
;;;3096   		}
;;;3097   	}
;;;3098   }
00002e  bd70              POP      {r4-r6,pc}
;;;3099   /*-----------------------------------------------------------*/
                          ENDP

                  |L1.48|
                          DCD      ||.data||

                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=2

                  prvCheckTasksWaitingTermination PROC
;;;3029   
;;;3030   static void prvCheckTasksWaitingTermination( void )
000000  b570              PUSH     {r4-r6,lr}
;;;3031   {
;;;3032   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3033   	{
;;;3034   		BaseType_t xListIsEmpty;
;;;3035   
;;;3036   		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
;;;3037   		too often in the idle task. */
;;;3038   		while( uxTasksDeleted > ( UBaseType_t ) 0U )
;;;3039   		{
;;;3040   			vTaskSuspendAll();
;;;3041   			{
;;;3042   				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
000002  4e12              LDR      r6,|L2.76|
;;;3043   			}
;;;3044   			( void ) xTaskResumeAll();
;;;3045   
;;;3046   			if( xListIsEmpty == pdFALSE )
;;;3047   			{
;;;3048   				TCB_t *pxTCB;
;;;3049   
;;;3050   				taskENTER_CRITICAL();
;;;3051   				{
;;;3052   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
;;;3053   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;3054   					--uxCurrentNumberOfTasks;
000004  4c12              LDR      r4,|L2.80|
000006  e01a              B        |L2.62|
                  |L2.8|
000008  f7fffffe          BL       vTaskSuspendAll
00000c  6830              LDR      r0,[r6,#0]            ;3042  ; xTasksWaitingTermination
00000e  b1d0              CBZ      r0,|L2.70|
000010  f7fffffe          BL       xTaskResumeAll
000014  f7fffffe          BL       vPortEnterCritical
000018  68f0              LDR      r0,[r6,#0xc]          ;3052  ; xTasksWaitingTermination
00001a  68c5              LDR      r5,[r0,#0xc]          ;3053
00001c  1d28              ADDS     r0,r5,#4              ;3053
00001e  f7fffffe          BL       uxListRemove
000022  68a0              LDR      r0,[r4,#8]  ; uxCurrentNumberOfTasks
000024  1e40              SUBS     r0,r0,#1
000026  60a0              STR      r0,[r4,#8]  ; uxCurrentNumberOfTasks
;;;3055   					--uxTasksDeleted;
000028  6860              LDR      r0,[r4,#4]  ; uxTasksDeleted
00002a  1e40              SUBS     r0,r0,#1
00002c  6060              STR      r0,[r4,#4]  ; uxTasksDeleted
;;;3056   				}
;;;3057   				taskEXIT_CRITICAL();
00002e  f7fffffe          BL       vPortExitCritical
000032  6b28              LDR      r0,[r5,#0x30]
000034  f7fffffe          BL       vPortFree
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       vPortFree
                  |L2.62|
00003e  6860              LDR      r0,[r4,#4]            ;3038  ; uxTasksDeleted
000040  2800              CMP      r0,#0                 ;3038
000042  d1e1              BNE      |L2.8|
;;;3058   
;;;3059   				prvDeleteTCB( pxTCB );
;;;3060   			}
;;;3061   			else
;;;3062   			{
;;;3063   				mtCOVERAGE_TEST_MARKER();
;;;3064   			}
;;;3065   		}
;;;3066   	}
;;;3067   	#endif /* vTaskDelete */
;;;3068   }
000044  bd70              POP      {r4-r6,pc}
                  |L2.70|
000046  f7fffffe          BL       xTaskResumeAll
00004a  e7f8              B        |L2.62|
;;;3069   /*-----------------------------------------------------------*/
                          ENDP

                  |L2.76|
                          DCD      ||.bss||+0xc8
                  |L2.80|
                          DCD      ||.data||

                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;2689    */
;;;2690   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  4c04              LDR      r4,|L3.20|
;;;2691   {
;;;2692   	/* Stop warnings. */
;;;2693   	( void ) pvParameters;
;;;2694   
;;;2695   	for( ;; )
;;;2696   	{
;;;2697   		/* See if any tasks have been deleted. */
;;;2698   		prvCheckTasksWaitingTermination();
000002  bf00              NOP      
                  |L3.4|
000004  f7fffffe          BL       prvCheckTasksWaitingTermination
;;;2699   
;;;2700   		#if ( configUSE_PREEMPTION == 0 )
;;;2701   		{
;;;2702   			/* If we are not using preemption we keep forcing a task switch to
;;;2703   			see if any other task has become available.  If we are using
;;;2704   			preemption we don't need to do this as any task becoming available
;;;2705   			will automatically get the processor anyway. */
;;;2706   			taskYIELD();
;;;2707   		}
;;;2708   		#endif /* configUSE_PREEMPTION */
;;;2709   
;;;2710   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;2711   		{
;;;2712   			/* When using preemption tasks of equal priority will be
;;;2713   			timesliced.  If a task that is sharing the idle priority is ready
;;;2714   			to run then the idle task should yield before the end of the
;;;2715   			timeslice.
;;;2716   
;;;2717   			A critical region is not required here as we are just reading from
;;;2718   			the list, and an occasional incorrect value will not matter.  If
;;;2719   			the ready list at the idle priority contains more than one task
;;;2720   			then a task other than the idle task is ready to execute. */
;;;2721   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000008  6820              LDR      r0,[r4,#0]  ; pxReadyTasksLists
00000a  2801              CMP      r0,#1
00000c  d9fa              BLS      |L3.4|
;;;2722   			{
;;;2723   				taskYIELD();
00000e  f7fffffe          BL       vPortYield
000012  e7f7              B        |L3.4|
;;;2724   			}
;;;2725   			else
;;;2726   			{
;;;2727   				mtCOVERAGE_TEST_MARKER();
;;;2728   			}
;;;2729   		}
;;;2730   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;2731   
;;;2732   		#if ( configUSE_IDLE_HOOK == 1 )
;;;2733   		{
;;;2734   			extern void vApplicationIdleHook( void );
;;;2735   
;;;2736   			/* Call the user defined function from within the idle task.  This
;;;2737   			allows the application designer to add background functionality
;;;2738   			without the overhead of a separate task.
;;;2739   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;2740   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;2741   			vApplicationIdleHook();
;;;2742   		}
;;;2743   		#endif /* configUSE_IDLE_HOOK */
;;;2744   
;;;2745   		/* This conditional compilation should use inequality to 0, not equality
;;;2746   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;2747   		user defined low power mode	implementations require
;;;2748   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;2749   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;2750   		{
;;;2751   		TickType_t xExpectedIdleTime;
;;;2752   
;;;2753   			/* It is not desirable to suspend then resume the scheduler on
;;;2754   			each iteration of the idle task.  Therefore, a preliminary
;;;2755   			test of the expected idle time is performed without the
;;;2756   			scheduler suspended.  The result here is not necessarily
;;;2757   			valid. */
;;;2758   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2759   
;;;2760   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2761   			{
;;;2762   				vTaskSuspendAll();
;;;2763   				{
;;;2764   					/* Now the scheduler is suspended, the expected idle
;;;2765   					time can be sampled again, and this time its value can
;;;2766   					be used. */
;;;2767   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;2768   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2769   
;;;2770   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2771   					{
;;;2772   						traceLOW_POWER_IDLE_BEGIN();
;;;2773   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;2774   						traceLOW_POWER_IDLE_END();
;;;2775   					}
;;;2776   					else
;;;2777   					{
;;;2778   						mtCOVERAGE_TEST_MARKER();
;;;2779   					}
;;;2780   				}
;;;2781   				( void ) xTaskResumeAll();
;;;2782   			}
;;;2783   			else
;;;2784   			{
;;;2785   				mtCOVERAGE_TEST_MARKER();
;;;2786   			}
;;;2787   		}
;;;2788   		#endif /* configUSE_TICKLESS_IDLE */
;;;2789   	}
;;;2790   }
;;;2791   /*-----------------------------------------------------------*/
                          ENDP

                  |L3.20|
                          DCD      ||.bss||

                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3346   
;;;3347   static void prvResetNextTaskUnblockTime( void )
000000  4806              LDR      r0,|L4.28|
;;;3348   {
;;;3349   TCB_t *pxTCB;
;;;3350   
;;;3351   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6b01              LDR      r1,[r0,#0x30]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  b129              CBZ      r1,|L4.20|
;;;3352   	{
;;;3353   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3354   		the maximum possible value so it is	extremely unlikely that the
;;;3355   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3356   		there is an item in the delayed list. */
;;;3357   		xNextTaskUnblockTime = portMAX_DELAY;
;;;3358   	}
;;;3359   	else
;;;3360   	{
;;;3361   		/* The new current delayed list is not empty, get the value of
;;;3362   		the item at the head of the delayed list.  This is the time at
;;;3363   		which the task at the head of the delayed list should be removed
;;;3364   		from the Blocked state. */
;;;3365   		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
000008  6b01              LDR      r1,[r0,#0x30]  ; pxDelayedTaskList
00000a  68c9              LDR      r1,[r1,#0xc]
00000c  68c9              LDR      r1,[r1,#0xc]
;;;3366   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
00000e  6849              LDR      r1,[r1,#4]
                  |L4.16|
000010  6281              STR      r1,[r0,#0x28]         ;3357  ; xNextTaskUnblockTime
;;;3367   	}
;;;3368   }
000012  4770              BX       lr
                  |L4.20|
000014  f04f31ff          MOV      r1,#0xffffffff        ;3357
000018  e7fa              B        |L4.16|
;;;3369   /*-----------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      ||.data||

                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                  prvTaskIsTaskSuspended PROC
;;;1372   
;;;1373   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1374   	{
;;;1375   	BaseType_t xReturn = pdFALSE;
000002  2100              MOVS     r1,#0
000004  b150              CBZ      r0,|L5.28|
;;;1376   	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
;;;1377   
;;;1378   		/* Accesses xPendingReadyList so must be called from a critical
;;;1379   		section. */
;;;1380   
;;;1381   		/* It does not make sense to check if the calling task is suspended. */
;;;1382   		configASSERT( xTask );
;;;1383   
;;;1384   		/* Is the task being resumed actually in the suspended list? */
;;;1385   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
000006  4b08              LDR      r3,|L5.40|
000008  6942              LDR      r2,[r0,#0x14]
00000a  429a              CMP      r2,r3
00000c  d10a              BNE      |L5.36|
;;;1386   		{
;;;1387   			/* Has the task already been resumed from within an ISR? */
;;;1388   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
00000e  6a80              LDR      r0,[r0,#0x28]
000010  f1a30228          SUB      r2,r3,#0x28
000014  4290              CMP      r0,r2
000016  d005              BEQ      |L5.36|
;;;1389   			{
;;;1390   				/* Is it in the suspended list because it is in the	Suspended
;;;1391   				state, or because is is blocked with no timeout? */
;;;1392   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
000018  b118              CBZ      r0,|L5.34|
00001a  e003              B        |L5.36|
                  |L5.28|
00001c  f7fffffe          BL       ulPortSetInterruptMask
                  |L5.32|
000020  e7fe              B        |L5.32|
                  |L5.34|
;;;1393   				{
;;;1394   					xReturn = pdTRUE;
000022  2101              MOVS     r1,#1
                  |L5.36|
;;;1395   				}
;;;1396   				else
;;;1397   				{
;;;1398   					mtCOVERAGE_TEST_MARKER();
;;;1399   				}
;;;1400   			}
;;;1401   			else
;;;1402   			{
;;;1403   				mtCOVERAGE_TEST_MARKER();
;;;1404   			}
;;;1405   		}
;;;1406   		else
;;;1407   		{
;;;1408   			mtCOVERAGE_TEST_MARKER();
;;;1409   		}
;;;1410   
;;;1411   		return xReturn;
000024  4608              MOV      r0,r1
;;;1412   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
000026  bd10              POP      {r4,pc}
;;;1413   
                          ENDP

                  |L5.40|
                          DCD      ||.bss||+0xdc

                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;3883   
;;;3884   	void *pvTaskIncrementMutexHeldCount( void )
000000  4904              LDR      r1,|L6.20|
;;;3885   	{
;;;3886   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;3887   		then pxCurrentTCB will be NULL. */
;;;3888   		if( pxCurrentTCB != NULL )
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
000004  b118              CBZ      r0,|L6.14|
;;;3889   		{
;;;3890   			( pxCurrentTCB->uxMutexesHeld )++;
000006  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
000008  6c82              LDR      r2,[r0,#0x48]
00000a  1c52              ADDS     r2,r2,#1
00000c  6482              STR      r2,[r0,#0x48]
                  |L6.14|
;;;3891   		}
;;;3892   
;;;3893   		return pxCurrentTCB;
00000e  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;3894   	}
000010  4770              BX       lr
;;;3895   
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      ||.data||

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;3900   
;;;3901   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3902   	{
000004  460d              MOV      r5,r1
000006  4607              MOV      r7,r0
;;;3903   	TickType_t xTimeToWake;
;;;3904   	uint32_t ulReturn;
;;;3905   
;;;3906   		taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;3907   		{
;;;3908   			/* Only block if the notification count is not already non-zero. */
;;;3909   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000c  4c1d              LDR      r4,|L7.132|
00000e  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000010  6cc0              LDR      r0,[r0,#0x4c]
000012  b9c8              CBNZ     r0,|L7.72|
;;;3910   			{
;;;3911   				/* Mark this task as waiting for a notification. */
;;;3912   				pxCurrentTCB->eNotifyState = eWaitingNotification;
000014  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000016  2601              MOVS     r6,#1
000018  f8806050          STRB     r6,[r0,#0x50]
;;;3913   
;;;3914   				if( xTicksToWait > ( TickType_t ) 0 )
00001c  b1a5              CBZ      r5,|L7.72|
;;;3915   				{
;;;3916   					/* The task is going to block.  First it must be removed
;;;3917   					from the ready list. */
;;;3918   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00001e  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000020  1d00              ADDS     r0,r0,#4
000022  f7fffffe          BL       uxListRemove
000026  b930              CBNZ     r0,|L7.54|
;;;3919   					{
;;;3920   						/* The current task must be in a ready list, so there is
;;;3921   						no need to check, and the port reset macro can be called
;;;3922   						directly. */
;;;3923   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000028  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00002a  f890002c          LDRB     r0,[r0,#0x2c]
00002e  4086              LSLS     r6,r6,r0
000030  6920              LDR      r0,[r4,#0x10]  ; uxTopReadyPriority
000032  43b0              BICS     r0,r0,r6
000034  6120              STR      r0,[r4,#0x10]  ; uxTopReadyPriority
                  |L7.54|
;;;3924   					}
;;;3925   					else
;;;3926   					{
;;;3927   						mtCOVERAGE_TEST_MARKER();
;;;3928   					}
;;;3929   
;;;3930   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;3931   					{
;;;3932   						if( xTicksToWait == portMAX_DELAY )
000036  1c68              ADDS     r0,r5,#1
000038  d012              BEQ      |L7.96|
;;;3933   						{
;;;3934   							/* Add the task to the suspended task list instead
;;;3935   							of a delayed task list to ensure the task is not
;;;3936   							woken by a timing event.  It will block
;;;3937   							indefinitely. */
;;;3938   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;3939   						}
;;;3940   						else
;;;3941   						{
;;;3942   							/* Calculate the time at which the task should be
;;;3943   							woken if no notification events occur.  This may
;;;3944   							overflow but this doesn't matter, the scheduler will
;;;3945   							handle it. */
;;;3946   							xTimeToWake = xTickCount + xTicksToWait;
00003a  68e0              LDR      r0,[r4,#0xc]  ; xTickCount
00003c  4428              ADD      r0,r0,r5
;;;3947   							prvAddCurrentTaskToDelayedList( xTimeToWake );
00003e  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3948   						}
;;;3949   					}
;;;3950   					#else /* INCLUDE_vTaskSuspend */
;;;3951   					{
;;;3952   							/* Calculate the time at which the task should be
;;;3953   							woken if the event does not occur.  This may
;;;3954   							overflow but this doesn't matter, the scheduler will
;;;3955   							handle it. */
;;;3956   							xTimeToWake = xTickCount + xTicksToWait;
;;;3957   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;3958   					}
;;;3959   					#endif /* INCLUDE_vTaskSuspend */
;;;3960   
;;;3961   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;3962   
;;;3963   					/* All ports are written to allow a yield in a critical
;;;3964   					section (some will yield immediately, others wait until the
;;;3965   					critical section exits) - but it is not something that
;;;3966   					application code should ever do. */
;;;3967   					portYIELD_WITHIN_API();
000042  bf00              NOP      
                  |L7.68|
000044  f7fffffe          BL       vPortYield
                  |L7.72|
;;;3968   				}
;;;3969   				else
;;;3970   				{
;;;3971   					mtCOVERAGE_TEST_MARKER();
;;;3972   				}
;;;3973   			}
;;;3974   			else
;;;3975   			{
;;;3976   				mtCOVERAGE_TEST_MARKER();
;;;3977   			}
;;;3978   		}
;;;3979   		taskEXIT_CRITICAL();
000048  f7fffffe          BL       vPortExitCritical
;;;3980   
;;;3981   		taskENTER_CRITICAL();
00004c  f7fffffe          BL       vPortEnterCritical
;;;3982   		{
;;;3983   			traceTASK_NOTIFY_TAKE();
;;;3984   			ulReturn = pxCurrentTCB->ulNotifiedValue;
000050  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000052  6cc5              LDR      r5,[r0,#0x4c]
000054  2100              MOVS     r1,#0
;;;3985   
;;;3986   			if( ulReturn != 0UL )
000056  b165              CBZ      r5,|L7.114|
;;;3987   			{
;;;3988   				if( xClearCountOnExit != pdFALSE )
;;;3989   				{
;;;3990   					pxCurrentTCB->ulNotifiedValue = 0UL;
;;;3991   				}
;;;3992   				else
;;;3993   				{
;;;3994   					( pxCurrentTCB->ulNotifiedValue )--;
000058  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00005a  b13f              CBZ      r7,|L7.108|
00005c  64c1              STR      r1,[r0,#0x4c]         ;3990
00005e  e008              B        |L7.114|
                  |L7.96|
000060  6821              LDR      r1,[r4,#0]            ;3938  ; pxCurrentTCB
000062  4809              LDR      r0,|L7.136|
000064  1d09              ADDS     r1,r1,#4              ;3938
000066  f7fffffe          BL       vListInsertEnd
00006a  e7eb              B        |L7.68|
                  |L7.108|
00006c  6cc2              LDR      r2,[r0,#0x4c]
00006e  1e52              SUBS     r2,r2,#1
000070  64c2              STR      r2,[r0,#0x4c]
                  |L7.114|
;;;3995   				}
;;;3996   			}
;;;3997   			else
;;;3998   			{
;;;3999   				mtCOVERAGE_TEST_MARKER();
;;;4000   			}
;;;4001   
;;;4002   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
000072  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000074  f8801050          STRB     r1,[r0,#0x50]
;;;4003   		}
;;;4004   		taskEXIT_CRITICAL();
000078  f7fffffe          BL       vPortExitCritical
;;;4005   
;;;4006   		return ulReturn;
00007c  4628              MOV      r0,r5
;;;4007   	}
00007e  e8bd81f0          POP      {r4-r8,pc}
;;;4008   
                          ENDP

000082  0000              DCW      0x0000
                  |L7.132|
                          DCD      ||.data||
                  |L7.136|
                          DCD      ||.bss||+0xdc

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;1809   
;;;1810   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L8.8|
;;;1811   {
;;;1812   	/* A critical section is not required because the variables are of type
;;;1813   	BaseType_t. */
;;;1814   	return uxCurrentNumberOfTasks;
000002  6880              LDR      r0,[r0,#8]  ; uxCurrentNumberOfTasks
;;;1815   }
000004  4770              BX       lr
;;;1816   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1057   
;;;1058   	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1059   	{
000002  4604              MOV      r4,r0
;;;1060   	TCB_t *pxTCB;
;;;1061   	UBaseType_t uxReturn;
;;;1062   
;;;1063   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1064   		{
;;;1065   			/* If null is passed in here then it is the priority of the that
;;;1066   			called uxTaskPriorityGet() that is being queried. */
;;;1067   			pxTCB = prvGetTCBFromHandle( xTask );
000008  b90c              CBNZ     r4,|L9.14|
00000a  4803              LDR      r0,|L9.24|
00000c  6804              LDR      r4,[r0,#0]  ; pxCurrentTCB
                  |L9.14|
;;;1068   			uxReturn = pxTCB->uxPriority;
00000e  6ae4              LDR      r4,[r4,#0x2c]
;;;1069   		}
;;;1070   		taskEXIT_CRITICAL();
000010  f7fffffe          BL       vPortExitCritical
;;;1071   
;;;1072   		return uxReturn;
000014  4620              MOV      r0,r4
;;;1073   	}
000016  bd10              POP      {r4,pc}
;;;1074   
                          ENDP

                  |L9.24|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1079   
;;;1080   	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1081   	{
000002  4604              MOV      r4,r0
;;;1082   	TCB_t *pxTCB;
;;;1083   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1084   
;;;1085   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1086   		maximum	system call (or maximum API call) interrupt priority.
;;;1087   		Interrupts that are	above the maximum system call priority are keep
;;;1088   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1089   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1090   		is defined in FreeRTOSConfig.h then
;;;1091   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1092   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1093   		been assigned a priority above the configured maximum system call
;;;1094   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1095   		from interrupts	that have been assigned a priority at or (logically)
;;;1096   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1097   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1098   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1099   		provided on the following link:
;;;1100   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1101   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000004  f7fffffe          BL       vPortValidateInterruptPriority
;;;1102   
;;;1103   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
000008  f7fffffe          BL       ulPortSetInterruptMask
;;;1104   		{
;;;1105   			/* If null is passed in here then it is the priority of the calling
;;;1106   			task that is being queried. */
;;;1107   			pxTCB = prvGetTCBFromHandle( xTask );
00000c  b90c              CBNZ     r4,|L10.18|
00000e  4903              LDR      r1,|L10.28|
000010  680c              LDR      r4,[r1,#0]  ; pxCurrentTCB
                  |L10.18|
;;;1108   			uxReturn = pxTCB->uxPriority;
000012  6ae4              LDR      r4,[r4,#0x2c]
;;;1109   		}
;;;1110   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
000014  f7fffffe          BL       vPortClearInterruptMask
;;;1111   
;;;1112   		return uxReturn;
000018  4620              MOV      r0,r4
;;;1113   	}
00001a  bd10              POP      {r4,pc}
;;;1114   
                          ENDP

                  |L10.28|
                          DCD      ||.data||

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;3867   
;;;3868   TickType_t uxTaskResetEventItemValue( void )
000000  4904              LDR      r1,|L11.20|
;;;3869   {
;;;3870   TickType_t uxReturn;
;;;3871   
;;;3872   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;3873   
;;;3874   	/* Reset the event list item to its normal value - so it can be used with
;;;3875   	queues and semaphores. */
;;;3876   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000004  680a              LDR      r2,[r1,#0]  ; pxCurrentTCB
000006  6980              LDR      r0,[r0,#0x18]         ;3872
000008  6ad2              LDR      r2,[r2,#0x2c]
00000a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000c  f1c20207          RSB      r2,r2,#7
000010  618a              STR      r2,[r1,#0x18]
;;;3877   
;;;3878   	return uxReturn;
;;;3879   }
000012  4770              BX       lr
;;;3880   /*-----------------------------------------------------------*/
                          ENDP

                  |L11.20|
                          DCD      ||.data||

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;921    
;;;922    	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b570              PUSH     {r4-r6,lr}
;;;923    	{
000002  0002              MOVS     r2,r0
000004  d01d              BEQ      |L12.66|
;;;924    	TickType_t xTimeToWake;
;;;925    	BaseType_t xAlreadyYielded = pdFALSE;
;;;926    
;;;927    
;;;928    		/* A delay time of zero just forces a reschedule. */
;;;929    		if( xTicksToDelay > ( TickType_t ) 0U )
;;;930    		{
;;;931    			configASSERT( uxSchedulerSuspended == 0 );
000006  4c11              LDR      r4,|L12.76|
000008  6ae0              LDR      r0,[r4,#0x2c]  ; uxSchedulerSuspended
00000a  b110              CBZ      r0,|L12.18|
00000c  f7fffffe          BL       ulPortSetInterruptMask
                  |L12.16|
000010  e7fe              B        |L12.16|
                  |L12.18|
;;;932    			vTaskSuspendAll();
000012  f7fffffe          BL       vTaskSuspendAll
;;;933    			{
;;;934    				traceTASK_DELAY();
;;;935    
;;;936    				/* A task that is removed from the event list while the
;;;937    				scheduler is suspended will not get placed in the ready
;;;938    				list or removed from the blocked list until the scheduler
;;;939    				is resumed.
;;;940    
;;;941    				This task cannot be in an event list as it is the currently
;;;942    				executing task. */
;;;943    
;;;944    				/* Calculate the time to wake - this may overflow but this is
;;;945    				not a problem. */
;;;946    				xTimeToWake = xTickCount + xTicksToDelay;
000016  68e0              LDR      r0,[r4,#0xc]  ; xTickCount
000018  1885              ADDS     r5,r0,r2
;;;947    
;;;948    				/* We must remove ourselves from the ready list before adding
;;;949    				ourselves to the blocked list as the same list item is used for
;;;950    				both lists. */
;;;951    				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00001a  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00001c  1d00              ADDS     r0,r0,#4
00001e  f7fffffe          BL       uxListRemove
000022  b938              CBNZ     r0,|L12.52|
;;;952    				{
;;;953    					/* The current task must be in a ready list, so there is
;;;954    					no need to check, and the port reset macro can be called
;;;955    					directly. */
;;;956    					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000024  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000026  f890102c          LDRB     r1,[r0,#0x2c]
00002a  2001              MOVS     r0,#1
00002c  4088              LSLS     r0,r0,r1
00002e  6921              LDR      r1,[r4,#0x10]  ; uxTopReadyPriority
000030  4381              BICS     r1,r1,r0
000032  6121              STR      r1,[r4,#0x10]  ; uxTopReadyPriority
                  |L12.52|
;;;957    				}
;;;958    				else
;;;959    				{
;;;960    					mtCOVERAGE_TEST_MARKER();
;;;961    				}
;;;962    				prvAddCurrentTaskToDelayedList( xTimeToWake );
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;963    			}
;;;964    			xAlreadyYielded = xTaskResumeAll();
00003a  f7fffffe          BL       xTaskResumeAll
00003e  2800              CMP      r0,#0
000040  d103              BNE      |L12.74|
                  |L12.66|
;;;965    		}
;;;966    		else
;;;967    		{
;;;968    			mtCOVERAGE_TEST_MARKER();
;;;969    		}
;;;970    
;;;971    		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;972    		have put ourselves to sleep. */
;;;973    		if( xAlreadyYielded == pdFALSE )
;;;974    		{
;;;975    			portYIELD_WITHIN_API();
000042  e8bd4070          POP      {r4-r6,lr}
000046  f7ffbffe          B.W      vPortYield
                  |L12.74|
;;;976    		}
;;;977    		else
;;;978    		{
;;;979    			mtCOVERAGE_TEST_MARKER();
;;;980    		}
;;;981    	}
00004a  bd70              POP      {r4-r6,pc}
;;;982    
                          ENDP

                  |L12.76|
                          DCD      ||.data||

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;743    
;;;744    	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;745    	{
000002  4604              MOV      r4,r0
;;;746    	TCB_t *pxTCB;
;;;747    
;;;748    		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;749    		{
;;;750    			/* If null is passed in here then it is the calling task that is
;;;751    			being deleted. */
;;;752    			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  4d1e              LDR      r5,|L13.132|
00000a  b904              CBNZ     r4,|L13.14|
00000c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
                  |L13.14|
;;;753    
;;;754    			/* Remove task from the ready list and place in the	termination list.
;;;755    			This will stop the task from be scheduled.  The idle task will check
;;;756    			the termination list and free up any memory allocated by the
;;;757    			scheduler for the TCB and stack. */
;;;758    			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
000014  b958              CBNZ     r0,|L13.46|
;;;759    			{
;;;760    				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  4a1b              LDR      r2,|L13.136|
00001a  eb000180          ADD      r1,r0,r0,LSL #2
00001e  f8521021          LDR      r1,[r2,r1,LSL #2]
000022  b921              CBNZ     r1,|L13.46|
000024  2101              MOVS     r1,#1
000026  4081              LSLS     r1,r1,r0
000028  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
00002a  4388              BICS     r0,r0,r1
00002c  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L13.46|
;;;761    			}
;;;762    			else
;;;763    			{
;;;764    				mtCOVERAGE_TEST_MARKER();
;;;765    			}
;;;766    
;;;767    			/* Is the task waiting on an event also? */
;;;768    			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  b118              CBZ      r0,|L13.58|
;;;769    			{
;;;770    				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000032  f1040018          ADD      r0,r4,#0x18
000036  f7fffffe          BL       uxListRemove
                  |L13.58|
;;;771    			}
;;;772    			else
;;;773    			{
;;;774    				mtCOVERAGE_TEST_MARKER();
;;;775    			}
;;;776    
;;;777    			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
00003a  4813              LDR      r0,|L13.136|
00003c  1d21              ADDS     r1,r4,#4
00003e  30c8              ADDS     r0,r0,#0xc8
000040  f7fffffe          BL       vListInsertEnd
;;;778    
;;;779    			/* Increment the ucTasksDeleted variable so the idle task knows
;;;780    			there is a task that has been deleted and that it should therefore
;;;781    			check the xTasksWaitingTermination list. */
;;;782    			++uxTasksDeleted;
000044  6868              LDR      r0,[r5,#4]  ; uxTasksDeleted
000046  1c40              ADDS     r0,r0,#1
000048  6068              STR      r0,[r5,#4]  ; uxTasksDeleted
;;;783    
;;;784    			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
;;;785    			can detect that the task lists need re-generating. */
;;;786    			uxTaskNumber++;
00004a  6a68              LDR      r0,[r5,#0x24]  ; uxTaskNumber
00004c  1c40              ADDS     r0,r0,#1
;;;787    
;;;788    			traceTASK_DELETE( pxTCB );
;;;789    		}
;;;790    		taskEXIT_CRITICAL();
00004e  6268              STR      r0,[r5,#0x24]  ; uxTaskNumber
000050  f7fffffe          BL       vPortExitCritical
;;;791    
;;;792    		/* Force a reschedule if it is the currently running task that has just
;;;793    		been deleted. */
;;;794    		if( xSchedulerRunning != pdFALSE )
000054  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000056  2800              CMP      r0,#0
000058  d013              BEQ      |L13.130|
;;;795    		{
;;;796    			if( pxTCB == pxCurrentTCB )
00005a  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00005c  4284              CMP      r4,r0
00005e  d108              BNE      |L13.114|
;;;797    			{
;;;798    				configASSERT( uxSchedulerSuspended == 0 );
000060  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
000062  b110              CBZ      r0,|L13.106|
000064  f7fffffe          BL       ulPortSetInterruptMask
                  |L13.104|
000068  e7fe              B        |L13.104|
                  |L13.106|
;;;799    
;;;800    				/* The pre-delete hook is primarily for the Windows simulator,
;;;801    				in which Windows specific clean up operations are performed,
;;;802    				after which it is not possible to yield away from this task -
;;;803    				hence xYieldPending is used to latch that a context switch is
;;;804    				required. */
;;;805    				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;806    				portYIELD_WITHIN_API();
00006a  e8bd4070          POP      {r4-r6,lr}
00006e  f7ffbffe          B.W      vPortYield
                  |L13.114|
;;;807    			}
;;;808    			else
;;;809    			{
;;;810    				/* Reset the next expected unblock time in case it referred to
;;;811    				the task that has just been deleted. */
;;;812    				taskENTER_CRITICAL();
000072  f7fffffe          BL       vPortEnterCritical
;;;813    				{
;;;814    					prvResetNextTaskUnblockTime();
000076  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;815    				}
;;;816    				taskEXIT_CRITICAL();
00007a  e8bd4070          POP      {r4-r6,lr}
00007e  f7ffbffe          B.W      vPortExitCritical
                  |L13.130|
;;;817    			}
;;;818    		}
;;;819    	}
000082  bd70              POP      {r4-r6,pc}
;;;820    
                          ENDP

                  |L13.132|
                          DCD      ||.data||
                  |L13.136|
                          DCD      ||.bss||

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;1621   
;;;1622   void vTaskEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;1623   {
;;;1624   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;1625   	routine so the original ISRs can be restored if necessary.  The port
;;;1626   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;1627   	portDISABLE_INTERRUPTS();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;1628   	xSchedulerRunning = pdFALSE;
000006  4903              LDR      r1,|L14.20|
000008  2000              MOVS     r0,#0
00000a  6148              STR      r0,[r1,#0x14]  ; xSchedulerRunning
;;;1629   	vPortEndScheduler();
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      vPortEndScheduler
;;;1630   }
;;;1631   /*----------------------------------------------------------*/
                          ENDP

                  |L14.20|
                          DCD      ||.data||

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;2634   
;;;2635   void vTaskMissedYield( void )
000000  4901              LDR      r1,|L15.8|
;;;2636   {
;;;2637   	xYieldPending = pdTRUE;
000002  2001              MOVS     r0,#1
000004  61c8              STR      r0,[r1,#0x1c]  ; xYieldPending
;;;2638   }
000006  4770              BX       lr
;;;2639   /*-----------------------------------------------------------*/
                          ENDP

                  |L15.8|
                          DCD      ||.data||

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4361   
;;;4362   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4363   	{
000004  460d              MOV      r5,r1
000006  0004              MOVS     r4,r0
000008  d00f              BEQ      |L16.42|
;;;4364   	TCB_t * pxTCB;
;;;4365   	eNotifyValue eOriginalNotifyState;
;;;4366   	UBaseType_t uxSavedInterruptStatus;
;;;4367   
;;;4368   		configASSERT( xTaskToNotify );
;;;4369   
;;;4370   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4371   		maximum	system call (or maximum API call) interrupt priority.
;;;4372   		Interrupts that are	above the maximum system call priority are keep
;;;4373   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4374   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4375   		is defined in FreeRTOSConfig.h then
;;;4376   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4377   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4378   		been assigned a priority above the configured maximum system call
;;;4379   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4380   		from interrupts	that have been assigned a priority at or (logically)
;;;4381   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4382   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4383   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4384   		provided on the following link:
;;;4385   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4386   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00000a  f7fffffe          BL       vPortValidateInterruptPriority
;;;4387   
;;;4388   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4389   
;;;4390   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000e  f7fffffe          BL       ulPortSetInterruptMask
000012  4680              MOV      r8,r0
;;;4391   		{
;;;4392   			eOriginalNotifyState = pxTCB->eNotifyState;
000014  f8940050          LDRB     r0,[r4,#0x50]
;;;4393   			pxTCB->eNotifyState = eNotified;
000018  2102              MOVS     r1,#2
00001a  f8841050          STRB     r1,[r4,#0x50]
;;;4394   
;;;4395   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4396   			semaphore. */
;;;4397   			( pxTCB->ulNotifiedValue )++;
00001e  6ce1              LDR      r1,[r4,#0x4c]
000020  1c49              ADDS     r1,r1,#1
000022  64e1              STR      r1,[r4,#0x4c]
;;;4398   
;;;4399   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4400   
;;;4401   			/* If the task is in the blocked state specifically to wait for a
;;;4402   			notification then unblock it now. */
;;;4403   			if( eOriginalNotifyState == eWaitingNotification )
000024  2801              CMP      r0,#1
000026  d003              BEQ      |L16.48|
000028  e017              B        |L16.90|
                  |L16.42|
00002a  f7fffffe          BL       ulPortSetInterruptMask
                  |L16.46|
00002e  e7fe              B        |L16.46|
                  |L16.48|
;;;4404   			{
;;;4405   				/* The task should not have been on an event list. */
;;;4406   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000030  6aa0              LDR      r0,[r4,#0x28]
000032  b110              CBZ      r0,|L16.58|
000034  f7fffffe          BL       ulPortSetInterruptMask
                  |L16.56|
000038  e7fe              B        |L16.56|
                  |L16.58|
;;;4407   
;;;4408   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00003a  4e13              LDR      r6,|L16.136|
00003c  6af0              LDR      r0,[r6,#0x2c]  ; uxSchedulerSuspended
00003e  2701              MOVS     r7,#1                 ;4365
000040  b180              CBZ      r0,|L16.100|
;;;4409   				{
;;;4410   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;4411   					prvAddTaskToReadyList( pxTCB );
;;;4412   				}
;;;4413   				else
;;;4414   				{
;;;4415   					/* The delayed and ready lists cannot be accessed, so hold
;;;4416   					this task pending until the scheduler is resumed. */
;;;4417   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000042  f1040118          ADD      r1,r4,#0x18
000046  4811              LDR      r0,|L16.140|
                  |L16.72|
000048  f7fffffe          BL       vListInsertEnd
;;;4418   				}
;;;4419   
;;;4420   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
00004c  6ae0              LDR      r0,[r4,#0x2c]
00004e  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
000050  6ac9              LDR      r1,[r1,#0x2c]
000052  4288              CMP      r0,r1
000054  d901              BLS      |L16.90|
;;;4421   				{
;;;4422   					/* The notified task has a priority above the currently
;;;4423   					executing task so a yield is required. */
;;;4424   					if( pxHigherPriorityTaskWoken != NULL )
000056  b105              CBZ      r5,|L16.90|
;;;4425   					{
;;;4426   						*pxHigherPriorityTaskWoken = pdTRUE;
000058  602f              STR      r7,[r5,#0]
                  |L16.90|
;;;4427   					}
;;;4428   				}
;;;4429   				else
;;;4430   				{
;;;4431   					mtCOVERAGE_TEST_MARKER();
;;;4432   				}
;;;4433   			}
;;;4434   		}
;;;4435   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00005a  4640              MOV      r0,r8
00005c  e8bd41f0          POP      {r4-r8,lr}
000060  f7ffbffe          B.W      vPortClearInterruptMask
                  |L16.100|
000064  1d20              ADDS     r0,r4,#4              ;4410
000066  f7fffffe          BL       uxListRemove
00006a  6ae1              LDR      r1,[r4,#0x2c]         ;4411
00006c  6932              LDR      r2,[r6,#0x10]         ;4411  ; uxTopReadyPriority
00006e  fa07f001          LSL      r0,r7,r1              ;4411
000072  4310              ORRS     r0,r0,r2              ;4411
000074  6130              STR      r0,[r6,#0x10]         ;4411  ; uxTopReadyPriority
000076  eb010081          ADD      r0,r1,r1,LSL #2       ;4411
00007a  4904              LDR      r1,|L16.140|
00007c  39b4              SUBS     r1,r1,#0xb4           ;4411
00007e  eb010080          ADD      r0,r1,r0,LSL #2       ;4411
000082  1d21              ADDS     r1,r4,#4              ;4411
000084  e7e0              B        |L16.72|
;;;4436   	}
;;;4437   
                          ENDP

000086  0000              DCW      0x0000
                  |L16.136|
                          DCD      ||.data||
                  |L16.140|
                          DCD      ||.bss||+0xb4

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;2261   
;;;2262   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2263   {
000002  460d              MOV      r5,r1
000004  b150              CBZ      r0,|L17.28|
;;;2264   TickType_t xTimeToWake;
;;;2265   
;;;2266   	configASSERT( pxEventList );
;;;2267   
;;;2268   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2269   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2270   
;;;2271   	/* Place the event list item of the TCB in the appropriate event list.
;;;2272   	This is placed in the list in priority order so the highest priority task
;;;2273   	is the first to be woken by the event.  The queue that contains the event
;;;2274   	list is locked, preventing simultaneous access from interrupts. */
;;;2275   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000006  4c12              LDR      r4,|L17.80|
000008  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
00000a  3118              ADDS     r1,r1,#0x18
00000c  f7fffffe          BL       vListInsert
;;;2276   
;;;2277   	/* The task must be removed from from the ready list before it is added to
;;;2278   	the blocked list as the same list item is used for both lists.  Exclusive
;;;2279   	access to the ready lists guaranteed because the scheduler is locked. */
;;;2280   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000010  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000012  1d00              ADDS     r0,r0,#4
000014  f7fffffe          BL       uxListRemove
000018  b118              CBZ      r0,|L17.34|
00001a  e00a              B        |L17.50|
                  |L17.28|
00001c  f7fffffe          BL       ulPortSetInterruptMask
                  |L17.32|
000020  e7fe              B        |L17.32|
                  |L17.34|
;;;2281   	{
;;;2282   		/* The current task must be in a ready list, so there is no need to
;;;2283   		check, and the port reset macro can be called directly. */
;;;2284   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000022  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000024  f890102c          LDRB     r1,[r0,#0x2c]
000028  2001              MOVS     r0,#1
00002a  4088              LSLS     r0,r0,r1
00002c  6921              LDR      r1,[r4,#0x10]  ; uxTopReadyPriority
00002e  4381              BICS     r1,r1,r0
000030  6121              STR      r1,[r4,#0x10]  ; uxTopReadyPriority
                  |L17.50|
;;;2285   	}
;;;2286   	else
;;;2287   	{
;;;2288   		mtCOVERAGE_TEST_MARKER();
;;;2289   	}
;;;2290   
;;;2291   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2292   	{
;;;2293   		if( xTicksToWait == portMAX_DELAY )
000032  1c68              ADDS     r0,r5,#1
000034  d005              BEQ      |L17.66|
;;;2294   		{
;;;2295   			/* Add the task to the suspended task list instead of a delayed task
;;;2296   			list to ensure the task is not woken by a timing event.  It will
;;;2297   			block indefinitely. */
;;;2298   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;2299   		}
;;;2300   		else
;;;2301   		{
;;;2302   			/* Calculate the time at which the task should be woken if the event
;;;2303   			does not occur.  This may overflow but this doesn't matter, the
;;;2304   			scheduler will handle it. */
;;;2305   			xTimeToWake = xTickCount + xTicksToWait;
000036  68e0              LDR      r0,[r4,#0xc]  ; xTickCount
000038  4428              ADD      r0,r0,r5
;;;2306   			prvAddCurrentTaskToDelayedList( xTimeToWake );
00003a  e8bd4070          POP      {r4-r6,lr}
00003e  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
                  |L17.66|
000042  6821              LDR      r1,[r4,#0]            ;2298  ; pxCurrentTCB
000044  e8bd4070          POP      {r4-r6,lr}            ;2298
000048  4802              LDR      r0,|L17.84|
00004a  1d09              ADDS     r1,r1,#4              ;2298
00004c  f7ffbffe          B.W      vListInsertEnd
;;;2307   		}
;;;2308   	}
;;;2309   	#else /* INCLUDE_vTaskSuspend */
;;;2310   	{
;;;2311   			/* Calculate the time at which the task should be woken if the event does
;;;2312   			not occur.  This may overflow but this doesn't matter, the scheduler
;;;2313   			will handle it. */
;;;2314   			xTimeToWake = xTickCount + xTicksToWait;
;;;2315   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2316   	}
;;;2317   	#endif /* INCLUDE_vTaskSuspend */
;;;2318   }
;;;2319   /*-----------------------------------------------------------*/
                          ENDP

                  |L17.80|
                          DCD      ||.data||
                  |L17.84|
                          DCD      ||.bss||+0xdc

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;2320   
;;;2321   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2322   {
000002  4615              MOV      r5,r2
000004  b180              CBZ      r0,|L18.40|
;;;2323   TickType_t xTimeToWake;
;;;2324   
;;;2325   	configASSERT( pxEventList );
;;;2326   
;;;2327   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2328   	the event groups implementation. */
;;;2329   	configASSERT( uxSchedulerSuspended != 0 );
000006  4c17              LDR      r4,|L18.100|
000008  6ae2              LDR      r2,[r4,#0x2c]  ; uxSchedulerSuspended
00000a  b182              CBZ      r2,|L18.46|
;;;2330   
;;;2331   	/* Store the item value in the event list item.  It is safe to access the
;;;2332   	event list item here as interrupts won't access the event list item of a
;;;2333   	task that is not in the Blocked state. */
;;;2334   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00000c  6822              LDR      r2,[r4,#0]  ; pxCurrentTCB
00000e  f0414100          ORR      r1,r1,#0x80000000
;;;2335   
;;;2336   	/* Place the event list item of the TCB at the end of the appropriate event
;;;2337   	list.  It is safe to access the event list here because it is part of an
;;;2338   	event group implementation - and interrupts don't access event groups
;;;2339   	directly (instead they access them indirectly by pending function calls to
;;;2340   	the task level). */
;;;2341   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000012  6191              STR      r1,[r2,#0x18]
000014  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
000016  3118              ADDS     r1,r1,#0x18
000018  f7fffffe          BL       vListInsertEnd
;;;2342   
;;;2343   	/* The task must be removed from the ready list before it is added to the
;;;2344   	blocked list.  Exclusive access can be assured to the ready list as the
;;;2345   	scheduler is locked. */
;;;2346   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00001c  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00001e  1d00              ADDS     r0,r0,#4
000020  f7fffffe          BL       uxListRemove
000024  b130              CBZ      r0,|L18.52|
000026  e00d              B        |L18.68|
                  |L18.40|
000028  f7fffffe          BL       ulPortSetInterruptMask
                  |L18.44|
00002c  e7fe              B        |L18.44|
                  |L18.46|
00002e  f7fffffe          BL       ulPortSetInterruptMask
                  |L18.50|
000032  e7fe              B        |L18.50|
                  |L18.52|
;;;2347   	{
;;;2348   		/* The current task must be in a ready list, so there is no need to
;;;2349   		check, and the port reset macro can be called directly. */
;;;2350   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000034  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000036  f890102c          LDRB     r1,[r0,#0x2c]
00003a  2001              MOVS     r0,#1
00003c  4088              LSLS     r0,r0,r1
00003e  6921              LDR      r1,[r4,#0x10]  ; uxTopReadyPriority
000040  4381              BICS     r1,r1,r0
000042  6121              STR      r1,[r4,#0x10]  ; uxTopReadyPriority
                  |L18.68|
;;;2351   	}
;;;2352   	else
;;;2353   	{
;;;2354   		mtCOVERAGE_TEST_MARKER();
;;;2355   	}
;;;2356   
;;;2357   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2358   	{
;;;2359   		if( xTicksToWait == portMAX_DELAY )
000044  1c68              ADDS     r0,r5,#1
000046  d005              BEQ      |L18.84|
;;;2360   		{
;;;2361   			/* Add the task to the suspended task list instead of a delayed task
;;;2362   			list to ensure it is not woken by a timing event.  It will block
;;;2363   			indefinitely. */
;;;2364   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;2365   		}
;;;2366   		else
;;;2367   		{
;;;2368   			/* Calculate the time at which the task should be woken if the event
;;;2369   			does not occur.  This may overflow but this doesn't matter, the
;;;2370   			kernel will manage it correctly. */
;;;2371   			xTimeToWake = xTickCount + xTicksToWait;
000048  68e0              LDR      r0,[r4,#0xc]  ; xTickCount
00004a  4428              ADD      r0,r0,r5
;;;2372   			prvAddCurrentTaskToDelayedList( xTimeToWake );
00004c  e8bd4070          POP      {r4-r6,lr}
000050  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
                  |L18.84|
000054  6821              LDR      r1,[r4,#0]            ;2364  ; pxCurrentTCB
000056  e8bd4070          POP      {r4-r6,lr}            ;2364
00005a  4803              LDR      r0,|L18.104|
00005c  1d09              ADDS     r1,r1,#4              ;2364
00005e  f7ffbffe          B.W      vListInsertEnd
;;;2373   		}
;;;2374   	}
;;;2375   	#else /* INCLUDE_vTaskSuspend */
;;;2376   	{
;;;2377   			/* Calculate the time at which the task should be woken if the event does
;;;2378   			not occur.  This may overflow but this doesn't matter, the kernel
;;;2379   			will manage it correctly. */
;;;2380   			xTimeToWake = xTickCount + xTicksToWait;
;;;2381   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2382   	}
;;;2383   	#endif /* INCLUDE_vTaskSuspend */
;;;2384   }
;;;2385   /*-----------------------------------------------------------*/
                          ENDP

000062  0000              DCW      0x0000
                  |L18.100|
                          DCD      ||.data||
                  |L18.104|
                          DCD      ||.bss||+0xdc

                          AREA ||i.vTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  vTaskPriorityInherit PROC
;;;3417   
;;;3418   	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3419   	{
;;;3420   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000002  0004              MOVS     r4,r0
000004  d039              BEQ      |L19.122|
;;;3421   
;;;3422   		/* If the mutex was given back by an interrupt while the queue was
;;;3423   		locked then the mutex holder might now be NULL. */
;;;3424   		if( pxMutexHolder != NULL )
;;;3425   		{
;;;3426   			/* If the holder of the mutex has a priority below the priority of
;;;3427   			the task attempting to obtain the mutex then it will temporarily
;;;3428   			inherit the priority of the task attempting to obtain the mutex. */
;;;3429   			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
000006  4d1d              LDR      r5,|L19.124|
000008  6ae0              LDR      r0,[r4,#0x2c]
00000a  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00000c  6ac9              LDR      r1,[r1,#0x2c]
00000e  4288              CMP      r0,r1
000010  d233              BCS      |L19.122|
;;;3430   			{
;;;3431   				/* Adjust the mutex holder state to account for its new
;;;3432   				priority.  Only reset the event list item value if the value is
;;;3433   				not	being used for anything else. */
;;;3434   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000012  69a0              LDR      r0,[r4,#0x18]
000014  2800              CMP      r0,#0
000016  db04              BLT      |L19.34|
;;;3435   				{
;;;3436   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000018  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00001a  6ac0              LDR      r0,[r0,#0x2c]
00001c  f1c00007          RSB      r0,r0,#7
000020  61a0              STR      r0,[r4,#0x18]
                  |L19.34|
;;;3437   				}
;;;3438   				else
;;;3439   				{
;;;3440   					mtCOVERAGE_TEST_MARKER();
;;;3441   				}
;;;3442   
;;;3443   				/* If the task being modified is in the ready state it will need
;;;3444   				to be moved into a new list. */
;;;3445   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
000022  6ae1              LDR      r1,[r4,#0x2c]
000024  4e16              LDR      r6,|L19.128|
000026  eb010181          ADD      r1,r1,r1,LSL #2
00002a  6960              LDR      r0,[r4,#0x14]
00002c  eb060181          ADD      r1,r6,r1,LSL #2
000030  4288              CMP      r0,r1
000032  d11f              BNE      |L19.116|
;;;3446   				{
;;;3447   					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000034  1d20              ADDS     r0,r4,#4
000036  f7fffffe          BL       uxListRemove
;;;3448   					{
;;;3449   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00003a  2101              MOVS     r1,#1
00003c  b950              CBNZ     r0,|L19.84|
00003e  6ae0              LDR      r0,[r4,#0x2c]
000040  eb000280          ADD      r2,r0,r0,LSL #2
000044  f8562022          LDR      r2,[r6,r2,LSL #2]
000048  b922              CBNZ     r2,|L19.84|
00004a  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00004c  fa01f000          LSL      r0,r1,r0
000050  4382              BICS     r2,r2,r0
000052  612a              STR      r2,[r5,#0x10]  ; uxTopReadyPriority
                  |L19.84|
;;;3450   					}
;;;3451   					else
;;;3452   					{
;;;3453   						mtCOVERAGE_TEST_MARKER();
;;;3454   					}
;;;3455   
;;;3456   					/* Inherit the priority before being moved into the new list. */
;;;3457   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
000054  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000056  6ac0              LDR      r0,[r0,#0x2c]
;;;3458   					prvAddTaskToReadyList( pxTCB );
000058  62e0              STR      r0,[r4,#0x2c]
00005a  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00005c  4081              LSLS     r1,r1,r0
00005e  4311              ORRS     r1,r1,r2
000060  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  eb060080          ADD      r0,r6,r0,LSL #2
00006a  1d21              ADDS     r1,r4,#4
00006c  e8bd4070          POP      {r4-r6,lr}
000070  f7ffbffe          B.W      vListInsertEnd
                  |L19.116|
;;;3459   				}
;;;3460   				else
;;;3461   				{
;;;3462   					/* Just inherit the priority. */
;;;3463   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
000074  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000076  6ac0              LDR      r0,[r0,#0x2c]
000078  62e0              STR      r0,[r4,#0x2c]
                  |L19.122|
;;;3464   				}
;;;3465   
;;;3466   				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
;;;3467   			}
;;;3468   			else
;;;3469   			{
;;;3470   				mtCOVERAGE_TEST_MARKER();
;;;3471   			}
;;;3472   		}
;;;3473   		else
;;;3474   		{
;;;3475   			mtCOVERAGE_TEST_MARKER();
;;;3476   		}
;;;3477   	}
00007a  bd70              POP      {r4-r6,pc}
;;;3478   
                          ENDP

                  |L19.124|
                          DCD      ||.data||
                  |L19.128|
                          DCD      ||.bss||

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                  vTaskPrioritySet PROC
;;;1119   
;;;1120   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1121   	{
;;;1122   	TCB_t *pxTCB;
;;;1123   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1124   	BaseType_t xYieldRequired = pdFALSE;
000004  2700              MOVS     r7,#0
000006  460e              MOV      r6,r1                 ;1121
000008  4604              MOV      r4,r0                 ;1121
;;;1125   
;;;1126   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
00000a  2907              CMP      r1,#7
00000c  d302              BCC      |L20.20|
00000e  f7fffffe          BL       ulPortSetInterruptMask
                  |L20.18|
000012  e7fe              B        |L20.18|
                  |L20.20|
;;;1127   
;;;1128   		/* Ensure the new priority is valid. */
;;;1129   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
;;;1130   		{
;;;1131   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
;;;1132   		}
;;;1133   		else
;;;1134   		{
;;;1135   			mtCOVERAGE_TEST_MARKER();
;;;1136   		}
;;;1137   
;;;1138   		taskENTER_CRITICAL();
000014  f7fffffe          BL       vPortEnterCritical
;;;1139   		{
;;;1140   			/* If null is passed in here then it is the priority of the calling
;;;1141   			task that is being changed. */
;;;1142   			pxTCB = prvGetTCBFromHandle( xTask );
000018  4d21              LDR      r5,|L20.160|
00001a  b904              CBNZ     r4,|L20.30|
00001c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
                  |L20.30|
;;;1143   
;;;1144   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1145   
;;;1146   			#if ( configUSE_MUTEXES == 1 )
;;;1147   			{
;;;1148   				uxCurrentBasePriority = pxTCB->uxBasePriority;
;;;1149   			}
;;;1150   			#else
;;;1151   			{
;;;1152   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1153   			}
;;;1154   			#endif
;;;1155   
;;;1156   			if( uxCurrentBasePriority != uxNewPriority )
00001e  6c60              LDR      r0,[r4,#0x44]
000020  42b0              CMP      r0,r6
000022  d039              BEQ      |L20.152|
;;;1157   			{
;;;1158   				/* The priority change may have readied a task of higher
;;;1159   				priority than the calling task. */
;;;1160   				if( uxNewPriority > uxCurrentBasePriority )
;;;1161   				{
;;;1162   					if( pxTCB != pxCurrentTCB )
;;;1163   					{
;;;1164   						/* The priority of a task other than the currently
;;;1165   						running task is being raised.  Is the priority being
;;;1166   						raised above that of the running task? */
;;;1167   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
;;;1168   						{
;;;1169   							xYieldRequired = pdTRUE;
;;;1170   						}
;;;1171   						else
;;;1172   						{
;;;1173   							mtCOVERAGE_TEST_MARKER();
;;;1174   						}
;;;1175   					}
;;;1176   					else
;;;1177   					{
;;;1178   						/* The priority of the running task is being raised,
;;;1179   						but the running task must already be the highest
;;;1180   						priority task able to run so no yield is required. */
;;;1181   					}
;;;1182   				}
;;;1183   				else if( pxTCB == pxCurrentTCB )
000024  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000026  4286              CMP      r6,r0                 ;1160
000028  d906              BLS      |L20.56|
00002a  428c              CMP      r4,r1                 ;1162
00002c  d007              BEQ      |L20.62|
00002e  6829              LDR      r1,[r5,#0]            ;1167  ; pxCurrentTCB
000030  6ac9              LDR      r1,[r1,#0x2c]         ;1167
000032  42b1              CMP      r1,r6                 ;1167
000034  d902              BLS      |L20.60|
000036  e002              B        |L20.62|
                  |L20.56|
000038  428c              CMP      r4,r1
00003a  d100              BNE      |L20.62|
                  |L20.60|
;;;1184   				{
;;;1185   					/* Setting the priority of the running task down means
;;;1186   					there may now be another task of higher priority that
;;;1187   					is ready to execute. */
;;;1188   					xYieldRequired = pdTRUE;
00003c  2701              MOVS     r7,#1
                  |L20.62|
;;;1189   				}
;;;1190   				else
;;;1191   				{
;;;1192   					/* Setting the priority of any other task down does not
;;;1193   					require a yield as the running task must be above the
;;;1194   					new priority of the task being modified. */
;;;1195   				}
;;;1196   
;;;1197   				/* Remember the ready list the task might be referenced from
;;;1198   				before its uxPriority member is changed so the
;;;1199   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1200   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
00003e  6ae1              LDR      r1,[r4,#0x2c]
000040  4688              MOV      r8,r1
;;;1201   
;;;1202   				#if ( configUSE_MUTEXES == 1 )
;;;1203   				{
;;;1204   					/* Only change the priority being used if the task is not
;;;1205   					currently using an inherited priority. */
;;;1206   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
000042  4288              CMP      r0,r1
000044  d100              BNE      |L20.72|
;;;1207   					{
;;;1208   						pxTCB->uxPriority = uxNewPriority;
000046  62e6              STR      r6,[r4,#0x2c]
                  |L20.72|
;;;1209   					}
;;;1210   					else
;;;1211   					{
;;;1212   						mtCOVERAGE_TEST_MARKER();
;;;1213   					}
;;;1214   
;;;1215   					/* The base priority gets set whatever. */
;;;1216   					pxTCB->uxBasePriority = uxNewPriority;
;;;1217   				}
;;;1218   				#else
;;;1219   				{
;;;1220   					pxTCB->uxPriority = uxNewPriority;
;;;1221   				}
;;;1222   				#endif
;;;1223   
;;;1224   				/* Only reset the event list item value if the value is not
;;;1225   				being used for anything else. */
;;;1226   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000048  6466              STR      r6,[r4,#0x44]
00004a  69a0              LDR      r0,[r4,#0x18]
00004c  2800              CMP      r0,#0
00004e  db02              BLT      |L20.86|
;;;1227   				{
;;;1228   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000050  f1c60007          RSB      r0,r6,#7
000054  61a0              STR      r0,[r4,#0x18]
                  |L20.86|
;;;1229   				}
;;;1230   				else
;;;1231   				{
;;;1232   					mtCOVERAGE_TEST_MARKER();
;;;1233   				}
;;;1234   
;;;1235   				/* If the task is in the blocked or suspended list we need do
;;;1236   				nothing more than change it's priority variable. However, if
;;;1237   				the task is in a ready list it needs to be removed and placed
;;;1238   				in the list appropriate to its new priority. */
;;;1239   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
000056  4e13              LDR      r6,|L20.164|
000058  eb080088          ADD      r0,r8,r8,LSL #2
00005c  6961              LDR      r1,[r4,#0x14]
00005e  eb060080          ADD      r0,r6,r0,LSL #2
000062  4281              CMP      r1,r0
000064  d115              BNE      |L20.146|
;;;1240   				{
;;;1241   					/* The task is currently in its ready list - remove before adding
;;;1242   					it to it's new ready list.  As we are in a critical section we
;;;1243   					can do this even if the scheduler is suspended. */
;;;1244   					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000066  1d20              ADDS     r0,r4,#4
000068  f7fffffe          BL       uxListRemove
00006c  2101              MOVS     r1,#1                 ;1169
00006e  b920              CBNZ     r0,|L20.122|
;;;1245   					{
;;;1246   						/* It is known that the task is in its ready list so
;;;1247   						there is no need to check again and the port level
;;;1248   						reset macro can be called directly. */
;;;1249   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
000070  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000072  fa01f008          LSL      r0,r1,r8
000076  4382              BICS     r2,r2,r0
000078  612a              STR      r2,[r5,#0x10]  ; uxTopReadyPriority
                  |L20.122|
;;;1250   					}
;;;1251   					else
;;;1252   					{
;;;1253   						mtCOVERAGE_TEST_MARKER();
;;;1254   					}
;;;1255   					prvAddTaskToReadyList( pxTCB );
00007a  6ae0              LDR      r0,[r4,#0x2c]
00007c  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00007e  4081              LSLS     r1,r1,r0
000080  4311              ORRS     r1,r1,r2
000082  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000084  eb000080          ADD      r0,r0,r0,LSL #2
000088  eb060080          ADD      r0,r6,r0,LSL #2
00008c  1d21              ADDS     r1,r4,#4
00008e  f7fffffe          BL       vListInsertEnd
                  |L20.146|
;;;1256   				}
;;;1257   				else
;;;1258   				{
;;;1259   					mtCOVERAGE_TEST_MARKER();
;;;1260   				}
;;;1261   
;;;1262   				if( xYieldRequired == pdTRUE )
000092  b10f              CBZ      r7,|L20.152|
;;;1263   				{
;;;1264   					taskYIELD_IF_USING_PREEMPTION();
000094  f7fffffe          BL       vPortYield
                  |L20.152|
;;;1265   				}
;;;1266   				else
;;;1267   				{
;;;1268   					mtCOVERAGE_TEST_MARKER();
;;;1269   				}
;;;1270   
;;;1271   				/* Remove compiler warning about unused variables when the port
;;;1272   				optimised task selection is not being used. */
;;;1273   				( void ) uxPriorityUsedOnEntry;
;;;1274   			}
;;;1275   		}
;;;1276   		taskEXIT_CRITICAL();
000098  e8bd41f0          POP      {r4-r8,lr}
00009c  f7ffbffe          B.W      vPortExitCritical
;;;1277   	}
;;;1278   
                          ENDP

                  |L20.160|
                          DCD      ||.data||
                  |L20.164|
                          DCD      ||.bss||

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1418   
;;;1419   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  b570              PUSH     {r4-r6,lr}
;;;1420   	{
;;;1421   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000002  0004              MOVS     r4,r0
000004  d00b              BEQ      |L21.30|
;;;1422   
;;;1423   		/* It does not make sense to resume the calling task. */
;;;1424   		configASSERT( xTaskToResume );
;;;1425   
;;;1426   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1427   		currently executing task. */
;;;1428   		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
000006  4d16              LDR      r5,|L21.96|
000008  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00000a  4284              CMP      r4,r0
00000c  d026              BEQ      |L21.92|
;;;1429   		{
;;;1430   			taskENTER_CRITICAL();
00000e  f7fffffe          BL       vPortEnterCritical
;;;1431   			{
;;;1432   				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       prvTaskIsTaskSuspended
000018  2801              CMP      r0,#1
00001a  d003              BEQ      |L21.36|
00001c  e01a              B        |L21.84|
                  |L21.30|
00001e  f7fffffe          BL       ulPortSetInterruptMask
                  |L21.34|
000022  e7fe              B        |L21.34|
                  |L21.36|
;;;1433   				{
;;;1434   					traceTASK_RESUME( pxTCB );
;;;1435   
;;;1436   					/* As we are in a critical section we can access the ready
;;;1437   					lists even if the scheduler is suspended. */
;;;1438   					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
000024  1d20              ADDS     r0,r4,#4
000026  f7fffffe          BL       uxListRemove
;;;1439   					prvAddTaskToReadyList( pxTCB );
00002a  6ae0              LDR      r0,[r4,#0x2c]
00002c  2101              MOVS     r1,#1
00002e  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000030  4081              LSLS     r1,r1,r0
000032  4311              ORRS     r1,r1,r2
000034  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000036  490b              LDR      r1,|L21.100|
000038  eb000080          ADD      r0,r0,r0,LSL #2
00003c  eb010080          ADD      r0,r1,r0,LSL #2
000040  1d21              ADDS     r1,r4,#4
000042  f7fffffe          BL       vListInsertEnd
;;;1440   
;;;1441   					/* We may have just resumed a higher priority task. */
;;;1442   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
000046  6ae0              LDR      r0,[r4,#0x2c]
000048  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00004a  6ac9              LDR      r1,[r1,#0x2c]
00004c  4288              CMP      r0,r1
00004e  d301              BCC      |L21.84|
;;;1443   					{
;;;1444   						/* This yield may not cause the task just resumed to run,
;;;1445   						but will leave the lists in the correct state for the
;;;1446   						next yield. */
;;;1447   						taskYIELD_IF_USING_PREEMPTION();
000050  f7fffffe          BL       vPortYield
                  |L21.84|
;;;1448   					}
;;;1449   					else
;;;1450   					{
;;;1451   						mtCOVERAGE_TEST_MARKER();
;;;1452   					}
;;;1453   				}
;;;1454   				else
;;;1455   				{
;;;1456   					mtCOVERAGE_TEST_MARKER();
;;;1457   				}
;;;1458   			}
;;;1459   			taskEXIT_CRITICAL();
000054  e8bd4070          POP      {r4-r6,lr}
000058  f7ffbffe          B.W      vPortExitCritical
                  |L21.92|
;;;1460   		}
;;;1461   		else
;;;1462   		{
;;;1463   			mtCOVERAGE_TEST_MARKER();
;;;1464   		}
;;;1465   	}
00005c  bd70              POP      {r4-r6,pc}
;;;1466   
                          ENDP

00005e  0000              DCW      0x0000
                  |L21.96|
                          DCD      ||.data||
                  |L21.100|
                          DCD      ||.bss||

                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;2577   
;;;2578   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  b510              PUSH     {r4,lr}
;;;2579   {
000002  b128              CBZ      r0,|L22.16|
;;;2580   	configASSERT( pxTimeOut );
;;;2581   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000004  4904              LDR      r1,|L22.24|
000006  6a0a              LDR      r2,[r1,#0x20]  ; xNumOfOverflows
;;;2582   	pxTimeOut->xTimeOnEntering = xTickCount;
000008  6002              STR      r2,[r0,#0]
00000a  68c9              LDR      r1,[r1,#0xc]  ; xTickCount
;;;2583   }
00000c  6041              STR      r1,[r0,#4]
00000e  bd10              POP      {r4,pc}
                  |L22.16|
000010  f7fffffe          BL       ulPortSetInterruptMask
                  |L22.20|
000014  e7fe              B        |L22.20|
;;;2584   /*-----------------------------------------------------------*/
                          ENDP

000016  0000              DCW      0x0000
                  |L22.24|
                          DCD      ||.data||

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1542   
;;;1543   void vTaskStartScheduler( void )
000000  b51f              PUSH     {r0-r4,lr}
;;;1544   {
;;;1545   BaseType_t xReturn;
;;;1546   
;;;1547   	/* Add the idle task at the lowest priority. */
;;;1548   	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
;;;1549   	{
;;;1550   		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
;;;1551   		be returned by the xTaskGetIdleTaskHandle() function. */
;;;1552   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1553   	}
;;;1554   	#else
;;;1555   	{
;;;1556   		/* Create the idle task without storing its handle. */
;;;1557   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
000002  2400              MOVS     r4,#0
000004  9400              STR      r4,[sp,#0]
000006  9401              STR      r4,[sp,#4]
000008  9402              STR      r4,[sp,#8]
00000a  4623              MOV      r3,r4
00000c  2280              MOVS     r2,#0x80
00000e  a10d              ADR      r1,|L23.68|
000010  480e              LDR      r0,|L23.76|
000012  9403              STR      r4,[sp,#0xc]
000014  f7fffffe          BL       xTaskGenericCreate
;;;1558   	}
;;;1559   	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
;;;1560   
;;;1561   	#if ( configUSE_TIMERS == 1 )
;;;1562   	{
;;;1563   		if( xReturn == pdPASS )
;;;1564   		{
;;;1565   			xReturn = xTimerCreateTimerTask();
;;;1566   		}
;;;1567   		else
;;;1568   		{
;;;1569   			mtCOVERAGE_TEST_MARKER();
;;;1570   		}
;;;1571   	}
;;;1572   	#endif /* configUSE_TIMERS */
;;;1573   
;;;1574   	if( xReturn == pdPASS )
000018  2801              CMP      r0,#1
00001a  d004              BEQ      |L23.38|
;;;1575   	{
;;;1576   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;1577   		before or during the call to xPortStartScheduler().  The stacks of
;;;1578   		the created tasks contain a status word with interrupts switched on
;;;1579   		so interrupts will automatically get re-enabled when the first task
;;;1580   		starts to run. */
;;;1581   		portDISABLE_INTERRUPTS();
;;;1582   
;;;1583   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1584   		{
;;;1585   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;1586   			structure specific to the task that will run first. */
;;;1587   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;1588   		}
;;;1589   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;1590   
;;;1591   		xNextTaskUnblockTime = portMAX_DELAY;
;;;1592   		xSchedulerRunning = pdTRUE;
;;;1593   		xTickCount = ( TickType_t ) 0U;
;;;1594   
;;;1595   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;1596   		macro must be defined to configure the timer/counter used to generate
;;;1597   		the run time counter time base. */
;;;1598   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;1599   
;;;1600   		/* Setting up the timer tick is hardware specific and thus in the
;;;1601   		portable interface. */
;;;1602   		if( xPortStartScheduler() != pdFALSE )
;;;1603   		{
;;;1604   			/* Should not reach here as if the scheduler is running the
;;;1605   			function will not return. */
;;;1606   		}
;;;1607   		else
;;;1608   		{
;;;1609   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;1610   		}
;;;1611   	}
;;;1612   	else
;;;1613   	{
;;;1614   		/* This line will only be reached if the kernel could not be started,
;;;1615   		because there was not enough FreeRTOS heap to create the idle task
;;;1616   		or the timer task. */
;;;1617   		configASSERT( xReturn );
00001c  2800              CMP      r0,#0
00001e  d10f              BNE      |L23.64|
000020  f7fffffe          BL       ulPortSetInterruptMask
                  |L23.36|
000024  e7fe              B        |L23.36|
                  |L23.38|
000026  f7fffffe          BL       ulPortSetInterruptMask
00002a  4809              LDR      r0,|L23.80|
00002c  f04f31ff          MOV      r1,#0xffffffff        ;1591
000030  6281              STR      r1,[r0,#0x28]         ;1591  ; xNextTaskUnblockTime
000032  2101              MOVS     r1,#1                 ;1592
000034  6141              STR      r1,[r0,#0x14]         ;1592  ; xSchedulerRunning
000036  60c4              STR      r4,[r0,#0xc]          ;1593  ; xTickCount
000038  e8bd401f          POP      {r0-r4,lr}            ;1602
00003c  f7ffbffe          B.W      xPortStartScheduler
                  |L23.64|
;;;1618   	}
;;;1619   }
000040  bd1f              POP      {r0-r4,pc}
;;;1620   /*-----------------------------------------------------------*/
                          ENDP

000042  0000              DCW      0x0000
                  |L23.68|
000044  49444c45          DCB      "IDLE",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L23.76|
                          DCD      prvIdleTask
                  |L23.80|
                          DCD      ||.data||

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1283   
;;;1284   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  b570              PUSH     {r4-r6,lr}
;;;1285   	{
000002  4604              MOV      r4,r0
;;;1286   	TCB_t *pxTCB;
;;;1287   
;;;1288   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1289   		{
;;;1290   			/* If null is passed in here then it is the running task that is
;;;1291   			being suspended. */
;;;1292   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
000008  4d22              LDR      r5,|L24.148|
00000a  b904              CBNZ     r4,|L24.14|
00000c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
                  |L24.14|
;;;1293   
;;;1294   			traceTASK_SUSPEND( pxTCB );
;;;1295   
;;;1296   			/* Remove task from the ready/delayed list and place in the
;;;1297   			suspended list. */
;;;1298   			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
000014  b958              CBNZ     r0,|L24.46|
;;;1299   			{
;;;1300   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  4a1f              LDR      r2,|L24.152|
00001a  eb000180          ADD      r1,r0,r0,LSL #2
00001e  f8521021          LDR      r1,[r2,r1,LSL #2]
000022  b921              CBNZ     r1,|L24.46|
000024  2101              MOVS     r1,#1
000026  4081              LSLS     r1,r1,r0
000028  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
00002a  4388              BICS     r0,r0,r1
00002c  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L24.46|
;;;1301   			}
;;;1302   			else
;;;1303   			{
;;;1304   				mtCOVERAGE_TEST_MARKER();
;;;1305   			}
;;;1306   
;;;1307   			/* Is the task waiting on an event also? */
;;;1308   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  b118              CBZ      r0,|L24.58|
;;;1309   			{
;;;1310   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000032  f1040018          ADD      r0,r4,#0x18
000036  f7fffffe          BL       uxListRemove
                  |L24.58|
;;;1311   			}
;;;1312   			else
;;;1313   			{
;;;1314   				mtCOVERAGE_TEST_MARKER();
;;;1315   			}
;;;1316   
;;;1317   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
00003a  4817              LDR      r0,|L24.152|
00003c  1d21              ADDS     r1,r4,#4
00003e  30dc              ADDS     r0,r0,#0xdc
000040  f7fffffe          BL       vListInsertEnd
;;;1318   		}
;;;1319   		taskEXIT_CRITICAL();
000044  f7fffffe          BL       vPortExitCritical
;;;1320   
;;;1321   		if( pxTCB == pxCurrentTCB )
000048  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00004a  4284              CMP      r4,r0
;;;1322   		{
;;;1323   			if( xSchedulerRunning != pdFALSE )
;;;1324   			{
;;;1325   				/* The current task has just been suspended. */
;;;1326   				configASSERT( uxSchedulerSuspended == 0 );
;;;1327   				portYIELD_WITHIN_API();
;;;1328   			}
;;;1329   			else
;;;1330   			{
;;;1331   				/* The scheduler is not running, but the task that was pointed
;;;1332   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1333   				must be adjusted to point to a different task. */
;;;1334   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
;;;1335   				{
;;;1336   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1337   					NULL so when the next task is created pxCurrentTCB will
;;;1338   					be set to point to it no matter what its relative priority
;;;1339   					is. */
;;;1340   					pxCurrentTCB = NULL;
;;;1341   				}
;;;1342   				else
;;;1343   				{
;;;1344   					vTaskSwitchContext();
;;;1345   				}
;;;1346   			}
;;;1347   		}
;;;1348   		else
;;;1349   		{
;;;1350   			if( xSchedulerRunning != pdFALSE )
00004c  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
00004e  d116              BNE      |L24.126|
000050  b140              CBZ      r0,|L24.100|
000052  6ae8              LDR      r0,[r5,#0x2c]         ;1326  ; uxSchedulerSuspended
000054  b110              CBZ      r0,|L24.92|
000056  f7fffffe          BL       ulPortSetInterruptMask
                  |L24.90|
00005a  e7fe              B        |L24.90|
                  |L24.92|
00005c  e8bd4070          POP      {r4-r6,lr}            ;1327
000060  f7ffbffe          B.W      vPortYield
                  |L24.100|
000064  480c              LDR      r0,|L24.152|
000066  68a9              LDR      r1,[r5,#8]            ;1334  ; uxCurrentNumberOfTasks
000068  30dc              ADDS     r0,r0,#0xdc           ;1334
00006a  6800              LDR      r0,[r0,#0]            ;1334  ; xSuspendedTaskList
00006c  4288              CMP      r0,r1                 ;1334
00006e  d102              BNE      |L24.118|
000070  2000              MOVS     r0,#0                 ;1340
000072  6028              STR      r0,[r5,#0]            ;1340  ; pxCurrentTCB
                  |L24.116|
;;;1351   			{
;;;1352   				/* A task other than the currently running task was suspended,
;;;1353   				reset the next expected unblock time in case it referred to the
;;;1354   				task that is now in the Suspended state. */
;;;1355   				taskENTER_CRITICAL();
;;;1356   				{
;;;1357   					prvResetNextTaskUnblockTime();
;;;1358   				}
;;;1359   				taskEXIT_CRITICAL();
;;;1360   			}
;;;1361   			else
;;;1362   			{
;;;1363   				mtCOVERAGE_TEST_MARKER();
;;;1364   			}
;;;1365   		}
;;;1366   	}
000074  bd70              POP      {r4-r6,pc}
                  |L24.118|
000076  e8bd4070          POP      {r4-r6,lr}            ;1344
00007a  f7ffbffe          B.W      vTaskSwitchContext
                  |L24.126|
00007e  2800              CMP      r0,#0                 ;1350
000080  d0f8              BEQ      |L24.116|
000082  f7fffffe          BL       vPortEnterCritical
000086  f7fffffe          BL       prvResetNextTaskUnblockTime
00008a  e8bd4070          POP      {r4-r6,lr}            ;1359
00008e  f7ffbffe          B.W      vPortExitCritical
;;;1367   
                          ENDP

000092  0000              DCW      0x0000
                  |L24.148|
                          DCD      ||.data||
                  |L24.152|
                          DCD      ||.bss||

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;1632   
;;;1633   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L25.12|
;;;1634   {
;;;1635   	/* A critical section is not required as the variable is of type
;;;1636   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;1637   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;1638   	http://goo.gl/wu4acr */
;;;1639   	++uxSchedulerSuspended;
000002  6ac1              LDR      r1,[r0,#0x2c]  ; uxSchedulerSuspended
000004  1c49              ADDS     r1,r1,#1
000006  62c1              STR      r1,[r0,#0x2c]  ; uxSchedulerSuspended
;;;1640   }
000008  4770              BX       lr
;;;1641   /*----------------------------------------------------------*/
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      ||.data||

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2202   
;;;2203   void vTaskSwitchContext( void )
000000  4812              LDR      r0,|L26.76|
;;;2204   {
000002  b510              PUSH     {r4,lr}
;;;2205   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000004  6ac1              LDR      r1,[r0,#0x2c]  ; uxSchedulerSuspended
000006  b111              CBZ      r1,|L26.14|
;;;2206   	{
;;;2207   		/* The scheduler is currently suspended - do not allow a context
;;;2208   		switch. */
;;;2209   		xYieldPending = pdTRUE;
000008  2101              MOVS     r1,#1
00000a  61c1              STR      r1,[r0,#0x1c]  ; xYieldPending
;;;2210   	}
;;;2211   	else
;;;2212   	{
;;;2213   		xYieldPending = pdFALSE;
;;;2214   		traceTASK_SWITCHED_OUT();
;;;2215   
;;;2216   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2217   		{
;;;2218   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2219   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2220   				#else
;;;2221   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2222   				#endif
;;;2223   
;;;2224   				/* Add the amount of time the task has been running to the
;;;2225   				accumulated	time so far.  The time the task started running was
;;;2226   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2227   				protection here	so count values are only valid until the timer
;;;2228   				overflows.  The guard against negative values is to protect
;;;2229   				against suspect run time stat counter implementations - which
;;;2230   				are provided by the application, not the kernel. */
;;;2231   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2232   				{
;;;2233   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2234   				}
;;;2235   				else
;;;2236   				{
;;;2237   					mtCOVERAGE_TEST_MARKER();
;;;2238   				}
;;;2239   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2240   		}
;;;2241   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2242   
;;;2243   		/* Check for stack overflow, if configured. */
;;;2244   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2245   
;;;2246   		/* Select a new task to run using either the generic C or port
;;;2247   		optimised asm code. */
;;;2248   		taskSELECT_HIGHEST_PRIORITY_TASK();
;;;2249   		traceTASK_SWITCHED_IN();
;;;2250   
;;;2251   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2252   		{
;;;2253   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2254   			structure specific to this task. */
;;;2255   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2256   		}
;;;2257   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2258   	}
;;;2259   }
00000c  bd10              POP      {r4,pc}
                  |L26.14|
00000e  2100              MOVS     r1,#0                 ;2213
000010  61c1              STR      r1,[r0,#0x1c]         ;2213  ; xYieldPending
000012  6901              LDR      r1,[r0,#0x10]         ;2248  ; uxTopReadyPriority
000014  4a0e              LDR      r2,|L26.80|
000016  fab1f181          CLZ      r1,r1                 ;2248
00001a  f1c1011f          RSB      r1,r1,#0x1f           ;2248
00001e  eb010181          ADD      r1,r1,r1,LSL #2       ;2248
000022  f8523021          LDR      r3,[r2,r1,LSL #2]     ;2248
000026  b16b              CBZ      r3,|L26.68|
000028  eb020181          ADD      r1,r2,r1,LSL #2       ;2248
00002c  f1010308          ADD      r3,r1,#8              ;2248
000030  684a              LDR      r2,[r1,#4]            ;2248
000032  6852              LDR      r2,[r2,#4]            ;2248
000034  604a              STR      r2,[r1,#4]            ;2248
000036  429a              CMP      r2,r3                 ;2248
000038  d101              BNE      |L26.62|
00003a  6852              LDR      r2,[r2,#4]            ;2248
00003c  604a              STR      r2,[r1,#4]            ;2248
                  |L26.62|
00003e  68d1              LDR      r1,[r2,#0xc]          ;2248
000040  6001              STR      r1,[r0,#0]            ;2248  ; pxCurrentTCB
000042  bd10              POP      {r4,pc}
                  |L26.68|
000044  f7fffffe          BL       ulPortSetInterruptMask
                  |L26.72|
000048  e7fe              B        |L26.72|
;;;2260   /*-----------------------------------------------------------*/
                          ENDP

00004a  0000              DCW      0x0000
                  |L26.76|
                          DCD      ||.data||
                  |L26.80|
                          DCD      ||.bss||

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;2585   
;;;2586   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2587   {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d019              BEQ      |L27.60|
;;;2588   BaseType_t xReturn;
;;;2589   
;;;2590   	configASSERT( pxTimeOut );
;;;2591   	configASSERT( pxTicksToWait );
000008  b1dd              CBZ      r5,|L27.66|
;;;2592   
;;;2593   	taskENTER_CRITICAL();
00000a  f7fffffe          BL       vPortEnterCritical
;;;2594   	{
;;;2595   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;2596   		const TickType_t xConstTickCount = xTickCount;
00000e  4a11              LDR      r2,|L27.84|
000010  68d1              LDR      r1,[r2,#0xc]  ; xTickCount
;;;2597   
;;;2598   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;2599   			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
;;;2600   			the maximum block time then the task should block indefinitely, and
;;;2601   			therefore never time out. */
;;;2602   			if( *pxTicksToWait == portMAX_DELAY )
000012  6828              LDR      r0,[r5,#0]
000014  1c43              ADDS     r3,r0,#1
000016  d00f              BEQ      |L27.56|
;;;2603   			{
;;;2604   				xReturn = pdFALSE;
;;;2605   			}
;;;2606   			else /* We are not blocking indefinitely, perform the checks below. */
;;;2607   		#endif
;;;2608   
;;;2609   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
000018  6823              LDR      r3,[r4,#0]
00001a  6a12              LDR      r2,[r2,#0x20]  ; xNumOfOverflows
00001c  4293              CMP      r3,r2
00001e  d002              BEQ      |L27.38|
000020  6862              LDR      r2,[r4,#4]
000022  428a              CMP      r2,r1
000024  d910              BLS      |L27.72|
                  |L27.38|
;;;2610   		{
;;;2611   			/* The tick count is greater than the time at which vTaskSetTimeout()
;;;2612   			was called, but has also overflowed since vTaskSetTimeOut() was called.
;;;2613   			It must have wrapped all the way around and gone past us again. This
;;;2614   			passed since vTaskSetTimeout() was called. */
;;;2615   			xReturn = pdTRUE;
;;;2616   		}
;;;2617   		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
000026  6862              LDR      r2,[r4,#4]
000028  1a89              SUBS     r1,r1,r2
00002a  4281              CMP      r1,r0
00002c  d20c              BCS      |L27.72|
;;;2618   		{
;;;2619   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;2620   			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
00002e  1a40              SUBS     r0,r0,r1
;;;2621   			vTaskSetTimeOutState( pxTimeOut );
000030  6028              STR      r0,[r5,#0]
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       vTaskSetTimeOutState
                  |L27.56|
000038  2400              MOVS     r4,#0                 ;2604
00003a  e006              B        |L27.74|
                  |L27.60|
00003c  f7fffffe          BL       ulPortSetInterruptMask
                  |L27.64|
000040  e7fe              B        |L27.64|
                  |L27.66|
000042  f7fffffe          BL       ulPortSetInterruptMask
                  |L27.70|
000046  e7fe              B        |L27.70|
                  |L27.72|
;;;2622   			xReturn = pdFALSE;
;;;2623   		}
;;;2624   		else
;;;2625   		{
;;;2626   			xReturn = pdTRUE;
000048  2401              MOVS     r4,#1
                  |L27.74|
;;;2627   		}
;;;2628   	}
;;;2629   	taskEXIT_CRITICAL();
00004a  f7fffffe          BL       vPortExitCritical
;;;2630   
;;;2631   	return xReturn;
00004e  4620              MOV      r0,r4
;;;2632   }
000050  bd70              POP      {r4-r6,pc}
;;;2633   /*-----------------------------------------------------------*/
                          ENDP

000052  0000              DCW      0x0000
                  |L27.84|
                          DCD      ||.data||

                          AREA ||i.xTaskGenericCreate||, CODE, READONLY, ALIGN=2

                  xTaskGenericCreate PROC
;;;550    
;;;551    BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;552    {
000004  ea5f0a00          MOVS     r10,r0
000008  e9dd900b          LDRD     r9,r0,[sp,#0x2c]
00000c  9e0a              LDR      r6,[sp,#0x28]
00000e  469b              MOV      r11,r3
000010  4615              MOV      r5,r2
000012  4688              MOV      r8,r1
000014  d004              BEQ      |L28.32|
;;;553    BaseType_t xReturn;
;;;554    TCB_t * pxNewTCB;
;;;555    StackType_t *pxTopOfStack;
;;;556    
;;;557    	configASSERT( pxTaskCode );
;;;558    	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
000016  2e07              CMP      r6,#7
000018  d305              BCC      |L28.38|
00001a  f7fffffe          BL       ulPortSetInterruptMask
                  |L28.30|
00001e  e7fe              B        |L28.30|
                  |L28.32|
000020  f7fffffe          BL       ulPortSetInterruptMask
                  |L28.36|
000024  e7fe              B        |L28.36|
                  |L28.38|
000026  b910              CBNZ     r0,|L28.46|
000028  00a8              LSLS     r0,r5,#2              ;557
00002a  f7fffffe          BL       pvPortMalloc
                  |L28.46|
00002e  0007              MOVS     r7,r0                 ;557
000030  d014              BEQ      |L28.92|
000032  2054              MOVS     r0,#0x54              ;557
000034  f7fffffe          BL       pvPortMalloc
000038  b168              CBZ      r0,|L28.86|
;;;559    
;;;560    	/* Allocate the memory required by the TCB and stack for the new task,
;;;561    	checking that the allocation was successful. */
;;;562    	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
00003a  4604              MOV      r4,r0
;;;563    
;;;564    	if( pxNewTCB != NULL )
;;;565    	{
;;;566    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;567    			/* Should the task be created in privileged mode? */
;;;568    			BaseType_t xRunPrivileged;
;;;569    			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;570    			{
;;;571    				xRunPrivileged = pdTRUE;
;;;572    			}
;;;573    			else
;;;574    			{
;;;575    				xRunPrivileged = pdFALSE;
;;;576    			}
;;;577    			uxPriority &= ~portPRIVILEGE_BIT;
;;;578    
;;;579    			if( puxStackBuffer != NULL )
;;;580    			{
;;;581    				/* The application provided its own stack.  Note this so no
;;;582    				attempt is made to delete the stack should that task be
;;;583    				deleted. */
;;;584    				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
;;;585    			}
;;;586    			else
;;;587    			{
;;;588    				/* The stack was allocated dynamically.  Note this so it can be
;;;589    				deleted again if the task is deleted. */
;;;590    				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
;;;591    			}
;;;592    		#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;593    
;;;594    		/* Calculate the top of stack address.  This depends on whether the
;;;595    		stack grows from high memory to low (as per the 80x86) or vice versa.
;;;596    		portSTACK_GROWTH is used to make the result positive or negative as
;;;597    		required by the port. */
;;;598    		#if( portSTACK_GROWTH < 0 )
;;;599    		{
;;;600    			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
00003c  6307              STR      r7,[r0,#0x30]
00003e  f06f0003          MVN      r0,#3
000042  eb000085          ADD      r0,r0,r5,LSL #2
000046  4438              ADD      r0,r0,r7
;;;601    			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
000048  f0200707          BIC      r7,r0,#7
;;;602    
;;;603    			/* Check the alignment of the calculated top of stack is correct. */
;;;604    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
00004c  0778              LSLS     r0,r7,#29
00004e  d008              BEQ      |L28.98|
000050  f7fffffe          BL       ulPortSetInterruptMask
                  |L28.84|
000054  e7fe              B        |L28.84|
                  |L28.86|
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       vPortFree
                  |L28.92|
;;;605    		}
;;;606    		#else /* portSTACK_GROWTH */
;;;607    		{
;;;608    			pxTopOfStack = pxNewTCB->pxStack;
;;;609    
;;;610    			/* Check the alignment of the stack buffer is correct. */
;;;611    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;612    
;;;613    			/* If we want to use stack checking on architectures that use
;;;614    			a positive stack growth direction then we also need to store the
;;;615    			other extreme of the stack space. */
;;;616    			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
;;;617    		}
;;;618    		#endif /* portSTACK_GROWTH */
;;;619    
;;;620    		/* Setup the newly allocated TCB with the initial state of the task. */
;;;621    		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
;;;622    
;;;623    		/* Initialize the TCB stack to look as if the task was already running,
;;;624    		but had been interrupted by the scheduler.  The return address is set
;;;625    		to the start of the task function. Once the stack has been initialised
;;;626    		the	top of stack variable is updated. */
;;;627    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;628    		{
;;;629    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;630    		}
;;;631    		#else /* portUSING_MPU_WRAPPERS */
;;;632    		{
;;;633    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
;;;634    		}
;;;635    		#endif /* portUSING_MPU_WRAPPERS */
;;;636    
;;;637    		if( ( void * ) pxCreatedTask != NULL )
;;;638    		{
;;;639    			/* Pass the TCB out - in an anonymous way.  The calling function/
;;;640    			task can use this as a handle to delete the task later if
;;;641    			required.*/
;;;642    			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
;;;643    		}
;;;644    		else
;;;645    		{
;;;646    			mtCOVERAGE_TEST_MARKER();
;;;647    		}
;;;648    
;;;649    		/* Ensure interrupts don't access the task lists while they are being
;;;650    		updated. */
;;;651    		taskENTER_CRITICAL();
;;;652    		{
;;;653    			uxCurrentNumberOfTasks++;
;;;654    			if( pxCurrentTCB == NULL )
;;;655    			{
;;;656    				/* There are no other tasks, or all the other tasks are in
;;;657    				the suspended state - make this the current task. */
;;;658    				pxCurrentTCB =  pxNewTCB;
;;;659    
;;;660    				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
;;;661    				{
;;;662    					/* This is the first task to be created so do the preliminary
;;;663    					initialisation required.  We will not recover if this call
;;;664    					fails, but we will report the failure. */
;;;665    					prvInitialiseTaskLists();
;;;666    				}
;;;667    				else
;;;668    				{
;;;669    					mtCOVERAGE_TEST_MARKER();
;;;670    				}
;;;671    			}
;;;672    			else
;;;673    			{
;;;674    				/* If the scheduler is not already running, make this task the
;;;675    				current task if it is the highest priority task to be created
;;;676    				so far. */
;;;677    				if( xSchedulerRunning == pdFALSE )
;;;678    				{
;;;679    					if( pxCurrentTCB->uxPriority <= uxPriority )
;;;680    					{
;;;681    						pxCurrentTCB = pxNewTCB;
;;;682    					}
;;;683    					else
;;;684    					{
;;;685    						mtCOVERAGE_TEST_MARKER();
;;;686    					}
;;;687    				}
;;;688    				else
;;;689    				{
;;;690    					mtCOVERAGE_TEST_MARKER();
;;;691    				}
;;;692    			}
;;;693    
;;;694    			uxTaskNumber++;
;;;695    
;;;696    			#if ( configUSE_TRACE_FACILITY == 1 )
;;;697    			{
;;;698    				/* Add a counter into the TCB for tracing only. */
;;;699    				pxNewTCB->uxTCBNumber = uxTaskNumber;
;;;700    			}
;;;701    			#endif /* configUSE_TRACE_FACILITY */
;;;702    			traceTASK_CREATE( pxNewTCB );
;;;703    
;;;704    			prvAddTaskToReadyList( pxNewTCB );
;;;705    
;;;706    			xReturn = pdPASS;
;;;707    			portSETUP_TCB( pxNewTCB );
;;;708    		}
;;;709    		taskEXIT_CRITICAL();
;;;710    	}
;;;711    	else
;;;712    	{
;;;713    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
00005c  f04f34ff          MOV      r4,#0xffffffff
000060  e085              B        |L28.366|
                  |L28.98|
000062  4641              MOV      r1,r8                 ;621
000064  4635              MOV      r5,r6                 ;621
000066  2000              MOVS     r0,#0                 ;621
                  |L28.104|
000068  1822              ADDS     r2,r4,r0              ;621
00006a  5c0b              LDRB     r3,[r1,r0]            ;621
00006c  f8823034          STRB     r3,[r2,#0x34]         ;621
000070  5c0a              LDRB     r2,[r1,r0]            ;621
000072  b112              CBZ      r2,|L28.122|
000074  1c40              ADDS     r0,r0,#1              ;621
000076  2810              CMP      r0,#0x10              ;621
000078  d3f6              BCC      |L28.104|
                  |L28.122|
00007a  2000              MOVS     r0,#0                 ;621
00007c  f8840043          STRB     r0,[r4,#0x43]         ;621
000080  2d07              CMP      r5,#7                 ;621
000082  d300              BCC      |L28.134|
000084  2506              MOVS     r5,#6                 ;621
                  |L28.134|
000086  4680              MOV      r8,r0                 ;621
000088  62e5              STR      r5,[r4,#0x2c]         ;621
00008a  e9c45811          STRD     r5,r8,[r4,#0x44]      ;621
00008e  1d20              ADDS     r0,r4,#4              ;621
000090  f7fffffe          BL       vListInitialiseItem
000094  f1040018          ADD      r0,r4,#0x18           ;621
000098  f7fffffe          BL       vListInitialiseItem
00009c  6124              STR      r4,[r4,#0x10]         ;621
00009e  f1c50107          RSB      r1,r5,#7              ;621
0000a2  6264              STR      r4,[r4,#0x24]         ;621
0000a4  61a1              STR      r1,[r4,#0x18]         ;621
0000a6  f8c4804c          STR      r8,[r4,#0x4c]         ;621
0000aa  f8848050          STRB     r8,[r4,#0x50]         ;621
0000ae  465a              MOV      r2,r11                ;633
0000b0  4651              MOV      r1,r10                ;633
0000b2  4638              MOV      r0,r7                 ;633
0000b4  f7fffffe          BL       pxPortInitialiseStack
0000b8  6020              STR      r0,[r4,#0]            ;637
0000ba  f1b90f00          CMP      r9,#0                 ;637
0000be  d001              BEQ      |L28.196|
0000c0  f8c94000          STR      r4,[r9,#0]            ;642
                  |L28.196|
0000c4  f7fffffe          BL       vPortEnterCritical
0000c8  4d2a              LDR      r5,|L28.372|
0000ca  68a8              LDR      r0,[r5,#8]            ;653  ; uxCurrentNumberOfTasks
0000cc  1c40              ADDS     r0,r0,#1              ;653
0000ce  60a8              STR      r0,[r5,#8]            ;653  ; uxCurrentNumberOfTasks
0000d0  6828              LDR      r0,[r5,#0]            ;654  ; pxCurrentTCB
0000d2  f8df80a4          LDR      r8,|L28.376|
0000d6  b110              CBZ      r0,|L28.222|
0000d8  6968              LDR      r0,[r5,#0x14]         ;677  ; xSchedulerRunning
0000da  b340              CBZ      r0,|L28.302|
0000dc  e02c              B        |L28.312|
                  |L28.222|
0000de  602c              STR      r4,[r5,#0]            ;658  ; pxCurrentTCB
0000e0  68a8              LDR      r0,[r5,#8]            ;660  ; uxCurrentNumberOfTasks
0000e2  2801              CMP      r0,#1                 ;660
0000e4  d128              BNE      |L28.312|
0000e6  2700              MOVS     r7,#0                 ;660
                  |L28.232|
0000e8  eb070187          ADD      r1,r7,r7,LSL #2       ;660
0000ec  eb080081          ADD      r0,r8,r1,LSL #2       ;660
0000f0  f7fffffe          BL       vListInitialise
0000f4  1c7f              ADDS     r7,r7,#1              ;660
0000f6  2f07              CMP      r7,#7                 ;660
0000f8  d3f6              BCC      |L28.232|
0000fa  481f              LDR      r0,|L28.376|
0000fc  308c              ADDS     r0,r0,#0x8c           ;660
0000fe  f7fffffe          BL       vListInitialise
000102  481d              LDR      r0,|L28.376|
000104  30a0              ADDS     r0,r0,#0xa0           ;660
000106  f7fffffe          BL       vListInitialise
00010a  481b              LDR      r0,|L28.376|
00010c  30b4              ADDS     r0,r0,#0xb4           ;660
00010e  f7fffffe          BL       vListInitialise
000112  4819              LDR      r0,|L28.376|
000114  30c8              ADDS     r0,r0,#0xc8           ;660
000116  f7fffffe          BL       vListInitialise
00011a  4817              LDR      r0,|L28.376|
00011c  30dc              ADDS     r0,r0,#0xdc           ;660
00011e  f7fffffe          BL       vListInitialise
000122  4815              LDR      r0,|L28.376|
000124  308c              ADDS     r0,r0,#0x8c           ;660
000126  6328              STR      r0,[r5,#0x30]         ;660  ; pxDelayedTaskList
000128  3014              ADDS     r0,r0,#0x14           ;660
00012a  6368              STR      r0,[r5,#0x34]         ;660  ; pxOverflowDelayedTaskList
00012c  e004              B        |L28.312|
                  |L28.302|
00012e  6828              LDR      r0,[r5,#0]            ;679  ; pxCurrentTCB
000130  6ac0              LDR      r0,[r0,#0x2c]         ;679
000132  42b0              CMP      r0,r6                 ;679
000134  d800              BHI      |L28.312|
000136  602c              STR      r4,[r5,#0]            ;681  ; pxCurrentTCB
                  |L28.312|
000138  6a68              LDR      r0,[r5,#0x24]         ;694  ; uxTaskNumber
00013a  1c40              ADDS     r0,r0,#1              ;694
00013c  6268              STR      r0,[r5,#0x24]         ;704  ; uxTaskNumber
00013e  6ae1              LDR      r1,[r4,#0x2c]         ;704
000140  2001              MOVS     r0,#1                 ;704
000142  692a              LDR      r2,[r5,#0x10]         ;704  ; uxTopReadyPriority
000144  4088              LSLS     r0,r0,r1              ;704
000146  4310              ORRS     r0,r0,r2              ;704
000148  6128              STR      r0,[r5,#0x10]         ;704  ; uxTopReadyPriority
00014a  eb010181          ADD      r1,r1,r1,LSL #2       ;704
00014e  eb080081          ADD      r0,r8,r1,LSL #2       ;704
000152  1d21              ADDS     r1,r4,#4              ;704
000154  f7fffffe          BL       vListInsertEnd
000158  2401              MOVS     r4,#1                 ;706
00015a  f7fffffe          BL       vPortExitCritical
;;;714    		traceTASK_CREATE_FAILED();
;;;715    	}
;;;716    
;;;717    	if( xReturn == pdPASS )
;;;718    	{
;;;719    		if( xSchedulerRunning != pdFALSE )
00015e  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000160  b128              CBZ      r0,|L28.366|
;;;720    		{
;;;721    			/* If the created task is of a higher priority than the current task
;;;722    			then it should run now. */
;;;723    			if( pxCurrentTCB->uxPriority < uxPriority )
000162  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000164  6ac0              LDR      r0,[r0,#0x2c]
000166  42b0              CMP      r0,r6
000168  d201              BCS      |L28.366|
;;;724    			{
;;;725    				taskYIELD_IF_USING_PREEMPTION();
00016a  f7fffffe          BL       vPortYield
                  |L28.366|
;;;726    			}
;;;727    			else
;;;728    			{
;;;729    				mtCOVERAGE_TEST_MARKER();
;;;730    			}
;;;731    		}
;;;732    		else
;;;733    		{
;;;734    			mtCOVERAGE_TEST_MARKER();
;;;735    		}
;;;736    	}
;;;737    
;;;738    	return xReturn;
00016e  4620              MOV      r0,r4
;;;739    }
000170  e8bd9ff0          POP      {r4-r12,pc}
;;;740    /*-----------------------------------------------------------*/
                          ENDP

                  |L28.372|
                          DCD      ||.data||
                  |L28.376|
                          DCD      ||.bss||

                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4138   
;;;4139   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4140   	{
000004  461f              MOV      r7,r3
000006  4690              MOV      r8,r2
000008  460d              MOV      r5,r1
;;;4141   	TCB_t * pxTCB;
;;;4142   	eNotifyValue eOriginalNotifyState;
;;;4143   	BaseType_t xReturn = pdPASS;
00000a  2601              MOVS     r6,#1
00000c  b190              CBZ      r0,|L29.52|
;;;4144   
;;;4145   		configASSERT( xTaskToNotify );
;;;4146   		pxTCB = ( TCB_t * ) xTaskToNotify;
00000e  4604              MOV      r4,r0
;;;4147   
;;;4148   		taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;4149   		{
;;;4150   			if( pulPreviousNotificationValue != NULL )
000014  b10f              CBZ      r7,|L29.26|
;;;4151   			{
;;;4152   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000016  6ce0              LDR      r0,[r4,#0x4c]
000018  6038              STR      r0,[r7,#0]
                  |L29.26|
;;;4153   			}
;;;4154   
;;;4155   			eOriginalNotifyState = pxTCB->eNotifyState;
00001a  f8940050          LDRB     r0,[r4,#0x50]
;;;4156   
;;;4157   			pxTCB->eNotifyState = eNotified;
00001e  2102              MOVS     r1,#2
000020  f8841050          STRB     r1,[r4,#0x50]
;;;4158   
;;;4159   			switch( eAction )
000024  f1b80f05          CMP      r8,#5
000028  d211              BCS      |L29.78|
00002a  e8dff008          TBB      [pc,r8]
00002e  1006              DCB      0x10,0x06
000030  090f0d00          DCB      0x09,0x0f,0x0d,0x00
                  |L29.52|
000034  f7fffffe          BL       ulPortSetInterruptMask
                  |L29.56|
000038  e7fe              B        |L29.56|
;;;4160   			{
;;;4161   				case eSetBits	:
;;;4162   					pxTCB->ulNotifiedValue |= ulValue;
00003a  6ce1              LDR      r1,[r4,#0x4c]
00003c  4329              ORRS     r1,r1,r5
;;;4163   					break;
00003e  e001              B        |L29.68|
;;;4164   
;;;4165   				case eIncrement	:
;;;4166   					( pxTCB->ulNotifiedValue )++;
000040  6ce1              LDR      r1,[r4,#0x4c]
000042  1c49              ADDS     r1,r1,#1
                  |L29.68|
000044  64e1              STR      r1,[r4,#0x4c]         ;4162
000046  e002              B        |L29.78|
;;;4167   					break;
;;;4168   
;;;4169   				case eSetValueWithOverwrite	:
;;;4170   					pxTCB->ulNotifiedValue = ulValue;
;;;4171   					break;
;;;4172   
;;;4173   				case eSetValueWithoutOverwrite :
;;;4174   					if( eOriginalNotifyState != eNotified )
000048  2802              CMP      r0,#2
00004a  d003              BEQ      |L29.84|
;;;4175   					{
;;;4176   						pxTCB->ulNotifiedValue = ulValue;
00004c  64e5              STR      r5,[r4,#0x4c]
                  |L29.78|
;;;4177   					}
;;;4178   					else
;;;4179   					{
;;;4180   						/* The value could not be written to the task. */
;;;4181   						xReturn = pdFAIL;
;;;4182   					}
;;;4183   					break;
;;;4184   
;;;4185   				case eNoAction:
;;;4186   					/* The task is being notified without its notify value being
;;;4187   					updated. */
;;;4188   					break;
;;;4189   			}
;;;4190   
;;;4191   			traceTASK_NOTIFY();
;;;4192   
;;;4193   			/* If the task is in the blocked state specifically to wait for a
;;;4194   			notification then unblock it now. */
;;;4195   			if( eOriginalNotifyState == eWaitingNotification )
00004e  2801              CMP      r0,#1
000050  d002              BEQ      |L29.88|
000052  e01f              B        |L29.148|
                  |L29.84|
000054  2600              MOVS     r6,#0                 ;4181
000056  e01d              B        |L29.148|
                  |L29.88|
;;;4196   			{
;;;4197   				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000058  1d20              ADDS     r0,r4,#4
00005a  f7fffffe          BL       uxListRemove
;;;4198   				prvAddTaskToReadyList( pxTCB );
00005e  4d10              LDR      r5,|L29.160|
000060  6ae0              LDR      r0,[r4,#0x2c]
000062  2101              MOVS     r1,#1
000064  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000066  4081              LSLS     r1,r1,r0
000068  4311              ORRS     r1,r1,r2
00006a  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00006c  490d              LDR      r1,|L29.164|
00006e  eb000080          ADD      r0,r0,r0,LSL #2
000072  eb010080          ADD      r0,r1,r0,LSL #2
000076  1d21              ADDS     r1,r4,#4
000078  f7fffffe          BL       vListInsertEnd
;;;4199   
;;;4200   				/* The task should not have been on an event list. */
;;;4201   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
00007c  6aa0              LDR      r0,[r4,#0x28]
00007e  b110              CBZ      r0,|L29.134|
000080  f7fffffe          BL       ulPortSetInterruptMask
                  |L29.132|
000084  e7fe              B        |L29.132|
                  |L29.134|
;;;4202   
;;;4203   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4204   				{
;;;4205   					/* If a task is blocked waiting for a notification then
;;;4206   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4207   					out time.  If the task is unblocked for a reason other than
;;;4208   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4209   					because it will automatically get reset to a new value when
;;;4210   					the tick count equals xNextTaskUnblockTime.  However if
;;;4211   					tickless idling is used it might be more important to enter
;;;4212   					sleep mode at the earliest possible time - so reset
;;;4213   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4214   					earliest possible time. */
;;;4215   					prvResetNextTaskUnblockTime();
;;;4216   				}
;;;4217   				#endif
;;;4218   
;;;4219   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000086  6ae0              LDR      r0,[r4,#0x2c]
000088  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00008a  6ac9              LDR      r1,[r1,#0x2c]
00008c  4288              CMP      r0,r1
00008e  d901              BLS      |L29.148|
;;;4220   				{
;;;4221   					/* The notified task has a priority above the currently
;;;4222   					executing task so a yield is required. */
;;;4223   					taskYIELD_IF_USING_PREEMPTION();
000090  f7fffffe          BL       vPortYield
                  |L29.148|
;;;4224   				}
;;;4225   				else
;;;4226   				{
;;;4227   					mtCOVERAGE_TEST_MARKER();
;;;4228   				}
;;;4229   			}
;;;4230   			else
;;;4231   			{
;;;4232   				mtCOVERAGE_TEST_MARKER();
;;;4233   			}
;;;4234   		}
;;;4235   		taskEXIT_CRITICAL();
000094  f7fffffe          BL       vPortExitCritical
;;;4236   
;;;4237   		return xReturn;
000098  4630              MOV      r0,r6
;;;4238   	}
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;4239   
                          ENDP

00009e  0000              DCW      0x0000
                  |L29.160|
                          DCD      ||.data||
                  |L29.164|
                          DCD      ||.bss||

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4244   
;;;4245   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4246   	{
000004  461f              MOV      r7,r3
000006  f8dd8020          LDR      r8,[sp,#0x20]
00000a  4691              MOV      r9,r2
00000c  460d              MOV      r5,r1
00000e  0004              MOVS     r4,r0
;;;4247   	TCB_t * pxTCB;
;;;4248   	eNotifyValue eOriginalNotifyState;
;;;4249   	BaseType_t xReturn = pdPASS;
000010  f04f0601          MOV      r6,#1
000014  d014              BEQ      |L30.64|
;;;4250   	UBaseType_t uxSavedInterruptStatus;
;;;4251   
;;;4252   		configASSERT( xTaskToNotify );
;;;4253   
;;;4254   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4255   		maximum	system call (or maximum API call) interrupt priority.
;;;4256   		Interrupts that are	above the maximum system call priority are keep
;;;4257   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4258   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4259   		is defined in FreeRTOSConfig.h then
;;;4260   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4261   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4262   		been assigned a priority above the configured maximum system call
;;;4263   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4264   		from interrupts	that have been assigned a priority at or (logically)
;;;4265   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4266   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4267   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4268   		provided on the following link:
;;;4269   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4270   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000016  f7fffffe          BL       vPortValidateInterruptPriority
;;;4271   
;;;4272   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4273   
;;;4274   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00001a  f7fffffe          BL       ulPortSetInterruptMask
00001e  4682              MOV      r10,r0
;;;4275   		{
;;;4276   			if( pulPreviousNotificationValue != NULL )
000020  b10f              CBZ      r7,|L30.38|
;;;4277   			{
;;;4278   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000022  6ce0              LDR      r0,[r4,#0x4c]
000024  6038              STR      r0,[r7,#0]
                  |L30.38|
;;;4279   			}
;;;4280   
;;;4281   			eOriginalNotifyState = pxTCB->eNotifyState;
000026  f8940050          LDRB     r0,[r4,#0x50]
;;;4282   			pxTCB->eNotifyState = eNotified;
00002a  2102              MOVS     r1,#2
00002c  f8841050          STRB     r1,[r4,#0x50]
;;;4283   
;;;4284   			switch( eAction )
000030  f1b90f05          CMP      r9,#5
000034  d211              BCS      |L30.90|
000036  e8dff009          TBB      [pc,r9]
00003a  1006              DCB      0x10,0x06
00003c  090f0d00          DCB      0x09,0x0f,0x0d,0x00
                  |L30.64|
000040  f7fffffe          BL       ulPortSetInterruptMask
                  |L30.68|
000044  e7fe              B        |L30.68|
;;;4285   			{
;;;4286   				case eSetBits	:
;;;4287   					pxTCB->ulNotifiedValue |= ulValue;
000046  6ce1              LDR      r1,[r4,#0x4c]
000048  4329              ORRS     r1,r1,r5
;;;4288   					break;
00004a  e001              B        |L30.80|
;;;4289   
;;;4290   				case eIncrement	:
;;;4291   					( pxTCB->ulNotifiedValue )++;
00004c  6ce1              LDR      r1,[r4,#0x4c]
00004e  1c49              ADDS     r1,r1,#1
                  |L30.80|
000050  64e1              STR      r1,[r4,#0x4c]         ;4287
000052  e002              B        |L30.90|
;;;4292   					break;
;;;4293   
;;;4294   				case eSetValueWithOverwrite	:
;;;4295   					pxTCB->ulNotifiedValue = ulValue;
;;;4296   					break;
;;;4297   
;;;4298   				case eSetValueWithoutOverwrite :
;;;4299   					if( eOriginalNotifyState != eNotified )
000054  2802              CMP      r0,#2
000056  d003              BEQ      |L30.96|
;;;4300   					{
;;;4301   						pxTCB->ulNotifiedValue = ulValue;
000058  64e5              STR      r5,[r4,#0x4c]
                  |L30.90|
;;;4302   					}
;;;4303   					else
;;;4304   					{
;;;4305   						/* The value could not be written to the task. */
;;;4306   						xReturn = pdFAIL;
;;;4307   					}
;;;4308   					break;
;;;4309   
;;;4310   				case eNoAction :
;;;4311   					/* The task is being notified without its notify value being
;;;4312   					updated. */
;;;4313   					break;
;;;4314   			}
;;;4315   
;;;4316   			traceTASK_NOTIFY_FROM_ISR();
;;;4317   
;;;4318   			/* If the task is in the blocked state specifically to wait for a
;;;4319   			notification then unblock it now. */
;;;4320   			if( eOriginalNotifyState == eWaitingNotification )
00005a  2801              CMP      r0,#1
00005c  d002              BEQ      |L30.100|
00005e  e019              B        |L30.148|
                  |L30.96|
000060  2600              MOVS     r6,#0                 ;4306
000062  e017              B        |L30.148|
                  |L30.100|
;;;4321   			{
;;;4322   				/* The task should not have been on an event list. */
;;;4323   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000064  6aa0              LDR      r0,[r4,#0x28]
000066  b110              CBZ      r0,|L30.110|
000068  f7fffffe          BL       ulPortSetInterruptMask
                  |L30.108|
00006c  e7fe              B        |L30.108|
                  |L30.110|
;;;4324   
;;;4325   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00006e  4d15              LDR      r5,|L30.196|
000070  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
000072  2701              MOVS     r7,#1                 ;4249
000074  b1a0              CBZ      r0,|L30.160|
;;;4326   				{
;;;4327   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;4328   					prvAddTaskToReadyList( pxTCB );
;;;4329   				}
;;;4330   				else
;;;4331   				{
;;;4332   					/* The delayed and ready lists cannot be accessed, so hold
;;;4333   					this task pending until the scheduler is resumed. */
;;;4334   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000076  f1040118          ADD      r1,r4,#0x18
00007a  4813              LDR      r0,|L30.200|
                  |L30.124|
00007c  f7fffffe          BL       vListInsertEnd
;;;4335   				}
;;;4336   
;;;4337   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000080  6ae0              LDR      r0,[r4,#0x2c]
000082  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000084  6ac9              LDR      r1,[r1,#0x2c]
000086  4288              CMP      r0,r1
000088  d904              BLS      |L30.148|
;;;4338   				{
;;;4339   					/* The notified task has a priority above the currently
;;;4340   					executing task so a yield is required. */
;;;4341   					if( pxHigherPriorityTaskWoken != NULL )
00008a  f1b80f00          CMP      r8,#0
00008e  d001              BEQ      |L30.148|
;;;4342   					{
;;;4343   						*pxHigherPriorityTaskWoken = pdTRUE;
000090  f8c87000          STR      r7,[r8,#0]
                  |L30.148|
;;;4344   					}
;;;4345   				}
;;;4346   				else
;;;4347   				{
;;;4348   					mtCOVERAGE_TEST_MARKER();
;;;4349   				}
;;;4350   			}
;;;4351   		}
;;;4352   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000094  4650              MOV      r0,r10
000096  f7fffffe          BL       vPortClearInterruptMask
;;;4353   
;;;4354   		return xReturn;
00009a  4630              MOV      r0,r6
;;;4355   	}
00009c  e8bd87f0          POP      {r4-r10,pc}
                  |L30.160|
0000a0  1d20              ADDS     r0,r4,#4              ;4327
0000a2  f7fffffe          BL       uxListRemove
0000a6  6ae1              LDR      r1,[r4,#0x2c]         ;4328
0000a8  692a              LDR      r2,[r5,#0x10]         ;4328  ; uxTopReadyPriority
0000aa  fa07f001          LSL      r0,r7,r1              ;4328
0000ae  4310              ORRS     r0,r0,r2              ;4328
0000b0  6128              STR      r0,[r5,#0x10]         ;4328  ; uxTopReadyPriority
0000b2  eb010081          ADD      r0,r1,r1,LSL #2       ;4328
0000b6  4904              LDR      r1,|L30.200|
0000b8  39b4              SUBS     r1,r1,#0xb4           ;4328
0000ba  eb010080          ADD      r0,r1,r0,LSL #2       ;4328
0000be  1d21              ADDS     r1,r4,#4              ;4328
0000c0  e7dc              B        |L30.124|
;;;4356   
                          ENDP

0000c2  0000              DCW      0x0000
                  |L30.196|
                          DCD      ||.data||
                  |L30.200|
                          DCD      ||.bss||+0xb4

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3372   
;;;3373   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  4801              LDR      r0,|L31.8|
;;;3374   	{
;;;3375   	TaskHandle_t xReturn;
;;;3376   
;;;3377   		/* A critical section is not required as this is not called from
;;;3378   		an interrupt and the current TCB will always be the same for any
;;;3379   		individual execution thread. */
;;;3380   		xReturn = pxCurrentTCB;
000002  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;3381   
;;;3382   		return xReturn;
;;;3383   	}
000004  4770              BX       lr
;;;3384   
                          ENDP

000006  0000              DCW      0x0000
                  |L31.8|
                          DCD      ||.data||

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3389   
;;;3390   	BaseType_t xTaskGetSchedulerState( void )
000000  4805              LDR      r0,|L32.24|
;;;3391   	{
;;;3392   	BaseType_t xReturn;
;;;3393   
;;;3394   		if( xSchedulerRunning == pdFALSE )
000002  6941              LDR      r1,[r0,#0x14]  ; xSchedulerRunning
000004  b119              CBZ      r1,|L32.14|
;;;3395   		{
;;;3396   			xReturn = taskSCHEDULER_NOT_STARTED;
;;;3397   		}
;;;3398   		else
;;;3399   		{
;;;3400   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000006  6ac0              LDR      r0,[r0,#0x2c]  ; uxSchedulerSuspended
000008  b118              CBZ      r0,|L32.18|
;;;3401   			{
;;;3402   				xReturn = taskSCHEDULER_RUNNING;
;;;3403   			}
;;;3404   			else
;;;3405   			{
;;;3406   				xReturn = taskSCHEDULER_SUSPENDED;
00000a  2000              MOVS     r0,#0
;;;3407   			}
;;;3408   		}
;;;3409   
;;;3410   		return xReturn;
;;;3411   	}
00000c  4770              BX       lr
                  |L32.14|
00000e  2001              MOVS     r0,#1                 ;3396
000010  4770              BX       lr
                  |L32.18|
000012  2002              MOVS     r0,#2                 ;3402
000014  4770              BX       lr
;;;3412   
                          ENDP

000016  0000              DCW      0x0000
                  |L32.24|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;1763   
;;;1764   TickType_t xTaskGetTickCount( void )
000000  4801              LDR      r0,|L33.8|
;;;1765   {
;;;1766   TickType_t xTicks;
;;;1767   
;;;1768   	/* Critical section required if running on a 16 bit processor. */
;;;1769   	portTICK_TYPE_ENTER_CRITICAL();
;;;1770   	{
;;;1771   		xTicks = xTickCount;
000002  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;1772   	}
;;;1773   	portTICK_TYPE_EXIT_CRITICAL();
;;;1774   
;;;1775   	return xTicks;
;;;1776   }
000004  4770              BX       lr
;;;1777   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L33.8|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;1778   
;;;1779   TickType_t xTaskGetTickCountFromISR( void )
000000  b510              PUSH     {r4,lr}
;;;1780   {
;;;1781   TickType_t xReturn;
;;;1782   UBaseType_t uxSavedInterruptStatus;
;;;1783   
;;;1784   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1785   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1786   	above the maximum system call priority are kept permanently enabled, even
;;;1787   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1788   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1789   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1790   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1791   	assigned a priority above the configured maximum system call priority.
;;;1792   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1793   	that have been assigned a priority at or (logically) below the maximum
;;;1794   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1795   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1796   	More information (albeit Cortex-M specific) is provided on the following
;;;1797   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1798   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000002  f7fffffe          BL       vPortValidateInterruptPriority
;;;1799   
;;;1800   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
;;;1801   	{
;;;1802   		xReturn = xTickCount;
000006  4801              LDR      r0,|L34.12|
000008  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;1803   	}
;;;1804   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1805   
;;;1806   	return xReturn;
;;;1807   }
00000a  bd10              POP      {r4,pc}
;;;1808   /*-----------------------------------------------------------*/
                          ENDP

                  |L34.12|
                          DCD      ||.data||

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;1938   
;;;1939   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1940   {
;;;1941   TCB_t * pxTCB;
;;;1942   TickType_t xItemValue;
;;;1943   BaseType_t xSwitchRequired = pdFALSE;
;;;1944   
;;;1945   	/* Called by the portable layer each time a tick interrupt occurs.
;;;1946   	Increments the tick then checks to see if the new tick value will cause any
;;;1947   	tasks to be unblocked. */
;;;1948   	traceTASK_INCREMENT_TICK( xTickCount );
;;;1949   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000004  4c2c              LDR      r4,|L35.184|
000006  2600              MOVS     r6,#0                 ;1943
000008  6ae0              LDR      r0,[r4,#0x2c]  ; uxSchedulerSuspended
00000a  b140              CBZ      r0,|L35.30|
;;;1950   	{
;;;1951   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;1952   		delayed lists if it wraps to 0. */
;;;1953   		++xTickCount;
;;;1954   
;;;1955   		{
;;;1956   			/* Minor optimisation.  The tick count cannot change in this
;;;1957   			block. */
;;;1958   			const TickType_t xConstTickCount = xTickCount;
;;;1959   
;;;1960   			if( xConstTickCount == ( TickType_t ) 0U )
;;;1961   			{
;;;1962   				taskSWITCH_DELAYED_LISTS();
;;;1963   			}
;;;1964   			else
;;;1965   			{
;;;1966   				mtCOVERAGE_TEST_MARKER();
;;;1967   			}
;;;1968   
;;;1969   			/* See if this tick has made a timeout expire.  Tasks are stored in
;;;1970   			the	queue in the order of their wake time - meaning once one task
;;;1971   			has been found whose block time has not expired there is no need to
;;;1972   			look any further down the list. */
;;;1973   			if( xConstTickCount >= xNextTaskUnblockTime )
;;;1974   			{
;;;1975   				for( ;; )
;;;1976   				{
;;;1977   					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
;;;1978   					{
;;;1979   						/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;1980   						to the maximum possible value so it is extremely
;;;1981   						unlikely that the
;;;1982   						if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;1983   						next time through. */
;;;1984   						xNextTaskUnblockTime = portMAX_DELAY;
;;;1985   						break;
;;;1986   					}
;;;1987   					else
;;;1988   					{
;;;1989   						/* The delayed list is not empty, get the value of the
;;;1990   						item at the head of the delayed list.  This is the time
;;;1991   						at which the task at the head of the delayed list must
;;;1992   						be removed from the Blocked state. */
;;;1993   						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
;;;1994   						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
;;;1995   
;;;1996   						if( xConstTickCount < xItemValue )
;;;1997   						{
;;;1998   							/* It is not time to unblock this item yet, but the
;;;1999   							item value is the time at which the task at the head
;;;2000   							of the blocked list must be removed from the Blocked
;;;2001   							state -	so record the item value in
;;;2002   							xNextTaskUnblockTime. */
;;;2003   							xNextTaskUnblockTime = xItemValue;
;;;2004   							break;
;;;2005   						}
;;;2006   						else
;;;2007   						{
;;;2008   							mtCOVERAGE_TEST_MARKER();
;;;2009   						}
;;;2010   
;;;2011   						/* It is time to remove the item from the Blocked state. */
;;;2012   						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;2013   
;;;2014   						/* Is the task waiting on an event also?  If so remove
;;;2015   						it from the event list. */
;;;2016   						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
;;;2017   						{
;;;2018   							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2019   						}
;;;2020   						else
;;;2021   						{
;;;2022   							mtCOVERAGE_TEST_MARKER();
;;;2023   						}
;;;2024   
;;;2025   						/* Place the unblocked task into the appropriate ready
;;;2026   						list. */
;;;2027   						prvAddTaskToReadyList( pxTCB );
;;;2028   
;;;2029   						/* A task being unblocked cannot cause an immediate
;;;2030   						context switch if preemption is turned off. */
;;;2031   						#if (  configUSE_PREEMPTION == 1 )
;;;2032   						{
;;;2033   							/* Preemption is on, but a context switch should
;;;2034   							only be performed if the unblocked task has a
;;;2035   							priority that is equal to or higher than the
;;;2036   							currently executing task. */
;;;2037   							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;2038   							{
;;;2039   								xSwitchRequired = pdTRUE;
;;;2040   							}
;;;2041   							else
;;;2042   							{
;;;2043   								mtCOVERAGE_TEST_MARKER();
;;;2044   							}
;;;2045   						}
;;;2046   						#endif /* configUSE_PREEMPTION */
;;;2047   					}
;;;2048   				}
;;;2049   			}
;;;2050   		}
;;;2051   
;;;2052   		/* Tasks of equal priority to the currently running task will share
;;;2053   		processing time (time slice) if preemption is on, and the application
;;;2054   		writer has not explicitly turned time slicing off. */
;;;2055   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2056   		{
;;;2057   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
;;;2058   			{
;;;2059   				xSwitchRequired = pdTRUE;
;;;2060   			}
;;;2061   			else
;;;2062   			{
;;;2063   				mtCOVERAGE_TEST_MARKER();
;;;2064   			}
;;;2065   		}
;;;2066   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2067   
;;;2068   		#if ( configUSE_TICK_HOOK == 1 )
;;;2069   		{
;;;2070   			/* Guard against the tick hook being called when the pended tick
;;;2071   			count is being unwound (when the scheduler is being unlocked). */
;;;2072   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2073   			{
;;;2074   				vApplicationTickHook();
;;;2075   			}
;;;2076   			else
;;;2077   			{
;;;2078   				mtCOVERAGE_TEST_MARKER();
;;;2079   			}
;;;2080   		}
;;;2081   		#endif /* configUSE_TICK_HOOK */
;;;2082   	}
;;;2083   	else
;;;2084   	{
;;;2085   		++uxPendedTicks;
00000c  69a0              LDR      r0,[r4,#0x18]  ; uxPendedTicks
00000e  1c40              ADDS     r0,r0,#1
000010  61a0              STR      r0,[r4,#0x18]  ; uxPendedTicks
                  |L35.18|
;;;2086   
;;;2087   		/* The tick hook gets called at regular intervals, even if the
;;;2088   		scheduler is locked. */
;;;2089   		#if ( configUSE_TICK_HOOK == 1 )
;;;2090   		{
;;;2091   			vApplicationTickHook();
;;;2092   		}
;;;2093   		#endif
;;;2094   	}
;;;2095   
;;;2096   	#if ( configUSE_PREEMPTION == 1 )
;;;2097   	{
;;;2098   		if( xYieldPending != pdFALSE )
000012  69e0              LDR      r0,[r4,#0x1c]  ; xYieldPending
000014  b100              CBZ      r0,|L35.24|
;;;2099   		{
;;;2100   			xSwitchRequired = pdTRUE;
000016  2601              MOVS     r6,#1
                  |L35.24|
;;;2101   		}
;;;2102   		else
;;;2103   		{
;;;2104   			mtCOVERAGE_TEST_MARKER();
;;;2105   		}
;;;2106   	}
;;;2107   	#endif /* configUSE_PREEMPTION */
;;;2108   
;;;2109   	return xSwitchRequired;
000018  4630              MOV      r0,r6
;;;2110   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L35.30|
00001e  68e0              LDR      r0,[r4,#0xc]          ;1953  ; xTickCount
000020  1c40              ADDS     r0,r0,#1              ;1953
000022  60e0              STR      r0,[r4,#0xc]          ;1953  ; xTickCount
000024  68e7              LDR      r7,[r4,#0xc]          ;1958  ; xTickCount
000026  b977              CBNZ     r7,|L35.70|
000028  6b20              LDR      r0,[r4,#0x30]         ;1962  ; pxDelayedTaskList
00002a  6800              LDR      r0,[r0,#0]            ;1962
00002c  b110              CBZ      r0,|L35.52|
00002e  f7fffffe          BL       ulPortSetInterruptMask
                  |L35.50|
000032  e7fe              B        |L35.50|
                  |L35.52|
000034  6b20              LDR      r0,[r4,#0x30]         ;1962  ; pxDelayedTaskList
000036  6b61              LDR      r1,[r4,#0x34]         ;1962  ; pxOverflowDelayedTaskList
000038  6321              STR      r1,[r4,#0x30]         ;1962  ; pxDelayedTaskList
00003a  6360              STR      r0,[r4,#0x34]         ;1962  ; pxOverflowDelayedTaskList
00003c  6a20              LDR      r0,[r4,#0x20]         ;1962  ; xNumOfOverflows
00003e  1c40              ADDS     r0,r0,#1              ;1962
000040  6220              STR      r0,[r4,#0x20]         ;1962  ; xNumOfOverflows
000042  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L35.70|
000046  6aa0              LDR      r0,[r4,#0x28]         ;1973  ; xNextTaskUnblockTime
000048  f8df8070          LDR      r8,|L35.188|
00004c  4287              CMP      r7,r0                 ;1973
00004e  d309              BCC      |L35.100|
                  |L35.80|
000050  6b20              LDR      r0,[r4,#0x30]         ;1977  ; pxDelayedTaskList
000052  6800              LDR      r0,[r0,#0]            ;1977
000054  b180              CBZ      r0,|L35.120|
000056  6b20              LDR      r0,[r4,#0x30]         ;1993  ; pxDelayedTaskList
000058  68c0              LDR      r0,[r0,#0xc]          ;1993
00005a  68c5              LDR      r5,[r0,#0xc]          ;1994
00005c  6868              LDR      r0,[r5,#4]            ;1996
00005e  4287              CMP      r7,r0                 ;1996
000060  d20d              BCS      |L35.126|
                  |L35.98|
000062  62a0              STR      r0,[r4,#0x28]         ;2003  ; xNextTaskUnblockTime
                  |L35.100|
000064  6820              LDR      r0,[r4,#0]            ;2057  ; pxCurrentTCB
000066  6ac0              LDR      r0,[r0,#0x2c]         ;2057
000068  eb000180          ADD      r1,r0,r0,LSL #2       ;2057
00006c  f8580021          LDR      r0,[r8,r1,LSL #2]     ;2057
000070  2801              CMP      r0,#1                 ;2057
000072  d9ce              BLS      |L35.18|
000074  2601              MOVS     r6,#1                 ;2059
000076  e7cc              B        |L35.18|
                  |L35.120|
000078  f04f30ff          MOV      r0,#0xffffffff        ;1984
00007c  e7f1              B        |L35.98|
                  |L35.126|
00007e  1d28              ADDS     r0,r5,#4              ;2012
000080  f7fffffe          BL       uxListRemove
000084  6aa8              LDR      r0,[r5,#0x28]         ;2016
000086  b118              CBZ      r0,|L35.144|
000088  f1050018          ADD      r0,r5,#0x18           ;2018
00008c  f7fffffe          BL       uxListRemove
                  |L35.144|
000090  6ae9              LDR      r1,[r5,#0x2c]         ;2027
000092  2001              MOVS     r0,#1                 ;2027
000094  6922              LDR      r2,[r4,#0x10]         ;2027  ; uxTopReadyPriority
000096  4088              LSLS     r0,r0,r1              ;2027
000098  4310              ORRS     r0,r0,r2              ;2027
00009a  6120              STR      r0,[r4,#0x10]         ;2027  ; uxTopReadyPriority
00009c  eb010181          ADD      r1,r1,r1,LSL #2       ;2027
0000a0  eb080081          ADD      r0,r8,r1,LSL #2       ;2027
0000a4  1d29              ADDS     r1,r5,#4              ;2027
0000a6  f7fffffe          BL       vListInsertEnd
0000aa  6ae8              LDR      r0,[r5,#0x2c]         ;2037
0000ac  6821              LDR      r1,[r4,#0]            ;2037  ; pxCurrentTCB
0000ae  6ac9              LDR      r1,[r1,#0x2c]         ;2037
0000b0  4288              CMP      r0,r1                 ;2037
0000b2  d3cd              BCC      |L35.80|
0000b4  2601              MOVS     r6,#1                 ;2039
0000b6  e7cb              B        |L35.80|
;;;2111   /*-----------------------------------------------------------*/
                          ENDP

                  |L35.184|
                          DCD      ||.data||
                  |L35.188|
                          DCD      ||.bss||

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;4443   
;;;4444   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;4445   	{
;;;4446   	TCB_t *pxTCB;
;;;4447   	BaseType_t xReturn;
;;;4448   
;;;4449   		pxTCB = ( TCB_t * ) xTask;
000002  0004              MOVS     r4,r0
000004  d101              BNE      |L36.10|
;;;4450   
;;;4451   		/* If null is passed in here then it is the calling task that is having
;;;4452   		its notification state cleared. */
;;;4453   		pxTCB = prvGetTCBFromHandle( pxTCB );
000006  4809              LDR      r0,|L36.44|
000008  6804              LDR      r4,[r0,#0]  ; pxCurrentTCB
                  |L36.10|
;;;4454   
;;;4455   		taskENTER_CRITICAL();
00000a  f7fffffe          BL       vPortEnterCritical
;;;4456   		{
;;;4457   			if( pxTCB->eNotifyState == eNotified )
00000e  f8940050          LDRB     r0,[r4,#0x50]
000012  2802              CMP      r0,#2
000014  d004              BEQ      |L36.32|
;;;4458   			{
;;;4459   				pxTCB->eNotifyState = eNotWaitingNotification;
;;;4460   				xReturn = pdPASS;
;;;4461   			}
;;;4462   			else
;;;4463   			{
;;;4464   				xReturn = pdFAIL;
000016  2400              MOVS     r4,#0
                  |L36.24|
;;;4465   			}
;;;4466   		}
;;;4467   		taskEXIT_CRITICAL();
000018  f7fffffe          BL       vPortExitCritical
;;;4468   
;;;4469   		return xReturn;
00001c  4620              MOV      r0,r4
;;;4470   	}
00001e  bd10              POP      {r4,pc}
                  |L36.32|
000020  2000              MOVS     r0,#0                 ;4459
000022  f8840050          STRB     r0,[r4,#0x50]         ;4459
000026  2401              MOVS     r4,#1                 ;4460
000028  e7f6              B        |L36.24|
;;;4471   
                          ENDP

00002a  0000              DCW      0x0000
                  |L36.44|
                          DCD      ||.data||

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4013   
;;;4014   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4015   	{
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
000008  4688              MOV      r8,r1
00000a  4607              MOV      r7,r0
;;;4016   	TickType_t xTimeToWake;
;;;4017   	BaseType_t xReturn;
;;;4018   
;;;4019   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4020   		{
;;;4021   			/* Only block if a notification is not already pending. */
;;;4022   			if( pxCurrentTCB->eNotifyState != eNotified )
000010  4c23              LDR      r4,|L37.160|
000012  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000014  f8900050          LDRB     r0,[r0,#0x50]
000018  2802              CMP      r0,#2
00001a  d01d              BEQ      |L37.88|
;;;4023   			{
;;;4024   				/* Clear bits in the task's notification value as bits may get
;;;4025   				set	by the notifying task or interrupt.  This can be used to
;;;4026   				clear the value to zero. */
;;;4027   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00001e  6cc1              LDR      r1,[r0,#0x4c]
000020  43b9              BICS     r1,r1,r7
000022  64c1              STR      r1,[r0,#0x4c]
;;;4028   
;;;4029   				/* Mark this task as waiting for a notification. */
;;;4030   				pxCurrentTCB->eNotifyState = eWaitingNotification;
000024  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000026  2701              MOVS     r7,#1
000028  f8807050          STRB     r7,[r0,#0x50]
;;;4031   
;;;4032   				if( xTicksToWait > ( TickType_t ) 0 )
00002c  b1a5              CBZ      r5,|L37.88|
;;;4033   				{
;;;4034   					/* The task is going to block.  First it must be removed
;;;4035   					from the	ready list. */
;;;4036   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00002e  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000030  1d00              ADDS     r0,r0,#4
000032  f7fffffe          BL       uxListRemove
000036  b930              CBNZ     r0,|L37.70|
;;;4037   					{
;;;4038   						/* The current task must be in a ready list, so there is
;;;4039   						no need to check, and the port reset macro can be called
;;;4040   						directly. */
;;;4041   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000038  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00003a  f890002c          LDRB     r0,[r0,#0x2c]
00003e  4087              LSLS     r7,r7,r0
000040  6920              LDR      r0,[r4,#0x10]  ; uxTopReadyPriority
000042  43b8              BICS     r0,r0,r7
000044  6120              STR      r0,[r4,#0x10]  ; uxTopReadyPriority
                  |L37.70|
;;;4042   					}
;;;4043   					else
;;;4044   					{
;;;4045   						mtCOVERAGE_TEST_MARKER();
;;;4046   					}
;;;4047   
;;;4048   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;4049   					{
;;;4050   						if( xTicksToWait == portMAX_DELAY )
000046  1c68              ADDS     r0,r5,#1
000048  d022              BEQ      |L37.144|
;;;4051   						{
;;;4052   							/* Add the task to the suspended task list instead
;;;4053   							of a delayed task list to ensure the task is not
;;;4054   							woken by a timing event.  It will block
;;;4055   							indefinitely. */
;;;4056   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;4057   						}
;;;4058   						else
;;;4059   						{
;;;4060   							/* Calculate the time at which the task should be
;;;4061   							woken if no notification events occur.  This may
;;;4062   							overflow but this doesn't matter, the scheduler will
;;;4063   							handle it. */
;;;4064   							xTimeToWake = xTickCount + xTicksToWait;
00004a  68e0              LDR      r0,[r4,#0xc]  ; xTickCount
00004c  4428              ADD      r0,r0,r5
;;;4065   							prvAddCurrentTaskToDelayedList( xTimeToWake );
00004e  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4066   						}
;;;4067   					}
;;;4068   					#else /* INCLUDE_vTaskSuspend */
;;;4069   					{
;;;4070   							/* Calculate the time at which the task should be
;;;4071   							woken if the event does not occur.  This may
;;;4072   							overflow but this doesn't matter, the scheduler will
;;;4073   							handle it. */
;;;4074   							xTimeToWake = xTickCount + xTicksToWait;
;;;4075   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;4076   					}
;;;4077   					#endif /* INCLUDE_vTaskSuspend */
;;;4078   
;;;4079   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4080   
;;;4081   					/* All ports are written to allow a yield in a critical
;;;4082   					section (some will yield immediately, others wait until the
;;;4083   					critical section exits) - but it is not something that
;;;4084   					application code should ever do. */
;;;4085   					portYIELD_WITHIN_API();
000052  bf00              NOP      
                  |L37.84|
000054  f7fffffe          BL       vPortYield
                  |L37.88|
;;;4086   				}
;;;4087   				else
;;;4088   				{
;;;4089   					mtCOVERAGE_TEST_MARKER();
;;;4090   				}
;;;4091   			}
;;;4092   			else
;;;4093   			{
;;;4094   				mtCOVERAGE_TEST_MARKER();
;;;4095   			}
;;;4096   		}
;;;4097   		taskEXIT_CRITICAL();
000058  f7fffffe          BL       vPortExitCritical
;;;4098   
;;;4099   		taskENTER_CRITICAL();
00005c  f7fffffe          BL       vPortEnterCritical
;;;4100   		{
;;;4101   			traceTASK_NOTIFY_WAIT();
;;;4102   
;;;4103   			if( pulNotificationValue != NULL )
000060  b116              CBZ      r6,|L37.104|
;;;4104   			{
;;;4105   				/* Output the current notification value, which may or may not
;;;4106   				have changed. */
;;;4107   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000062  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000064  6cc0              LDR      r0,[r0,#0x4c]
000066  6030              STR      r0,[r6,#0]
                  |L37.104|
;;;4108   			}
;;;4109   
;;;4110   			/* If eNotifyValue is set then either the task never entered the
;;;4111   			blocked state (because a notification was already pending) or the
;;;4112   			task unblocked because of a notification.  Otherwise the task
;;;4113   			unblocked because of a timeout. */
;;;4114   			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
000068  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00006a  f8900050          LDRB     r0,[r0,#0x50]
00006e  2801              CMP      r0,#1
000070  d014              BEQ      |L37.156|
;;;4115   			{
;;;4116   				/* A notification was not received. */
;;;4117   				xReturn = pdFALSE;
;;;4118   			}
;;;4119   			else
;;;4120   			{
;;;4121   				/* A notification was already pending or a notification was
;;;4122   				received while the task was waiting. */
;;;4123   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
000072  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000074  6cc1              LDR      r1,[r0,#0x4c]
000076  ea210108          BIC      r1,r1,r8
00007a  64c1              STR      r1,[r0,#0x4c]
;;;4124   				xReturn = pdTRUE;
00007c  2501              MOVS     r5,#1
                  |L37.126|
;;;4125   			}
;;;4126   
;;;4127   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
00007e  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
000080  2000              MOVS     r0,#0
000082  f8810050          STRB     r0,[r1,#0x50]
;;;4128   		}
;;;4129   		taskEXIT_CRITICAL();
000086  f7fffffe          BL       vPortExitCritical
;;;4130   
;;;4131   		return xReturn;
00008a  4628              MOV      r0,r5
;;;4132   	}
00008c  e8bd81f0          POP      {r4-r8,pc}
                  |L37.144|
000090  6821              LDR      r1,[r4,#0]            ;4056  ; pxCurrentTCB
000092  4804              LDR      r0,|L37.164|
000094  1d09              ADDS     r1,r1,#4              ;4056
000096  f7fffffe          BL       vListInsertEnd
00009a  e7db              B        |L37.84|
                  |L37.156|
00009c  2500              MOVS     r5,#0                 ;4117
00009e  e7ee              B        |L37.126|
;;;4133   
                          ENDP

                  |L37.160|
                          DCD      ||.data||
                  |L37.164|
                          DCD      ||.bss||+0xdc

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityDisinherit PROC
;;;3483   
;;;3484   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3485   	{
;;;3486   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000002  0004              MOVS     r4,r0
;;;3487   	BaseType_t xReturn = pdFALSE;
000004  f04f0100          MOV      r1,#0
000008  d036              BEQ      |L38.120|
;;;3488   
;;;3489   		if( pxMutexHolder != NULL )
;;;3490   		{
;;;3491   			/* A task can only have an inherited priority if it holds the mutex.
;;;3492   			If the mutex is held by a task then it cannot be given from an
;;;3493   			interrupt, and if a mutex is given by the holding task then it must
;;;3494   			be the running state task. */
;;;3495   			configASSERT( pxTCB == pxCurrentTCB );
00000a  4d1c              LDR      r5,|L38.124|
00000c  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00000e  4284              CMP      r4,r0
000010  d002              BEQ      |L38.24|
000012  f7fffffe          BL       ulPortSetInterruptMask
                  |L38.22|
000016  e7fe              B        |L38.22|
                  |L38.24|
;;;3496   
;;;3497   			configASSERT( pxTCB->uxMutexesHeld );
000018  6ca0              LDR      r0,[r4,#0x48]
00001a  b138              CBZ      r0,|L38.44|
00001c  1e40              SUBS     r0,r0,#1
;;;3498   			( pxTCB->uxMutexesHeld )--;
;;;3499   
;;;3500   			/* Has the holder of the mutex inherited the priority of another
;;;3501   			task? */
;;;3502   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
00001e  64a0              STR      r0,[r4,#0x48]
000020  6c63              LDR      r3,[r4,#0x44]
000022  6ae2              LDR      r2,[r4,#0x2c]
000024  429a              CMP      r2,r3
000026  d027              BEQ      |L38.120|
;;;3503   			{
;;;3504   				/* Only disinherit if no other mutexes are held. */
;;;3505   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
000028  b118              CBZ      r0,|L38.50|
00002a  e025              B        |L38.120|
                  |L38.44|
00002c  f7fffffe          BL       ulPortSetInterruptMask
                  |L38.48|
000030  e7fe              B        |L38.48|
                  |L38.50|
;;;3506   				{
;;;3507   					/* A task can only have an inherited priority if it holds
;;;3508   					the mutex.  If the mutex is held by a task then it cannot be
;;;3509   					given from an interrupt, and if a mutex is given by the
;;;3510   					holding	task then it must be the running state task.  Remove
;;;3511   					the	holding task from the ready	list. */
;;;3512   					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000032  1d20              ADDS     r0,r4,#4
000034  f7fffffe          BL       uxListRemove
;;;3513   					{
;;;3514   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000038  4a11              LDR      r2,|L38.128|
00003a  2101              MOVS     r1,#1
00003c  b950              CBNZ     r0,|L38.84|
00003e  6ae0              LDR      r0,[r4,#0x2c]
000040  eb000380          ADD      r3,r0,r0,LSL #2
000044  f8523023          LDR      r3,[r2,r3,LSL #2]
000048  b923              CBNZ     r3,|L38.84|
00004a  692b              LDR      r3,[r5,#0x10]  ; uxTopReadyPriority
00004c  fa01f000          LSL      r0,r1,r0
000050  4383              BICS     r3,r3,r0
000052  612b              STR      r3,[r5,#0x10]  ; uxTopReadyPriority
                  |L38.84|
;;;3515   					}
;;;3516   					else
;;;3517   					{
;;;3518   						mtCOVERAGE_TEST_MARKER();
;;;3519   					}
;;;3520   
;;;3521   					/* Disinherit the priority before adding the task into the
;;;3522   					new	ready list. */
;;;3523   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;3524   					pxTCB->uxPriority = pxTCB->uxBasePriority;
000054  6c60              LDR      r0,[r4,#0x44]
;;;3525   
;;;3526   					/* Reset the event list item value.  It cannot be in use for
;;;3527   					any other purpose if this task is running, and it must be
;;;3528   					running to give back the mutex. */
;;;3529   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000056  62e0              STR      r0,[r4,#0x2c]
000058  f1c00007          RSB      r0,r0,#7
;;;3530   					prvAddTaskToReadyList( pxTCB );
00005c  61a0              STR      r0,[r4,#0x18]
00005e  6ae0              LDR      r0,[r4,#0x2c]
000060  692b              LDR      r3,[r5,#0x10]  ; uxTopReadyPriority
000062  4081              LSLS     r1,r1,r0
000064  4319              ORRS     r1,r1,r3
000066  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000068  eb000080          ADD      r0,r0,r0,LSL #2
00006c  eb020080          ADD      r0,r2,r0,LSL #2
000070  1d21              ADDS     r1,r4,#4
000072  f7fffffe          BL       vListInsertEnd
;;;3531   
;;;3532   					/* Return true to indicate that a context switch is required.
;;;3533   					This is only actually required in the corner case whereby
;;;3534   					multiple mutexes were held and the mutexes were given back
;;;3535   					in an order different to that in which they were taken.
;;;3536   					If a context switch did not occur when the first mutex was
;;;3537   					returned, even if a task was waiting on it, then a context
;;;3538   					switch should occur when the last mutex is returned whether
;;;3539   					a task is waiting on it or not. */
;;;3540   					xReturn = pdTRUE;
000076  2101              MOVS     r1,#1
                  |L38.120|
;;;3541   				}
;;;3542   				else
;;;3543   				{
;;;3544   					mtCOVERAGE_TEST_MARKER();
;;;3545   				}
;;;3546   			}
;;;3547   			else
;;;3548   			{
;;;3549   				mtCOVERAGE_TEST_MARKER();
;;;3550   			}
;;;3551   		}
;;;3552   		else
;;;3553   		{
;;;3554   			mtCOVERAGE_TEST_MARKER();
;;;3555   		}
;;;3556   
;;;3557   		return xReturn;
000078  4608              MOV      r0,r1
;;;3558   	}
00007a  bd70              POP      {r4-r6,pc}
;;;3559   
                          ENDP

                  |L38.124|
                          DCD      ||.data||
                  |L38.128|
                          DCD      ||.bss||

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;2464   
;;;2465   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2466   {
;;;2467   TCB_t *pxUnblockedTCB;
;;;2468   BaseType_t xReturn;
;;;2469   
;;;2470   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;2471   	called from a critical section within an ISR. */
;;;2472   
;;;2473   	/* The event list is sorted in priority order, so the first in the list can
;;;2474   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;2475   	the delayed list, and add it to the ready list.
;;;2476   
;;;2477   	If an event is for a queue that is locked then this function will never
;;;2478   	get called - the lock count on the queue will get modified instead.  This
;;;2479   	means exclusive access to the event list is guaranteed here.
;;;2480   
;;;2481   	This function assumes that a check has already been made to ensure that
;;;2482   	pxEventList is not empty. */
;;;2483   	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000004  68c0              LDR      r0,[r0,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]          ;2466
000008  b1ac              CBZ      r4,|L39.54|
;;;2484   	configASSERT( pxUnblockedTCB );
;;;2485   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
00000a  f1040018          ADD      r0,r4,#0x18
00000e  4607              MOV      r7,r0
000010  f7fffffe          BL       uxListRemove
;;;2486   
;;;2487   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000014  4d13              LDR      r5,|L39.100|
000016  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
;;;2488   	{
;;;2489   		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
;;;2490   		prvAddTaskToReadyList( pxUnblockedTCB );
000018  2601              MOVS     r6,#1
00001a  b178              CBZ      r0,|L39.60|
00001c  4639              MOV      r1,r7                 ;2487
;;;2491   	}
;;;2492   	else
;;;2493   	{
;;;2494   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;2495   		pending until the scheduler is resumed. */
;;;2496   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
00001e  4812              LDR      r0,|L39.104|
                  |L39.32|
000020  f7fffffe          BL       vListInsertEnd
;;;2497   	}
;;;2498   
;;;2499   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000024  6ae0              LDR      r0,[r4,#0x2c]
000026  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000028  6ac9              LDR      r1,[r1,#0x2c]
00002a  4288              CMP      r0,r1
00002c  d917              BLS      |L39.94|
;;;2500   	{
;;;2501   		/* Return true if the task removed from the event list has a higher
;;;2502   		priority than the calling task.  This allows the calling task to know if
;;;2503   		it should force a context switch now. */
;;;2504   		xReturn = pdTRUE;
00002e  2001              MOVS     r0,#1
;;;2505   
;;;2506   		/* Mark that a yield is pending in case the user is not using the
;;;2507   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2508   		xYieldPending = pdTRUE;
000030  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L39.50|
;;;2509   	}
;;;2510   	else
;;;2511   	{
;;;2512   		xReturn = pdFALSE;
;;;2513   	}
;;;2514   
;;;2515   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;2516   	{
;;;2517   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;2518   		might be set to the blocked task's time out time.  If the task is
;;;2519   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;2520   		normally left unchanged, because it is automatically reset to a new
;;;2521   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;2522   		tickless idling is used it might be more important to enter sleep mode
;;;2523   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;2524   		ensure it is updated at the earliest possible time. */
;;;2525   		prvResetNextTaskUnblockTime();
;;;2526   	}
;;;2527   	#endif
;;;2528   
;;;2529   	return xReturn;
;;;2530   }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L39.54|
000036  f7fffffe          BL       ulPortSetInterruptMask
                  |L39.58|
00003a  e7fe              B        |L39.58|
                  |L39.60|
00003c  1d20              ADDS     r0,r4,#4              ;2489
00003e  f7fffffe          BL       uxListRemove
000042  6ae1              LDR      r1,[r4,#0x2c]         ;2490
000044  692a              LDR      r2,[r5,#0x10]         ;2490  ; uxTopReadyPriority
000046  fa06f001          LSL      r0,r6,r1              ;2490
00004a  4310              ORRS     r0,r0,r2              ;2490
00004c  6128              STR      r0,[r5,#0x10]         ;2490  ; uxTopReadyPriority
00004e  eb010081          ADD      r0,r1,r1,LSL #2       ;2490
000052  4905              LDR      r1,|L39.104|
000054  39b4              SUBS     r1,r1,#0xb4           ;2490
000056  eb010080          ADD      r0,r1,r0,LSL #2       ;2490
00005a  1d21              ADDS     r1,r4,#4              ;2490
00005c  e7e0              B        |L39.32|
                  |L39.94|
00005e  2000              MOVS     r0,#0                 ;2512
000060  e7e7              B        |L39.50|
;;;2531   /*-----------------------------------------------------------*/
                          ENDP

000062  0000              DCW      0x0000
                  |L39.100|
                          DCD      ||.data||
                  |L39.104|
                          DCD      ||.bss||+0xb4

                          AREA ||i.xTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromUnorderedEventList PROC
;;;2532   
;;;2533   BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  b570              PUSH     {r4-r6,lr}
;;;2534   {
;;;2535   TCB_t *pxUnblockedTCB;
;;;2536   BaseType_t xReturn;
;;;2537   
;;;2538   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2539   	the event flags implementation. */
;;;2540   	configASSERT( uxSchedulerSuspended != pdFALSE );
000002  4e16              LDR      r6,|L40.92|
000004  6af2              LDR      r2,[r6,#0x2c]  ; uxSchedulerSuspended
000006  b302              CBZ      r2,|L40.74|
;;;2541   
;;;2542   	/* Store the new item value in the event list. */
;;;2543   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000008  f0414100          ORR      r1,r1,#0x80000000
;;;2544   
;;;2545   	/* Remove the event list form the event flag.  Interrupts do not access
;;;2546   	event flags. */
;;;2547   	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
00000c  6001              STR      r1,[r0,#0]
;;;2548   	configASSERT( pxUnblockedTCB );
00000e  68c4              LDR      r4,[r0,#0xc]
000010  b1f4              CBZ      r4,|L40.80|
;;;2549   	( void ) uxListRemove( pxEventListItem );
000012  f7fffffe          BL       uxListRemove
;;;2550   
;;;2551   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;2552   	scheduler is suspended so interrupts will not be accessing the ready
;;;2553   	lists. */
;;;2554   	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       uxListRemove
;;;2555   	prvAddTaskToReadyList( pxUnblockedTCB );
00001c  6ae1              LDR      r1,[r4,#0x2c]
00001e  2501              MOVS     r5,#1
000020  6932              LDR      r2,[r6,#0x10]  ; uxTopReadyPriority
000022  fa05f001          LSL      r0,r5,r1
000026  4310              ORRS     r0,r0,r2
000028  6130              STR      r0,[r6,#0x10]  ; uxTopReadyPriority
00002a  eb010081          ADD      r0,r1,r1,LSL #2
00002e  490c              LDR      r1,|L40.96|
000030  eb010080          ADD      r0,r1,r0,LSL #2
000034  1d21              ADDS     r1,r4,#4
000036  f7fffffe          BL       vListInsertEnd
;;;2556   
;;;2557   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
00003a  6ae0              LDR      r0,[r4,#0x2c]
00003c  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
00003e  6ac9              LDR      r1,[r1,#0x2c]
000040  4288              CMP      r0,r1
000042  d908              BLS      |L40.86|
;;;2558   	{
;;;2559   		/* Return true if the task removed from the event list has
;;;2560   		a higher priority than the calling task.  This allows
;;;2561   		the calling task to know if it should force a context
;;;2562   		switch now. */
;;;2563   		xReturn = pdTRUE;
000044  2001              MOVS     r0,#1
;;;2564   
;;;2565   		/* Mark that a yield is pending in case the user is not using the
;;;2566   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2567   		xYieldPending = pdTRUE;
000046  61f5              STR      r5,[r6,#0x1c]  ; xYieldPending
;;;2568   	}
;;;2569   	else
;;;2570   	{
;;;2571   		xReturn = pdFALSE;
;;;2572   	}
;;;2573   
;;;2574   	return xReturn;
;;;2575   }
000048  bd70              POP      {r4-r6,pc}
                  |L40.74|
00004a  f7fffffe          BL       ulPortSetInterruptMask
                  |L40.78|
00004e  e7fe              B        |L40.78|
                  |L40.80|
000050  f7fffffe          BL       ulPortSetInterruptMask
                  |L40.84|
000054  e7fe              B        |L40.84|
                  |L40.86|
000056  2000              MOVS     r0,#0                 ;2571
000058  bd70              POP      {r4-r6,pc}
;;;2576   /*-----------------------------------------------------------*/
                          ENDP

00005a  0000              DCW      0x0000
                  |L40.92|
                          DCD      ||.data||
                  |L40.96|
                          DCD      ||.bss||

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;1670   
;;;1671   BaseType_t xTaskResumeAll( void )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1672   {
;;;1673   TCB_t *pxTCB;
;;;1674   BaseType_t xAlreadyYielded = pdFALSE;
;;;1675   
;;;1676   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;1677   	previous call to vTaskSuspendAll(). */
;;;1678   	configASSERT( uxSchedulerSuspended );
000004  4c27              LDR      r4,|L41.164|
000006  2600              MOVS     r6,#0                 ;1674
000008  6ae0              LDR      r0,[r4,#0x2c]  ; uxSchedulerSuspended
00000a  b138              CBZ      r0,|L41.28|
;;;1679   
;;;1680   	/* It is possible that an ISR caused a task to be removed from an event
;;;1681   	list while the scheduler was suspended.  If this was the case then the
;;;1682   	removed task will have been added to the xPendingReadyList.  Once the
;;;1683   	scheduler has been resumed it is safe to move all the pending ready
;;;1684   	tasks from this list into their appropriate ready list. */
;;;1685   	taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;1686   	{
;;;1687   		--uxSchedulerSuspended;
000010  6ae0              LDR      r0,[r4,#0x2c]  ; uxSchedulerSuspended
000012  1e40              SUBS     r0,r0,#1
000014  62e0              STR      r0,[r4,#0x2c]  ; uxSchedulerSuspended
;;;1688   
;;;1689   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000016  6ae0              LDR      r0,[r4,#0x2c]  ; uxSchedulerSuspended
000018  b118              CBZ      r0,|L41.34|
00001a  e03d              B        |L41.152|
                  |L41.28|
00001c  f7fffffe          BL       ulPortSetInterruptMask
                  |L41.32|
000020  e7fe              B        |L41.32|
                  |L41.34|
;;;1690   		{
;;;1691   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
000022  68a1              LDR      r1,[r4,#8]  ; uxCurrentNumberOfTasks
;;;1692   			{
;;;1693   				/* Move any readied tasks from the pending list into the
;;;1694   				appropriate ready list. */
;;;1695   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
;;;1696   				{
;;;1697   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
000024  4d20              LDR      r5,|L41.168|
;;;1698   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;1699   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;1700   					prvAddTaskToReadyList( pxTCB );
000026  2001              MOVS     r0,#1
000028  b379              CBZ      r1,|L41.138|
00002a  f1a509b4          SUB      r9,r5,#0xb4
00002e  4680              MOV      r8,r0
                  |L41.48|
000030  6828              LDR      r0,[r5,#0]            ;1695  ; xPendingReadyList
000032  b1e8              CBZ      r0,|L41.112|
000034  68e8              LDR      r0,[r5,#0xc]          ;1697  ; xPendingReadyList
000036  68c7              LDR      r7,[r0,#0xc]          ;1698
000038  f1070018          ADD      r0,r7,#0x18           ;1698
00003c  f7fffffe          BL       uxListRemove
000040  1d38              ADDS     r0,r7,#4              ;1699
000042  f7fffffe          BL       uxListRemove
000046  6af9              LDR      r1,[r7,#0x2c]
000048  6922              LDR      r2,[r4,#0x10]  ; uxTopReadyPriority
00004a  fa08f001          LSL      r0,r8,r1
00004e  4310              ORRS     r0,r0,r2
000050  6120              STR      r0,[r4,#0x10]  ; uxTopReadyPriority
000052  eb010181          ADD      r1,r1,r1,LSL #2
000056  eb090081          ADD      r0,r9,r1,LSL #2
00005a  1d39              ADDS     r1,r7,#4
00005c  f7fffffe          BL       vListInsertEnd
;;;1701   
;;;1702   					/* If the moved task has a priority higher than the current
;;;1703   					task then a yield must be performed. */
;;;1704   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
000060  6af8              LDR      r0,[r7,#0x2c]
000062  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
000064  6ac9              LDR      r1,[r1,#0x2c]
000066  4288              CMP      r0,r1
000068  d3e2              BCC      |L41.48|
;;;1705   					{
;;;1706   						xYieldPending = pdTRUE;
00006a  f8c4801c          STR      r8,[r4,#0x1c]  ; xYieldPending
00006e  e7df              B        |L41.48|
                  |L41.112|
;;;1707   					}
;;;1708   					else
;;;1709   					{
;;;1710   						mtCOVERAGE_TEST_MARKER();
;;;1711   					}
;;;1712   				}
;;;1713   
;;;1714   				/* If any ticks occurred while the scheduler was suspended then
;;;1715   				they should be processed now.  This ensures the tick count does
;;;1716   				not	slip, and that any delayed tasks are resumed at the correct
;;;1717   				time. */
;;;1718   				if( uxPendedTicks > ( UBaseType_t ) 0U )
000070  69a0              LDR      r0,[r4,#0x18]  ; uxPendedTicks
000072  b158              CBZ      r0,|L41.140|
000074  4645              MOV      r5,r8                 ;1700
                  |L41.118|
;;;1719   				{
;;;1720   					while( uxPendedTicks > ( UBaseType_t ) 0U )
000076  69a0              LDR      r0,[r4,#0x18]  ; uxPendedTicks
000078  b140              CBZ      r0,|L41.140|
;;;1721   					{
;;;1722   						if( xTaskIncrementTick() != pdFALSE )
00007a  f7fffffe          BL       xTaskIncrementTick
00007e  b100              CBZ      r0,|L41.130|
;;;1723   						{
;;;1724   							xYieldPending = pdTRUE;
000080  61e5              STR      r5,[r4,#0x1c]  ; xYieldPending
                  |L41.130|
;;;1725   						}
;;;1726   						else
;;;1727   						{
;;;1728   							mtCOVERAGE_TEST_MARKER();
;;;1729   						}
;;;1730   						--uxPendedTicks;
000082  69a0              LDR      r0,[r4,#0x18]  ; uxPendedTicks
000084  1e40              SUBS     r0,r0,#1
000086  61a0              STR      r0,[r4,#0x18]  ; uxPendedTicks
000088  e7f5              B        |L41.118|
                  |L41.138|
00008a  e005              B        |L41.152|
                  |L41.140|
;;;1731   					}
;;;1732   				}
;;;1733   				else
;;;1734   				{
;;;1735   					mtCOVERAGE_TEST_MARKER();
;;;1736   				}
;;;1737   
;;;1738   				if( xYieldPending == pdTRUE )
00008c  69e0              LDR      r0,[r4,#0x1c]  ; xYieldPending
00008e  2801              CMP      r0,#1
000090  d102              BNE      |L41.152|
;;;1739   				{
;;;1740   					#if( configUSE_PREEMPTION != 0 )
;;;1741   					{
;;;1742   						xAlreadyYielded = pdTRUE;
000092  2601              MOVS     r6,#1
;;;1743   					}
;;;1744   					#endif
;;;1745   					taskYIELD_IF_USING_PREEMPTION();
000094  f7fffffe          BL       vPortYield
                  |L41.152|
;;;1746   				}
;;;1747   				else
;;;1748   				{
;;;1749   					mtCOVERAGE_TEST_MARKER();
;;;1750   				}
;;;1751   			}
;;;1752   		}
;;;1753   		else
;;;1754   		{
;;;1755   			mtCOVERAGE_TEST_MARKER();
;;;1756   		}
;;;1757   	}
;;;1758   	taskEXIT_CRITICAL();
000098  f7fffffe          BL       vPortExitCritical
;;;1759   
;;;1760   	return xAlreadyYielded;
00009c  4630              MOV      r0,r6
;;;1761   }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;1762   /*-----------------------------------------------------------*/
                          ENDP

0000a2  0000              DCW      0x0000
                  |L41.164|
                          DCD      ||.data||
                  |L41.168|
                          DCD      ||.bss||+0xb4

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1472   
;;;1473   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1474   	{
;;;1475   	BaseType_t xYieldRequired = pdFALSE;
000004  2600              MOVS     r6,#0
;;;1476   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000006  0004              MOVS     r4,r0
000008  d00a              BEQ      |L42.32|
;;;1477   	UBaseType_t uxSavedInterruptStatus;
;;;1478   
;;;1479   		configASSERT( xTaskToResume );
;;;1480   
;;;1481   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1482   		maximum	system call (or maximum API call) interrupt priority.
;;;1483   		Interrupts that are	above the maximum system call priority are keep
;;;1484   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1485   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1486   		is defined in FreeRTOSConfig.h then
;;;1487   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1488   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1489   		been assigned a priority above the configured maximum system call
;;;1490   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1491   		from interrupts	that have been assigned a priority at or (logically)
;;;1492   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1493   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1494   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1495   		provided on the following link:
;;;1496   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1497   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00000a  f7fffffe          BL       vPortValidateInterruptPriority
;;;1498   
;;;1499   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000e  f7fffffe          BL       ulPortSetInterruptMask
000012  4607              MOV      r7,r0
;;;1500   		{
;;;1501   			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       prvTaskIsTaskSuspended
00001a  2801              CMP      r0,#1
00001c  d003              BEQ      |L42.38|
00001e  e021              B        |L42.100|
                  |L42.32|
000020  f7fffffe          BL       ulPortSetInterruptMask
                  |L42.36|
000024  e7fe              B        |L42.36|
                  |L42.38|
;;;1502   			{
;;;1503   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1504   
;;;1505   				/* Check the ready lists can be accessed. */
;;;1506   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000026  4d12              LDR      r5,|L42.112|
000028  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
00002a  b118              CBZ      r0,|L42.52|
;;;1507   				{
;;;1508   					/* Ready lists can be accessed so move the task from the
;;;1509   					suspended list to the ready list directly. */
;;;1510   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;1511   					{
;;;1512   						xYieldRequired = pdTRUE;
;;;1513   					}
;;;1514   					else
;;;1515   					{
;;;1516   						mtCOVERAGE_TEST_MARKER();
;;;1517   					}
;;;1518   
;;;1519   					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
;;;1520   					prvAddTaskToReadyList( pxTCB );
;;;1521   				}
;;;1522   				else
;;;1523   				{
;;;1524   					/* The delayed or ready lists cannot be accessed so the task
;;;1525   					is held in the pending ready list until the scheduler is
;;;1526   					unsuspended. */
;;;1527   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
00002c  f1040118          ADD      r1,r4,#0x18
000030  4810              LDR      r0,|L42.116|
000032  e015              B        |L42.96|
                  |L42.52|
000034  6ae0              LDR      r0,[r4,#0x2c]         ;1510
000036  6829              LDR      r1,[r5,#0]            ;1510  ; pxCurrentTCB
000038  6ac9              LDR      r1,[r1,#0x2c]         ;1510
00003a  4288              CMP      r0,r1                 ;1510
00003c  d300              BCC      |L42.64|
00003e  2601              MOVS     r6,#1                 ;1512
                  |L42.64|
000040  1d20              ADDS     r0,r4,#4              ;1519
000042  f7fffffe          BL       uxListRemove
000046  6ae1              LDR      r1,[r4,#0x2c]         ;1520
000048  2001              MOVS     r0,#1                 ;1520
00004a  692a              LDR      r2,[r5,#0x10]         ;1520  ; uxTopReadyPriority
00004c  4088              LSLS     r0,r0,r1              ;1520
00004e  4310              ORRS     r0,r0,r2              ;1520
000050  6128              STR      r0,[r5,#0x10]         ;1520  ; uxTopReadyPriority
000052  eb010081          ADD      r0,r1,r1,LSL #2       ;1520
000056  4907              LDR      r1,|L42.116|
000058  39b4              SUBS     r1,r1,#0xb4           ;1520
00005a  eb010080          ADD      r0,r1,r0,LSL #2       ;1520
00005e  1d21              ADDS     r1,r4,#4              ;1520
                  |L42.96|
000060  f7fffffe          BL       vListInsertEnd
                  |L42.100|
;;;1528   				}
;;;1529   			}
;;;1530   			else
;;;1531   			{
;;;1532   				mtCOVERAGE_TEST_MARKER();
;;;1533   			}
;;;1534   		}
;;;1535   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       vPortClearInterruptMask
;;;1536   
;;;1537   		return xYieldRequired;
00006a  4630              MOV      r0,r6
;;;1538   	}
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;1539   
                          ENDP

                  |L42.112|
                          DCD      ||.data||
                  |L42.116|
                          DCD      ||.bss||+0xb4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        140
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  uxTasksDeleted
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
